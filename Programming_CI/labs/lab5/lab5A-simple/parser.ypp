%{
  #include <stdlib.h> /* Required to compile with C++ */
  #include <stdio.h>
  #include <ctype.h>
  #include "global.h"
  #include "treenode.h"
  extern int yyparse(); /* Required to compile with C++ */
  extern void yyerror(char*); /* Required to compile with C++ */
  extern int yylex(void); /* Required to compile with C++ */
%}

%union {
  struct TreeNode* p;
}

%type <p> expr ID NUM
%token NUM ID DONE

%left '+'

%%

start: list DONE
	;

list: expr ';' list 
	| /* empty */	
	;

expr: expr '+' expr { $$ = mknode('+', $1, $3); printf("%d %d\n", $$->args[0]->leaf_value, $$->args[1]->leaf_value); }
	| ID {$$ = mkleaf(ID, $1->leaf_value); }
	| NUM {$$ = mkleaf(NUM, $1->leaf_value); }
	;

%%

int yylex(void) {
  return lexan();
}

void yyerror(char *s) {
  fprintf(stderr, "%s\n", s);
}

TreeNode*
mknode(int type, TreeNode* a0, TreeNode* a1, TreeNode* a2) {
  TreeNode* p = new TreeNode();
  p->type = type;
  p->args[0] = a0;
  p->args[1] = a1;
  p->args[2] = a2;
  return p;
}

TreeNode* mkleaf(int type, int value) {
  TreeNode* p = new TreeNode();
  p->type = type;
  p->leaf_value = value;
  return p;
}

int main(void)
{
    yyparse();
}