#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
% DO NOT ALTER THIS PREAMBLE!!!
%
%This preamble is designed to ensure that the document prints
% out as advertised. If you mess with this preamble,
% parts of the document may not print out as expected.  If you
% have problems LaTeXing this file, please contact 
% the documentation team
% email: lyx-docs@lists.lyx.org

\usepackage{ifpdf} % part of the hyperref bundle
\ifpdf % if pdflatex is used
     % set fonts for nicer pdf view
     \IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}
\fi % end if pdflatex is used

\usepackage{tikz}
\usetikzlibrary{mindmap}
\usepackage{attachfile2}
\usepackage{embedfile}
\usepackage{hypgotoe}
\usepackage{verbatim}
%\embedfile{Intro.pdf}
\usepackage{tocloft}
\renewcommand{\cftdot}{}
\usepackage{minitoc}
\definecolor{green}{RGB}{0, 180, 0}
\definecolor{cyan}{RGB}{0, 180, 180}
\definecolor{yellow}{RGB}{102,51,0}
\definecolor{bluekeywords}{rgb}{0.13,0.13,1}
\definecolor{greencomments}{rgb}{0,0.5,0}
\definecolor{redstrings}{rgb}{0.9,0,0}

\usepackage{listings}
\usepackage{courier}
\lstset{language=[Visual]C++,
showspaces=false,
showtabs=false,
breaklines=true,
showstringspaces=false,
breakatwhitespace=true,
escapeinside={(*@}{@*)},
commentstyle=\color{greencomments},
keywordstyle=\color{bluekeywords},
stringstyle=\color{redstrings},
basicstyle=\ttfamily,
tabsize=3
}

\lstloadlanguages{% Check Dokumentation for further languages ...
%[Visual]Basic
%Pascal
%C
C++,
%XML
%HTML
Java
}
%\DeclareCaptionFont{blue}{\color{blue}}

%\captionsetup[lstlisting]{singlelinecheck=false, labelfont={blue}, textfont={blue}}
\usepackage{caption}
\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{\colorbox[cmyk]{0.43, 0.35, 0.35,0.01}{\parbox{\textwidth}{\hspace{15pt}#1#2#3}}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white, singlelinecheck=false, margin=0pt, font={bf,footnotesize}}

% Style definition file generated by highlight 3.13, http://www.andre-simon.de/

\begin{comment}
% Highlighting theme: Acid
\usepackage{marvosym}
\newcommand{\hlstd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlnum}[1]{\textcolor[rgb]{0.5,0,0.5}{\bf{#1}}}
\newcommand{\hlesc}[1]{\textcolor[rgb]{1,0,1}{\bf{#1}}}
\newcommand{\hlstr}[1]{\textcolor[rgb]{0.65,0.52,0}{#1}}
\newcommand{\hlpps}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlslc}[1]{\textcolor[rgb]{0.95,0.47,0}{#1}}
\newcommand{\hlcom}[1]{\textcolor[rgb]{1,0.5,0}{#1}}
\newcommand{\hlppc}[1]{\textcolor[rgb]{0,0.5,0.75}{\bf{#1}}}
\newcommand{\hlopt}[1]{\textcolor[rgb]{1,0,0.5}{\bf{#1}}}
\newcommand{\hlipl}[1]{\textcolor[rgb]{0.62,0.36,1}{#1}}
\newcommand{\hllin}[1]{\textcolor[rgb]{0.19,0.19,0.19}{#1}}
\newcommand{\hlkwa}[1]{\textcolor[rgb]{0.73,0.47,0.47}{\bf{#1}}}
\newcommand{\hlkwb}[1]{\textcolor[rgb]{0.5,0.5,0.75}{\bf{#1}}}
\newcommand{\hlkwc}[1]{\textcolor[rgb]{0,0.5,0.75}{#1}}
\newcommand{\hlkwd}[1]{\textcolor[rgb]{0,0.27,0.4}{#1}}
\definecolor{bgcolor}{rgb}{0.93,0.93,0.93}
\end{comment}

% Highlighting theme: Visual Studio IDE
\newcommand{\hlstd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlnum}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlesc}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hlstr}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hlpps}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlslc}[1]{\textcolor[rgb]{0,0.5,0}{#1}}
\newcommand{\hlcom}[1]{\textcolor[rgb]{0,0.5,0}{#1}}
\newcommand{\hlppc}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlopt}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlipl}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hllin}[1]{\textcolor[rgb]{0.17,0.57,0.69}{#1}}
\newcommand{\hlkwa}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlkwb}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlkwc}[1]{\textcolor[rgb]{0.17,0.57,0.69}{#1}}
\newcommand{\hlkwd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\definecolor{bgcolor}{rgb}{1,1,1}

\cftsetindents{part}{-0.325in}{0.25in}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Artificial Intelligence in Mobile Robots
\begin_inset Newline newline
\end_inset

Lab 1 - Getting started
\end_layout

\begin_layout Author
Lab Assistant: Ali Abdul Khaliq
\begin_inset Newline newline
\end_inset

Lab Students: Tobias L & Ã–zgun M
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Enumerate
Completed.
\end_layout

\begin_layout Enumerate
Completed.
\end_layout

\begin_layout Enumerate
Completed.
\end_layout

\begin_layout Enumerate
The simulator runs in relative positioning so SetTargetSteps are going to
 be different in the simulator and different for the real robot.
 The real robot is in absolute positioning meaning it will travel the correct
 distance for SetTargetSteps compared to the simulator.
 One thing that was noticed in the simulator was that the movement was faster
 than the real robot, because of the relative and absolute differences.
 The simulator did however do slower IR-readings than the real robot.
\end_layout

\begin_layout Enumerate
The function takes the left and right values and sends the values to the
 robot, which in turn sends pulses of messages to the robot to activate
 the motors.
 A value of 1000 to both left and right gives 1000 pulses per 10 msec.
 SetTargetSteps(2000,3000) makes the right wheel turn for 2 rotation and
 the left for 3 total rotations.
 It continues to turn one more rotation after the right one has finished,
 thus turning the car to a leftward direction.
\end_layout

\begin_layout Enumerate
SetSpeed makes the robot travel the same distance in the simulator and in
 the real environment.
 Sleep is required to stop the program from continuing to the next line
 of code to allow the vehicle to travel in said speed.
 Stop is needed to make the robot stop so it doesn't run forever.
 SetSpeed reads values of right and left like SetTargetSteps.
 It also sends the values to the robot.
\end_layout

\begin_layout Enumerate
Moving the robot forwards and backwards with function SetTargetSteps
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

int direction = 500;
\end_layout

\begin_layout Plain Layout

for(i = 0; i < 5; i++) {
\end_layout

\begin_layout Plain Layout

	SetTargetSteps(direction, direction); 
\end_layout

\begin_layout Plain Layout

	Sleep(500); 
\end_layout

\begin_layout Plain Layout

	direction *= -1; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Moving the robot forwards and backwards with function SetSpeed
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

int direction = 500;
\end_layout

\begin_layout Plain Layout

for(i = 0; i < 5; i++) {
\end_layout

\begin_layout Plain Layout

	SetSpeed(direction, direction); 
\end_layout

\begin_layout Plain Layout

	Sleep(1000); 
\end_layout

\begin_layout Plain Layout

	direction *= -1; 
\end_layout

\begin_layout Plain Layout

} Stop();
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

Move-function to move the robot a certain direction
\lang english

\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

// 1 step = 7.71 mm 
\end_layout

\begin_layout Plain Layout

void Move(double mm) { 
\end_layout

\begin_layout Plain Layout

	float StepsPermm = 7.71; 
\end_layout

\begin_layout Plain Layout

	int steps = mm * StepsPermm + GetSteps().l; // GetSteps().l (!) 
\end_layout

\begin_layout Plain Layout

	printf("Moving %lf millimeters
\backslash
n", mm); 
\end_layout

\begin_layout Plain Layout

	printf("Setting steps: %d
\backslash
n", steps); 
\end_layout

\begin_layout Plain Layout

	SetTargetSteps(steps, steps); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Turn-function to turn the robot a certain degree from where it's facing.
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

// 1 step = 3.63 degrees 
\end_layout

\begin_layout Plain Layout

void Turn(double degrees) { 
\end_layout

\begin_layout Plain Layout

	float StepsPerDegree = 3.63; 
\end_layout

\begin_layout Plain Layout

	int steps = degrees * StepsPerDegree + GetSteps().l; 
\end_layout

\begin_layout Plain Layout

	printf("Turning %lf degrees
\backslash
n", degrees); 
\end_layout

\begin_layout Plain Layout

	printf("Setting steps %d:
\backslash
n", steps); 
\end_layout

\begin_layout Plain Layout

	SetTargetSteps(steps, -steps); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
The precision of this function is less than the previous function.
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void Move2(double mm) { 
\end_layout

\begin_layout Plain Layout

	float StepsPermm = 7.71; 
\end_layout

\begin_layout Plain Layout

	int initialSteps = GetSteps().l; 
\end_layout

\begin_layout Plain Layout

	float target = GetSteps().l + mm * StepsPermm; 
\end_layout

\begin_layout Plain Layout

	SetSpeed(400, 400); 
\end_layout

\begin_layout Plain Layout

	// "Busy wait" until target is reached...
 
\end_layout

\begin_layout Plain Layout

	while (GetSteps().l * 1.0 < target) { 
\end_layout

\begin_layout Plain Layout

		printf("%d steps!
\backslash
n", GetSteps().l); 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	Stop(); 
\end_layout

\begin_layout Plain Layout

	printf("Final steps: %d
\backslash
n", GetSteps().l); 
\end_layout

\begin_layout Plain Layout

	float movedmm = (GetSteps().l - initialSteps) / StepsPermm; 
\end_layout

\begin_layout Plain Layout

	printf("Moved %lf mm!
\backslash
n", movedmm); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Completed.
\end_layout

\begin_layout Enumerate
Detects which of the sensors are receiving low light and activates the correspon
ding led to the IR-sensor number.
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void IRDetector() { 
\end_layout

\begin_layout Plain Layout

	Sensors ir; // get sensors voltage unsigned int (sensor) 
\end_layout

\begin_layout Plain Layout

	bool led[8] = {0,0,0,0,0,0,0,0}; // eight leds 
\end_layout

\begin_layout Plain Layout

	SetRingLED (led);
\end_layout

\begin_layout Plain Layout

	int i, j; 
\end_layout

\begin_layout Plain Layout

	for (i=0;i<1000;i++) { 
\end_layout

\begin_layout Plain Layout

		ir = GetIR(); 
\end_layout

\begin_layout Plain Layout

		printf("IR values: %4d, %4d, %4d, %4d, %4d, %4d, %4d, %4d
\backslash
n", 
\end_layout

\begin_layout Plain Layout

			ir.sensor[0], ir.sensor[1], ir.sensor[2], 
\end_layout

\begin_layout Plain Layout

			ir.sensor[3], ir.sensor[4], ir.sensor[5], 
\end_layout

\begin_layout Plain Layout

			ir.sensor[6], ir.sensor[7]); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		for (j=0; j<8; j++) { 
\end_layout

\begin_layout Plain Layout

			if (ir.sensor[j] > 1000) 
\end_layout

\begin_layout Plain Layout

				led[j] = 1; 
\end_layout

\begin_layout Plain Layout

			else 
\end_layout

\begin_layout Plain Layout

				led[j] = 0; 
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

		SetRingLED(led); 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
