#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
% DO NOT ALTER THIS PREAMBLE!!!
%
%This preamble is designed to ensure that the document prints
% out as advertised. If you mess with this preamble,
% parts of the document may not print out as expected.  If you
% have problems LaTeXing this file, please contact 
% the documentation team
% email: lyx-docs@lists.lyx.org

\usepackage{ifpdf} % part of the hyperref bundle
\ifpdf % if pdflatex is used
     % set fonts for nicer pdf view
     \IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}
\fi % end if pdflatex is used

\usepackage{tikz}
\usetikzlibrary{mindmap}
\usepackage{attachfile2}
\usepackage{embedfile}
\usepackage{hypgotoe}
\usepackage{verbatim}
%\embedfile{Intro.pdf}
\usepackage{tocloft}
\renewcommand{\cftdot}{}
\usepackage{minitoc}
\definecolor{green}{RGB}{0, 180, 0}
\definecolor{cyan}{RGB}{0, 180, 180}
\definecolor{yellow}{RGB}{102,51,0}
\definecolor{bluekeywords}{rgb}{0.13,0.13,1}
\definecolor{greencomments}{rgb}{0,0.5,0}
\definecolor{redstrings}{rgb}{0.9,0,0}

\usepackage{listings}
\usepackage{courier}
\lstset{language=[Visual]C++,
showspaces=false,
showtabs=false,
breaklines=true,
showstringspaces=false,
breakatwhitespace=true,
escapeinside={(*@}{@*)},
commentstyle=\color{greencomments},
keywordstyle=\color{bluekeywords},
stringstyle=\color{redstrings},
basicstyle=\ttfamily,
tabsize=3
}

\lstloadlanguages{% Check Dokumentation for further languages ...
%[Visual]Basic
%Pascal
%C
C++,
%XML
%HTML
Java
}
%\DeclareCaptionFont{blue}{\color{blue}}

%\captionsetup[lstlisting]{singlelinecheck=false, labelfont={blue}, textfont={blue}}
\usepackage{caption}
\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{\colorbox[cmyk]{0.43, 0.35, 0.35,0.01}{\parbox{\textwidth}{\hspace{15pt}#1#2#3}}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white, singlelinecheck=false, margin=0pt, font={bf,footnotesize}}

% Style definition file generated by highlight 3.13, http://www.andre-simon.de/

\begin{comment}
% Highlighting theme: Acid
\usepackage{marvosym}
\newcommand{\hlstd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlnum}[1]{\textcolor[rgb]{0.5,0,0.5}{\bf{#1}}}
\newcommand{\hlesc}[1]{\textcolor[rgb]{1,0,1}{\bf{#1}}}
\newcommand{\hlstr}[1]{\textcolor[rgb]{0.65,0.52,0}{#1}}
\newcommand{\hlpps}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlslc}[1]{\textcolor[rgb]{0.95,0.47,0}{#1}}
\newcommand{\hlcom}[1]{\textcolor[rgb]{1,0.5,0}{#1}}
\newcommand{\hlppc}[1]{\textcolor[rgb]{0,0.5,0.75}{\bf{#1}}}
\newcommand{\hlopt}[1]{\textcolor[rgb]{1,0,0.5}{\bf{#1}}}
\newcommand{\hlipl}[1]{\textcolor[rgb]{0.62,0.36,1}{#1}}
\newcommand{\hllin}[1]{\textcolor[rgb]{0.19,0.19,0.19}{#1}}
\newcommand{\hlkwa}[1]{\textcolor[rgb]{0.73,0.47,0.47}{\bf{#1}}}
\newcommand{\hlkwb}[1]{\textcolor[rgb]{0.5,0.5,0.75}{\bf{#1}}}
\newcommand{\hlkwc}[1]{\textcolor[rgb]{0,0.5,0.75}{#1}}
\newcommand{\hlkwd}[1]{\textcolor[rgb]{0,0.27,0.4}{#1}}
\definecolor{bgcolor}{rgb}{0.93,0.93,0.93}
\end{comment}

% Highlighting theme: Visual Studio IDE
\newcommand{\hlstd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlnum}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlesc}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hlstr}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hlpps}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlslc}[1]{\textcolor[rgb]{0,0.5,0}{#1}}
\newcommand{\hlcom}[1]{\textcolor[rgb]{0,0.5,0}{#1}}
\newcommand{\hlppc}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlopt}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlipl}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hllin}[1]{\textcolor[rgb]{0.17,0.57,0.69}{#1}}
\newcommand{\hlkwa}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlkwb}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlkwc}[1]{\textcolor[rgb]{0.17,0.57,0.69}{#1}}
\newcommand{\hlkwd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\definecolor{bgcolor}{rgb}{1,1,1}

\cftsetindents{part}{-0.325in}{0.25in}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Artificial Intelligence in Mobile Robots
\begin_inset Newline newline
\end_inset

Lab 1 - Getting started
\end_layout

\begin_layout Author
Lab Assistant: Ali Abdul Khaliq
\end_layout

\begin_layout Standard
Lab completed: 2016-09-05
\end_layout

\begin_layout Quotation
Lab Students: Name - PID - Email 
\end_layout

\begin_layout Quotation
Tobias L - 870603-6657 - tobiaslindwall@gmail.com 
\end_layout

\begin_layout Quotation
Ã–zgun M - 920321-2379 - ozgun.mirtchev@gmail.com
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
In this lab the students were asked to get familiar with Linux and to learn
 about how the ePuck robot works.
 There were 13 total tasks to be done, with 5 optional ones.
 The objective of the tasks was trying to design functions to make the ePuck
 move and calibrate the constant values to make sure the functions are performin
g according to what is the expected output values.
 In example, how far the robot runs and how much it turns.
 In the optional tasks the objectives was mostly to compare different functions
 to see how much they differed between each other and to compare how the
 ePuck behaved.
\end_layout

\begin_layout Section
Tasks
\end_layout

\begin_layout Subsection
Familiarizing with Linux
\end_layout

\begin_layout Standard
Since both of the lab students were already familiar with Linux and the
 objectives of this task were basic, this step was mostly skipped.
\end_layout

\begin_layout Subsection
Read and download material
\end_layout

\begin_layout Standard
A close look into the documentation of ePuck and the code was looked and
 analyzed before moving on.
\end_layout

\begin_layout Subsection
Run the sample program on the ePuck
\end_layout

\begin_layout Standard
In the sample program the ePuck was moving forward and turning.
\end_layout

\begin_layout Subsection
Run the sample program on the simulator
\end_layout

\begin_layout Standard
The simulator runs in relative positioning so SetTargetSteps are going to
 be different in the simulator and different for the real ePuck.
 The real ePuck is in absolute positioning meaning it will travel the correct
 distance for SetTargetSteps compared to the simulator.
 One thing that was noticed in the simulator was that the movement was faster
 than the real ePuck, because of the relative and absolute differences.
 The simulator did however do slower IR-readings than the real ePuck.
\end_layout

\begin_layout Subsection
SetTargetSteps()-function
\end_layout

\begin_layout Standard
The function takes left and right values for respective wheel of the ePuck,
 which in turn activates the motors.
 A value of 1000 to both left and right gives 1000 pulses per 10 msec.
 SetTargetSteps(2000,3000) makes the right wheel turn for 2 rotation and
 the left for 3 total rotations.
 It continues to turn one more rotation after the right one has finished,
 thus turning the car to a leftward direction.
\end_layout

\begin_layout Subsection
SetSpeed()-function
\end_layout

\begin_layout Standard
SetSpeed makes the ePuck travel the same distance in the simulator and in
 the real environment.
 Sleep is required to stop the program from continuing to the next line
 of code to allow the vehicle to travel in said speed.
 Stop is needed to make the ePuck stop so it doesn't run forever.
 SetSpeed reads values of right and left like SetTargetSteps.
 The minimum/maximum which can be passed to the function is -1000 /1000.
 One observation when running SetSpeed close to 0 was that it was jerking
 around which caused it to turn unintendedly.
 When the SetSpeed-values was set to 300, 400 for a short time the robot
 didn't move at all, at least from a visual perspective.
 It might've moved a very short distance but it wasn't noticeably to the
 human eye.
 This is because the time intervall for the robot to move.
 When it received the message to initiate SetSpeed, it received a Stop-message
 immediately after.
\end_layout

\begin_layout Subsection
Moving the robot forwards and backwards with function SetTargetSteps
\end_layout

\begin_layout Standard
Here we made a simple for loop, which loops the function inside five times.
 It reverses by changing the direction values by multiplying by -1.
 
\end_layout

\begin_layout Standard
Code can be found in Appendix: Code1.
\end_layout

\begin_layout Subsection
Moving the robot forwards and backwards with function SetSpeed
\end_layout

\begin_layout Standard
The same method as the previous one was used for this one.
 
\end_layout

\begin_layout Standard
Code can be found in Appendix: Code2.
\end_layout

\begin_layout Subsection
(Optional) Move-function to move the robot a certain direction
\end_layout

\begin_layout Standard
To make the ePuck move a given distance in millimeter, one important thing
 to know was how many steps it took for the ePuck wheel to rotate one revolution.
 As mentioned before, one revolution of the wheel was 1000 steps, the circumfere
nce of the wheel was 129.05 mm.
 Amount of steps per mm was given by: 1000 steps / 129.05 mm ~= 7.75 steps/mm.
 By measuring the travelled distance of the ePuck and monitoring the values
 it produced, the end-result was calibrated to 7.71 steps/mm.
 
\end_layout

\begin_layout Standard
Code can be found in Appendix: Code3.
\end_layout

\begin_layout Subsection
(Optional) Turn-function to turn the robot a certain degree from where it's
 facing
\end_layout

\begin_layout Standard
To get how many steps was required for the ePuck to turn 1 degree, the circumfer
ence of the ePuck was used.
 The given diameter of the ePuck was 53 mm.
 To get the circumference: 52.55 mm * PI = 165.0 mm.
 To get the number of steps required for one degree, the steps from the
 previous task was used: 165.0 mm * 7.71 steps ~= 1272.20 steps.
 Steps per degree: 1272.20 steps / 360 degrees = 3.53 steps / degree.
 
\end_layout

\begin_layout Standard
This was later calibrated to 3.63.
\end_layout

\begin_layout Standard
Code can be found in Appendix: Code4.
\end_layout

\begin_layout Subsection
(Optional) Move-function version 2
\end_layout

\begin_layout Standard
This function is supposed to do the same as the previous function Move,
 but using the given function SetSpeed instead of SetTargetSteps.
 A 
\begin_inset Quotes eld
\end_inset

busy wait
\begin_inset Quotes erd
\end_inset

 loop was used instead of sleep to keep the wheels going until the condition
 to travel a certain distance was fulfilled.
 When this was fulfilled, the function Stop was called.
 This Move function was less precise than the previous one.
\end_layout

\begin_layout Standard
Code can be found in Appendix: Code5.
\end_layout

\begin_layout Subsection
(Optional) Move-function 3 - Not completed.
\end_layout

\begin_layout Subsection
(Optional) Simple IR-program.
\end_layout

\begin_layout Standard
This program makes the ePuck detect which of the sensors are receiving low
 light and activates the corresponding led to the IR-sensor number.
\end_layout

\begin_layout Standard
Code can be found in Appendix: Code6.
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
We had limited experience with Linux before we started this course, but
 doing this lab and programming in this environment has increased our understand
ing and experience some.
\begin_inset Newline newline
\end_inset

At first we had some problem using the rfcomm command to connect to the
 ePuck through bluetooth.
 This was solved by using the ePuck's mac adress as final argument in rfcomm
 (rfcomm connect rfcomm2 XX:XX:XX:XX:XX:XX).
\begin_inset Newline newline
\end_inset

Designing the movement functions for the ePuck was interesting because we
 had to analyse data from the ePuck and adjust our source code according
 to the requirements.
 It was also interesting to calibrate factors such as 
\begin_inset Quotes eld
\end_inset

steps per mm
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

steps per degree
\begin_inset Quotes erd
\end_inset

 and see improvements.
\begin_inset Newline newline
\end_inset

We are satisfied with our results, but if we were to improve it, we could
 do more tests and measurements of i.e.
 the wheels or maybe axis deformations and implement compensations.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Paragraph
\start_of_appendix
Appendix
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Code1: 
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

int direction = 500;
\end_layout

\begin_layout Plain Layout

for(i = 0; i < 5; i++) {
\end_layout

\begin_layout Plain Layout

	SetTargetSteps(direction, direction); 
\end_layout

\begin_layout Plain Layout

	Sleep(500); 
\end_layout

\begin_layout Plain Layout

	direction *= -1; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code2:
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

int direction = 500;
\end_layout

\begin_layout Plain Layout

for(i = 0; i < 5; i++) {
\end_layout

\begin_layout Plain Layout

	SetSpeed(direction, direction); 
\end_layout

\begin_layout Plain Layout

	Sleep(1000); 
\end_layout

\begin_layout Plain Layout

	direction *= -1; 
\end_layout

\begin_layout Plain Layout

} Stop();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code3:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

// 1 mm = 7.71 steps
\end_layout

\begin_layout Plain Layout

void Move(double mm) { 
\end_layout

\begin_layout Plain Layout

	float StepsPermm = 7.71; 
\end_layout

\begin_layout Plain Layout

	int steps = mm * StepsPermm + GetSteps().l; // GetSteps().l (!) 
\end_layout

\begin_layout Plain Layout

	printf("Moving %lf millimeters
\backslash
n", mm); 
\end_layout

\begin_layout Plain Layout

	printf("Setting steps: %d
\backslash
n", steps); 
\end_layout

\begin_layout Plain Layout

	SetTargetSteps(steps, steps); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code4:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

// 1 degree = 3.63 steps 
\end_layout

\begin_layout Plain Layout

void Turn(double degrees) { 
\end_layout

\begin_layout Plain Layout

	float StepsPerDegree = 3.63; 
\end_layout

\begin_layout Plain Layout

	int steps = degrees * StepsPerDegree + GetSteps().l; 
\end_layout

\begin_layout Plain Layout

	printf("Turning %lf degrees
\backslash
n", degrees); 
\end_layout

\begin_layout Plain Layout

	printf("Setting steps %d:
\backslash
n", steps); 
\end_layout

\begin_layout Plain Layout

	SetTargetSteps(steps, -steps); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code5:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void Move2(double mm) { 
\end_layout

\begin_layout Plain Layout

	float StepsPermm = 7.71; 
\end_layout

\begin_layout Plain Layout

	int initialSteps = GetSteps().l; 
\end_layout

\begin_layout Plain Layout

	float target = GetSteps().l + mm * StepsPermm; 
\end_layout

\begin_layout Plain Layout

	SetSpeed(400, 400); 
\end_layout

\begin_layout Plain Layout

	// "Busy wait" until target is reached...
 
\end_layout

\begin_layout Plain Layout

	while (GetSteps().l * 1.0 < target) { 
\end_layout

\begin_layout Plain Layout

		printf("%d steps!
\backslash
n", GetSteps().l); 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	Stop(); 
\end_layout

\begin_layout Plain Layout

	printf("Final steps: %d
\backslash
n", GetSteps().l); 
\end_layout

\begin_layout Plain Layout

	float movedmm = (GetSteps().l - initialSteps) / StepsPermm; 
\end_layout

\begin_layout Plain Layout

	printf("Moved %lf mm!
\backslash
n", movedmm); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code6:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void IRDetector() { 
\end_layout

\begin_layout Plain Layout

	Sensors ir; // get sensors voltage unsigned int (sensor) 
\end_layout

\begin_layout Plain Layout

	bool led[8] = {0,0,0,0,0,0,0,0}; // eight leds 
\end_layout

\begin_layout Plain Layout

	SetRingLED (led);
\end_layout

\begin_layout Plain Layout

	int i, j; 
\end_layout

\begin_layout Plain Layout

	for (i=0;i<1000;i++) { 
\end_layout

\begin_layout Plain Layout

		ir = GetIR(); 
\end_layout

\begin_layout Plain Layout

		printf("IR values: %4d, %4d, %4d, %4d, %4d, %4d, %4d, %4d
\backslash
n", 
\end_layout

\begin_layout Plain Layout

			ir.sensor[0], ir.sensor[1], ir.sensor[2], 
\end_layout

\begin_layout Plain Layout

			ir.sensor[3], ir.sensor[4], ir.sensor[5], 
\end_layout

\begin_layout Plain Layout

			ir.sensor[6], ir.sensor[7]); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		for (j=0; j<8; j++) { 
\end_layout

\begin_layout Plain Layout

			if (ir.sensor[j] > 1000) 
\end_layout

\begin_layout Plain Layout

				led[j] = 1; 
\end_layout

\begin_layout Plain Layout

			else 
\end_layout

\begin_layout Plain Layout

				led[j] = 0; 
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

		SetRingLED(led); 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
