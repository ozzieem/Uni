#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass report
\begin_preamble
% DO NOT ALTER THIS PREAMBLE!!!
%
%This preamble is designed to ensure that the document prints
% out as advertised. If you mess with this preamble,
% parts of the document may not print out as expected.  If you
% have problems LaTeXing this file, please contact 
% the documentation team
% email: lyx-docs@lists.lyx.org

\usepackage{ifpdf} % part of the hyperref bundle
\ifpdf % if pdflatex is used
     % set fonts for nicer pdf view
     \IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}
\fi % end if pdflatex is used

\usepackage{tikz}
\usetikzlibrary{mindmap}
\usepackage{attachfile2}
\usepackage{embedfile}
\usepackage{hypgotoe}
\usepackage{verbatim}
%\embedfile{Intro.pdf}
\usepackage{tocloft}
\renewcommand{\cftdot}{}
\usepackage{minitoc}
\definecolor{green}{RGB}{0, 180, 0}
\definecolor{cyan}{RGB}{0, 180, 180}
\definecolor{yellow}{RGB}{102,51,0}
\definecolor{bluekeywords}{rgb}{0.13,0.13,1}
\definecolor{greencomments}{rgb}{0,0.5,0}
\definecolor{redstrings}{rgb}{0.9,0,0}

\usepackage{listings}
\usepackage{courier}
\lstset{language=[Visual]C++,
showspaces=false,
showtabs=false,
breaklines=true,
showstringspaces=false,
breakatwhitespace=true,
escapeinside={(*@}{@*)},
commentstyle=\color{greencomments},
keywordstyle=\color{bluekeywords},
stringstyle=\color{redstrings},
basicstyle=\ttfamily,
tabsize=3
}

\lstloadlanguages{% Check Dokumentation for further languages ...
%[Visual]Basic
%Pascal
%C
C++,
%XML
%HTML
Java
}
%\DeclareCaptionFont{blue}{\color{blue}}

%\captionsetup[lstlisting]{singlelinecheck=false, labelfont={blue}, textfont={blue}}
\usepackage{caption}
\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{\colorbox[cmyk]{0.43, 0.35, 0.35,0.01}{\parbox{\textwidth}{\hspace{15pt}#1#2#3}}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white, singlelinecheck=false, margin=0pt, font={bf,footnotesize}}

% Style definition file generated by highlight 3.13, http://www.andre-simon.de/

\begin{comment}
% Highlighting theme: Acid
\usepackage{marvosym}
\newcommand{\hlstd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlnum}[1]{\textcolor[rgb]{0.5,0,0.5}{\bf{#1}}}
\newcommand{\hlesc}[1]{\textcolor[rgb]{1,0,1}{\bf{#1}}}
\newcommand{\hlstr}[1]{\textcolor[rgb]{0.65,0.52,0}{#1}}
\newcommand{\hlpps}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlslc}[1]{\textcolor[rgb]{0.95,0.47,0}{#1}}
\newcommand{\hlcom}[1]{\textcolor[rgb]{1,0.5,0}{#1}}
\newcommand{\hlppc}[1]{\textcolor[rgb]{0,0.5,0.75}{\bf{#1}}}
\newcommand{\hlopt}[1]{\textcolor[rgb]{1,0,0.5}{\bf{#1}}}
\newcommand{\hlipl}[1]{\textcolor[rgb]{0.62,0.36,1}{#1}}
\newcommand{\hllin}[1]{\textcolor[rgb]{0.19,0.19,0.19}{#1}}
\newcommand{\hlkwa}[1]{\textcolor[rgb]{0.73,0.47,0.47}{\bf{#1}}}
\newcommand{\hlkwb}[1]{\textcolor[rgb]{0.5,0.5,0.75}{\bf{#1}}}
\newcommand{\hlkwc}[1]{\textcolor[rgb]{0,0.5,0.75}{#1}}
\newcommand{\hlkwd}[1]{\textcolor[rgb]{0,0.27,0.4}{#1}}
\definecolor{bgcolor}{rgb}{0.93,0.93,0.93}
\end{comment}

% Highlighting theme: Visual Studio IDE
\newcommand{\hlstd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlnum}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlesc}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hlstr}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hlpps}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlslc}[1]{\textcolor[rgb]{0,0.5,0}{#1}}
\newcommand{\hlcom}[1]{\textcolor[rgb]{0,0.5,0}{#1}}
\newcommand{\hlppc}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlopt}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlipl}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hllin}[1]{\textcolor[rgb]{0.17,0.57,0.69}{#1}}
\newcommand{\hlkwa}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlkwb}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlkwc}[1]{\textcolor[rgb]{0.17,0.57,0.69}{#1}}
\newcommand{\hlkwd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\definecolor{bgcolor}{rgb}{1,1,1}

\cftsetindents{part}{-0.325in}{0.25in}

\renewcommand\thesection{\arabic{section}}
\renewcommand\thesubsection{\thesection.\arabic{subsection}}
\end_preamble
\use_default_options true
\begin_modules
multicol
sectionbox
theorems-ams
eqs-within-sections
figs-within-sections
algorithm2e
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
\shape smallcaps
\size huge
Artificial Intelligence in Mobile Robots
\series default
\shape default
\size default

\begin_inset Newline newline
\end_inset


\shape smallcaps
\size larger
Lab 4 - NAME
\end_layout

\begin_layout Author
By
\emph on
 Tobias L 
\emph default
&
\emph on
 Özgun M
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\emph default
Lab Assistant
\emph on
 Ali Abdul Khaliq
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\emph default
Örebro University
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard

\size larger
\bar under
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\size larger
\bar under
Student info
\end_layout

\end_inset


\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout

\size larger
\bar under
Student information
\end_layout

\begin_layout Plain Layout
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
Tobias Lindvall
\end_layout

\begin_layout Plain Layout
870603-6657
\end_layout

\begin_layout Plain Layout
tobiaslindwall@gmail.com
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
Özgun Mirtchev
\end_layout

\begin_layout Plain Layout
920321-2379
\end_layout

\begin_layout Plain Layout
ozgun.mirtchev@gmail.com
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\size default
\bar default

\begin_inset Float table
placement b
wide false
sideways false
status open

\begin_layout Plain Layout

\size largest
Report handed in: 2016-09-30
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-State lab objectives, and overview.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This lab is an introduction on how to control the ePuck using fuzzy rule-based
 controller.
 One task is to make the ePuck move to a specific point and another task
 is make it avoid obstacles.
 When talking about fuzzy rule-based control the following is required:
\end_layout

\begin_layout Itemize
A set of fuzzy predicates contains the truth values calculated from the
 theta error and distance error values to the target position.
\end_layout

\begin_layout Itemize
A set of fuzzy rules which evaluates the fuzzy predicates and produces response
 fuzzy sets that describes the velocity and rotation of the ePuck.
\end_layout

\begin_layout Itemize
A computing strategy which takes the fuzzy sets, and 
\begin_inset Quotes eld
\end_inset

defuzzifies
\begin_inset Quotes erd
\end_inset

 them.
 The fuzzy values are then defuzzified, computing a weighted combination
 of the fuzzy sets, using a 
\begin_inset Quotes eld
\end_inset

Center of Gravity
\begin_inset Quotes erd
\end_inset

 technique, to represent a response value for the velocity and the rotation.
 These values are translated into values which can be used for the ePuck.
\end_layout

\begin_layout Standard
The fuzzy rule-based controller makes the transition between velocity and
 rotational changes smoother and prevents the ePuck from wobbling during
 certain situations.
\end_layout

\begin_layout Standard
The tasks in this lab are to implement two fuzzy rule-based controllers.
 One is a 
\begin_inset Quotes eld
\end_inset

GoTo
\begin_inset Quotes erd
\end_inset

 controller and the other one is a controller to make the ePuck avoid obstacles
 by using the sensors.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Tasks
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-Explain what you did, and how you did it.
 
\end_layout

\begin_layout Plain Layout
-This section should explain what was done for EACH POINT of the lab assignment.
\end_layout

\begin_layout Plain Layout
-In particular, indicate which sections refer to optional parts.
 Indicate which optional parts were done, and how.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Task 1 - Implementing fuzzy 
\begin_inset Quotes eld
\end_inset

GoTo
\begin_inset Quotes erd
\end_inset

 rule-based controller
\end_layout

\begin_layout Standard
An algorithm representing the GoTo rule-based controller presented in pseudo
 code was given in this task.
\end_layout

\begin_layout Standard
This algorithm was implemented as a function GoToRules(double xt, double
 yt) where xt and yt is the goal position of the ePuck.
 The main task was to compute the error values for angle and distance to
 goal.
 From these error values, the fuzzy predicates were computed using the functions
 from the provided fuzzy.h library, RampUp(double Value, double RampStart,
 double RampEnd) and RampDown(double Value, double RampStart, double RampEnd).
 They both produces a truth value between 0.0 and 1.0 depending on the Value.
 RampStart and RampEnd describes the beginning and end of an interval which
 are used in the calculation of the returning truth value.
\end_layout

\begin_layout Standard
These fuzzy predicates were used in producing fuzzy sets by logical functions
 AND(), OR(), NOT() and IF().
 The fuzzy sets (f_set_vlin, f_set_vrot) holds fuzzy data for the rotation
 and velocity of the ePuck.
 These were computed into a weighted response and converted into the specific
 rotation and velocity values which were passed into the SetPolarSpeed(double
 vlin, double vrot) where vlin is mm/s and vrot is radians.
\end_layout

\begin_layout Standard
A pseudo code template function was also given.
\end_layout

\begin_layout Standard
Code for this task can be found in appendix: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperlink{LINKNAME}{Text to be shown}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Task 2 - Tuning the parameters for the FPreds (
\begin_inset Quotes eld
\end_inset

GoTo
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
The parameters for the fuzzy predicates were configured and can be found
 in the conclusions section.
 
\end_layout

\begin_layout Subsection
Task 3 - Implementing fuzzy 
\begin_inset Quotes eld
\end_inset

AvoidObstacles
\begin_inset Quotes erd
\end_inset

 rule-based controller
\end_layout

\begin_layout Standard
In implementing the AvoidRules function for the AvoidObstacles rule-based
 controller, two things were needed.
 The tresholds for the danger and no danger, and the IR sensors on the ePuck.
 
\end_layout

\begin_layout Standard
The sensors were used in passive mode, to measure the ambient light.
 This meant that when the values for the sensors are high, its darker and
 when the values are low, its lighter.
 In this task only the front, left and right sensors were used.
 
\end_layout

\begin_layout Standard
When implementing the AvoidRules function using the provided pseudo code
 from the lecture, the first process was to read the values from the IR-sensors
 on the ePuck.
 Second part was to compute the values of the fuzzy predicates using the
 RampUp and RampDown functions.
 The values from the IR-sensors and the danger treshold were passed to the
 functions to get a predicate value.
 The predicate value was used to create a fuzzy set through the provided
 fuzzy rules which was later defuzzified and converted to real values for
 the ePuck, similar to task 1.
 To test the navigation of the ePuck with the AvoidObstacles function, small
 wooden blocks were placed randomly around a quadratic area.
 To read more about how the ePuck behaved in avoiding certain obstacles,
 look into the conclusions section.
\end_layout

\begin_layout Subsection
Task 4 - Tuning the parameters for the FPreds (
\begin_inset Quotes eld
\end_inset

AvoidObstacles
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
The parameters for the fuzzy predicates were configured and can be found
 in the conclusions section.
 
\end_layout

\begin_layout Subsection
Task 6 (Optional) - Modifying rules for AvoidObstacles
\end_layout

\begin_layout Standard
Some modifications were done to the set of rules.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Paragraph
GoTo rule-based controller
\end_layout

\begin_layout Standard
At first when GoTo_fuzzy function had been implemented, we had some trouble
 where the ePuck was only rotating on the spot without moving forward, regardles
s which goal parameters that were used.
 After some error checking, we found that from the pseudo code in the RampUp
 and RampDown functions, the angle ranges were expressed in degrees while
 our error theta were using radians.
 We corrected this range from [0, 60] into [0, PI / 3.0].
 When this was done, the ePuck moved more in an expected pattern.
 
\end_layout

\begin_layout Standard
The producing of the predicate Pos_Here in RampUp was tuned by modifying
 the RampStart and RampEnd values.
 The higher RampStart value, the more abrupt the ePuck stops when reaching
 its goal.
 We started at 10 which was ok, increasing it to 20 which made it clearly
 more abrupt, lowering it to 5 which worked very smooth but still not too
 slow.
 Same procedure was done for RampEnd.
 We set it to 50 which was smooth but still not too slow.
 We increased it to 70 to observe the differences.
 The resulting behaviour ended up as a lot more wobbly and slower to stop
 at the goal.
 We also set it to 100 which made this even more clear.
 Our Ramp values ended up as 5 and 50 which we were satisfied with.
 To verify the function of the GoTo rule-based controller in task 1, we
 tested it out with four trajectories as shown in the figure below.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename given_values_goto_fuzzy.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The expected trajectory.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename plot_goto_fuzzy.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The performed trajectory of the ePuck.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As seen on figure a and b, the precision of the performed trajectory is
 very close to the expected.
\end_layout

\begin_layout Paragraph*
Avoiding Obstacles rule-based controller
\end_layout

\begin_layout Standard
When trying the AvoidObstacles function with the ePuck, we tried several
 different combinations of obstacles with the wooden blocks.
 At first we wanted to see how it behaved with only one block in front of
 it, to verify that the function somewhat does what it's supposed to.
 After trying it out a few times, we decided to put around more of the wooden
 blocks.
 It avoided them well, but turned a bit too slow at times which caused it
 to lightly touch the block when turning.
 Changing the danger tresholds to be more sensitive when closeby solved
 this problem by making it turn faster.
 The value of FullDanger was changed from 3000 to 1500 but we realized it
 wasnt enough because it still sometimes touched the obstacles when it turned,
 so we also tried with 1200 which worked out to be well.
\end_layout

\begin_layout Standard
One particular problem that was noticed was when the ePuck got into a corner
 or in a very narrow area with only one opening to its back.
 When it was in the corner, the front sensors and the side sensors were
 almost entirely blocked and received no light, so when using the provided
 rules, it would get stuck.
 This was likely caused by not having enough rules to take care of the situation
 it was in or possibly by having contradictions in the rules.
\end_layout

\begin_layout Standard
Another important thing is that it was reacting different to a darker block
 than lighter blocks and sometimes even shadows caused it to misbehave.
 When it was approaching a darker block, it wouldn't notice it until it
 was too late, and would ram into the block.
 This is obviously because the darker block reflects less light than the
 lighter wooden blocks.
 Same thing sometimes happened when it was approaching a corner which was
 dark because of shadows.
 This can be solved by making changes to the treshold to fit the situation
 but would most likely cause ill behaviour for other situations.
\end_layout

\begin_layout Standard
Avoiding obstacles using light sensors might work if one wants a fairly
 well-working obstacle avoidance system.
 Though it should not be used in dark areas since it is very unprecise then.
 
\end_layout

\begin_layout Standard
Solving the problems with dark corners can possibly be done by some very
 fine tuning and making it reverse more when it has encountered obstacles
 in all directions.
 Essentially, making a robot more precise in avoiding obstacles requires
 more sensors and better computing.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-Explain problems encountered and solutions used (don't mention pure programming
 problems or hardware problems).
 
\end_layout

\begin_layout Plain Layout
-Explain how well the resulting program worked, and how it might be improved.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\start_of_appendix
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hypertarget{AvoidObstacleCode}{Avoiding obstacles code}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#define NoDanger 200
\end_layout

\begin_layout Plain Layout

#define FullDanger 1200
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void AvoidRules() {
\end_layout

\begin_layout Plain Layout

    unsigned int it[8];
\end_layout

\begin_layout Plain Layout

    FPred Obs_Left, Obs_Right, Obs_Ahead, Obs_Back;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // IR VALUES
\end_layout

\begin_layout Plain Layout

    Sensors ir = GetIR();
\end_layout

\begin_layout Plain Layout

    printf("IR values: %4d, %4d, %4d, %4d, %4d, %4d, %4d, %4d
\backslash
n",
\end_layout

\begin_layout Plain Layout

           ir.sensor[0], ir.sensor[1], ir.sensor[2], ir.sensor[3],
\end_layout

\begin_layout Plain Layout

           ir.sensor[4], ir.sensor[5], ir.sensor[6], ir.sensor[7]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Obs_Left = RampUp(max(ir.sensor[5],ir.sensor[6]), NoDanger, 500);
\end_layout

\begin_layout Plain Layout

    Obs_Right = RampUp(max(ir.sensor[1],ir.sensor[2]), NoDanger, 500);
\end_layout

\begin_layout Plain Layout

    Obs_Ahead = RampUp(max(ir.sensor[0],ir.sensor[7]), NoDanger, FullDanger);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    RULESET;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    IF (AND(Obs_Left, NOT(Obs_Right)));                     ROT(RIGHT);
\end_layout

\begin_layout Plain Layout

    IF (AND(Obs_Right, NOT(Obs_Left)));                     ROT(LEFT);
\end_layout

\begin_layout Plain Layout

    IF (OR(Obs_Right, Obs_Left));                           ROT(AHEAD);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    IF (Obs_Ahead);                                         VEL(BACK);
\end_layout

\begin_layout Plain Layout

    IF (AND(OR(Obs_Right, Obs_Left), NOT(Obs_Ahead)));      VEL(SLOW);
\end_layout

\begin_layout Plain Layout

    IF (NOT(OR(OR(Obs_Right, Obs_Left), Obs_Ahead)));       VEL(FAST);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    RULEEND;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void AvoidRules_fuzzy() {
\end_layout

\begin_layout Plain Layout

    double vlin, vrot;
\end_layout

\begin_layout Plain Layout

    while (1) {
\end_layout

\begin_layout Plain Layout

        update_position(CRD);
\end_layout

\begin_layout Plain Layout

        ClearFSet(f_set_vlin); ClearFSet(f_set_vrot);
\end_layout

\begin_layout Plain Layout

        AvoidRules();
\end_layout

\begin_layout Plain Layout

        DeFuzzify(f_set_vrot, 3, &f_vrot);
\end_layout

\begin_layout Plain Layout

        DeFuzzify(f_set_vlin, 4, &f_vlin);
\end_layout

\begin_layout Plain Layout

        vlin = ResponseToVel(f_vlin);
\end_layout

\begin_layout Plain Layout

        vrot = ResponseToRot(f_vrot);
\end_layout

\begin_layout Plain Layout

        SetPolarSpeed(vlin, vrot);
\end_layout

\begin_layout Plain Layout

        Sleep(10);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

// Functions for setting rotation and velocity for avoiding obstacles.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int ResponseToVel(float response){
\end_layout

\begin_layout Plain Layout

    const double limit = 0.33;
\end_layout

\begin_layout Plain Layout

    return -(limit - response) * 160;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

double ResponseToRot(float response){
\end_layout

\begin_layout Plain Layout

    if (response == 0)
\end_layout

\begin_layout Plain Layout

        return 0.0;
\end_layout

\begin_layout Plain Layout

    const double limit = 0.5;
\end_layout

\begin_layout Plain Layout

    double factor = (limit - response);
\end_layout

\begin_layout Plain Layout

    return factor * PI;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hypertarget{AvoidObstacleCode}{Avoiding obstacles code}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#define NoDanger 200
\end_layout

\begin_layout Plain Layout

#define FullDanger 1200
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void AvoidRules() {
\end_layout

\begin_layout Plain Layout

    unsigned int it[8];
\end_layout

\begin_layout Plain Layout

    FPred Obs_Left, Obs_Right, Obs_Ahead, Obs_Back;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // IR VALUES
\end_layout

\begin_layout Plain Layout

    Sensors ir = GetIR();
\end_layout

\begin_layout Plain Layout

    printf("IR values: %4d, %4d, %4d, %4d, %4d, %4d, %4d, %4d
\backslash
n",
\end_layout

\begin_layout Plain Layout

           ir.sensor[0], ir.sensor[1], ir.sensor[2], ir.sensor[3],
\end_layout

\begin_layout Plain Layout

           ir.sensor[4], ir.sensor[5], ir.sensor[6], ir.sensor[7]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Obs_Left = RampUp(max(ir.sensor[5],ir.sensor[6]), NoDanger, 500);
\end_layout

\begin_layout Plain Layout

    Obs_Right = RampUp(max(ir.sensor[1],ir.sensor[2]), NoDanger, 500);
\end_layout

\begin_layout Plain Layout

    Obs_Ahead = RampUp(max(ir.sensor[0],ir.sensor[7]), NoDanger, FullDanger);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    RULESET;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    IF (AND(Obs_Left, NOT(Obs_Right)));                     ROT(RIGHT);
\end_layout

\begin_layout Plain Layout

    IF (AND(Obs_Right, NOT(Obs_Left)));                     ROT(LEFT);
\end_layout

\begin_layout Plain Layout

    IF (OR(Obs_Right, Obs_Left));                           ROT(AHEAD);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    IF (Obs_Ahead);                                         VEL(BACK);
\end_layout

\begin_layout Plain Layout

    IF (AND(OR(Obs_Right, Obs_Left), NOT(Obs_Ahead)));      VEL(SLOW);
\end_layout

\begin_layout Plain Layout

    IF (NOT(OR(OR(Obs_Right, Obs_Left), Obs_Ahead)));       VEL(FAST);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    RULEEND;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void AvoidRules_fuzzy() {
\end_layout

\begin_layout Plain Layout

    double vlin, vrot;
\end_layout

\begin_layout Plain Layout

    while (1) {
\end_layout

\begin_layout Plain Layout

        update_position(CRD);
\end_layout

\begin_layout Plain Layout

        ClearFSet(f_set_vlin); ClearFSet(f_set_vrot);
\end_layout

\begin_layout Plain Layout

        AvoidRules();
\end_layout

\begin_layout Plain Layout

        DeFuzzify(f_set_vrot, 3, &f_vrot);
\end_layout

\begin_layout Plain Layout

        DeFuzzify(f_set_vlin, 4, &f_vlin);
\end_layout

\begin_layout Plain Layout

        vlin = ResponseToVel(f_vlin);
\end_layout

\begin_layout Plain Layout

        vrot = ResponseToRot(f_vrot);
\end_layout

\begin_layout Plain Layout

        SetPolarSpeed(vlin, vrot);
\end_layout

\begin_layout Plain Layout

        Sleep(10);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

// Functions for setting rotation and velocity for avoiding obstacles.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int ResponseToVel(float response){
\end_layout

\begin_layout Plain Layout

    const double limit = 0.33;
\end_layout

\begin_layout Plain Layout

    return -(limit - response) * 160;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

double ResponseToRot(float response){
\end_layout

\begin_layout Plain Layout

    if (response == 0)
\end_layout

\begin_layout Plain Layout

        return 0.0;
\end_layout

\begin_layout Plain Layout

    const double limit = 0.5;
\end_layout

\begin_layout Plain Layout

    double factor = (limit - response);
\end_layout

\begin_layout Plain Layout

    return factor * PI;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
