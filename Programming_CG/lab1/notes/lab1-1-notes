
############################# Lab 1-1 #############################

glGetString(GL_RENDERER);
glGetString(GL_VERSION);

--------OUTPUT--------
Renderer:
GeForce GT 740M/PCIe/SSE2
OpenGL version supported:
4.5.0 NVIDIA 361.42
--------ENDOUT--------

Video card specifications:

For the supported OpenGL version, list which features are missing, relative
to the latest version of the specification.

4.5 is the latest version. No features are missing.

############################# Lab 1-2 #############################

// Generates and binds array object
  glCreateVertexArrays(1, &vao);  
  glVertexArrayAttribFormat(vao, 0, 3, GL_FLOAT, 0, 0);

  /* Allocate and assign a Vertex Buffer Object */
  glGenBuffers(1, &vbo);
  /* Bind our first VBO as being the active buffer and storing vertex attributes (coordinates) */
  glBindBuffer(GL_ARRAY_BUFFER, vbo);

  /* Copy the vertex data from triangle_vertices to our buffer */
  /* [3][3] = 3*3 = 9 -> 9 * sizeof(GLfloat) is the size of the vertex array */
  glBufferData(GL_ARRAY_BUFFER, 9 * sizeof(GLfloat), triangle_vertices, GL_STATIC_DRAW);

  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
  glEnableVertexAttribArray(0);

  // Draws the triangle
  glDrawArrays(GL_TRIANGLES, 0, 3);

  -Which dimensions in the screen space do your x, y and z coordinates
map to?
        x      y     z
      -1.0f, -1.0f, 0.0f,
       1.0f, -1.0f, 0.0f,
       0.0f,  1.0f, 0.0f,

  -What are the limits for z and what happens if you exceed them?

    When the limits are exceeded it will disappear from the screen.
    The z-coordinates of the vertices pulls the triangle towards the camera or the away.
    When the limits are beyond what can be displayed, it will disappear from the visible space.

############################# Lab 1-3 #############################

Output of color from the fragment shader depends on what vector the vertex shader outputs. 

#version 400
in vec3 vp;
out vec4 op;

void main () {
  gl_Position = vec4 (vp, 1.0);
  op = vec4(vp + 0.5, 1.0);   
 };
  

Rasterization causes different values for the fragment shader from the vertex shader. 
Interpolation qualifiers controls this behaviour.

############################# Lab 1-4 #############################

############################# Lab 1-5 #############################

( Sending 60 floats ): 240 bytes
( Sending 60 shorts and 12 floats): 168 bytes <---- Better!

############################# Lab 1-6 #############################

- Why is the order of multiplication important?
- What would happen if you multiplied the matrices in the reverse order?

############################# Lab 1-7 #############################















