#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
% DO NOT ALTER THIS PREAMBLE!!!
%
%This preamble is designed to ensure that the document prints
% out as advertised. If you mess with this preamble,
% parts of the document may not print out as expected.  If you
% have problems LaTeXing this file, please contact 
% the documentation team
% email: lyx-docs@lists.lyx.org

\usepackage{ifpdf} % part of the hyperref bundle
\ifpdf % if pdflatex is used
     % set fonts for nicer pdf view
     \IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}
\fi % end if pdflatex is used

\usepackage{multicol}
\usepackage{tikz}
\usetikzlibrary{mindmap}
\usepackage{attachfile2}
\usepackage{embedfile}
\usepackage{hypgotoe}
\usepackage{verbatim}
%\embedfile{Intro.pdf}
\usepackage{tocloft}
\renewcommand{\cftdot}{}
\usepackage{minitoc}
\definecolor{green}{RGB}{0, 180, 0}
\definecolor{cyan}{RGB}{0, 180, 180}
\definecolor{yellow}{RGB}{102,51,0}
\definecolor{bluekeywords}{rgb}{0.13,0.13,1}
\definecolor{greencomments}{rgb}{0,0.5,0}
\definecolor{redstrings}{rgb}{0.9,0,0}

\usepackage{listings}
\usepackage{courier}
\lstset{language=[Visual]C++,
showspaces=false,
showtabs=false,
breaklines=true,
showstringspaces=false,
breakatwhitespace=true,
escapeinside={(*@}{@*)},
commentstyle=\color{greencomments},
keywordstyle=\color{bluekeywords},
stringstyle=\color{redstrings},
basicstyle=\ttfamily,
tabsize=3
}

\lstloadlanguages{% Check Dokumentation for further languages ...
%[Visual]Basic
%Pascal
%C
C++,
%XML
%HTML
Java
}
%\DeclareCaptionFont{blue}{\color{blue}}

%\captionsetup[lstlisting]{singlelinecheck=false, labelfont={blue}, textfont={blue}}
\usepackage{caption}
\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{\colorbox[cmyk]{0.43, 0.35, 0.35,0.01}{\parbox{\textwidth}{\hspace{15pt}#1#2#3}}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white, singlelinecheck=false, margin=0pt, font={bf,footnotesize}}

% Style definition file generated by highlight 3.13, http://www.andre-simon.de/

\begin{comment}
% Highlighting theme: Acid
\usepackage{marvosym}
\newcommand{\hlstd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlnum}[1]{\textcolor[rgb]{0.5,0,0.5}{\bf{#1}}}
\newcommand{\hlesc}[1]{\textcolor[rgb]{1,0,1}{\bf{#1}}}
\newcommand{\hlstr}[1]{\textcolor[rgb]{0.65,0.52,0}{#1}}
\newcommand{\hlpps}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlslc}[1]{\textcolor[rgb]{0.95,0.47,0}{#1}}
\newcommand{\hlcom}[1]{\textcolor[rgb]{1,0.5,0}{#1}}
\newcommand{\hlppc}[1]{\textcolor[rgb]{0,0.5,0.75}{\bf{#1}}}
\newcommand{\hlopt}[1]{\textcolor[rgb]{1,0,0.5}{\bf{#1}}}
\newcommand{\hlipl}[1]{\textcolor[rgb]{0.62,0.36,1}{#1}}
\newcommand{\hllin}[1]{\textcolor[rgb]{0.19,0.19,0.19}{#1}}
\newcommand{\hlkwa}[1]{\textcolor[rgb]{0.73,0.47,0.47}{\bf{#1}}}
\newcommand{\hlkwb}[1]{\textcolor[rgb]{0.5,0.5,0.75}{\bf{#1}}}
\newcommand{\hlkwc}[1]{\textcolor[rgb]{0,0.5,0.75}{#1}}
\newcommand{\hlkwd}[1]{\textcolor[rgb]{0,0.27,0.4}{#1}}
\definecolor{bgcolor}{rgb}{0.93,0.93,0.93}
\end{comment}

% Highlighting theme: Visual Studio IDE
\newcommand{\hlstd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlnum}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlesc}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hlstr}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hlpps}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlslc}[1]{\textcolor[rgb]{0,0.5,0}{#1}}
\newcommand{\hlcom}[1]{\textcolor[rgb]{0,0.5,0}{#1}}
\newcommand{\hlppc}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlopt}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlipl}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hllin}[1]{\textcolor[rgb]{0.17,0.57,0.69}{#1}}
\newcommand{\hlkwa}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlkwb}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlkwc}[1]{\textcolor[rgb]{0.17,0.57,0.69}{#1}}
\newcommand{\hlkwd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\definecolor{bgcolor}{rgb}{1,1,1}

\cftsetindents{part}{-0.325in}{0.25in}

\renewcommand\thesection{\arabic{section}}
\renewcommand\thesubsection{\thesection.\arabic{subsection}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Artificial Intelligence
\begin_inset Newline newline
\end_inset


\shape smallcaps
\size larger
Task 1 - Search for Routing
\end_layout

\begin_layout Author
By
\emph on
 Özgun Mirtchev
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\emph default
Professor 
\emph on
Franziska Klügl
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\emph default
Örebro University
\end_layout

\begin_layout Standard
In this lab two different search algorithms was going to be tested and compared.
 The underlying data structure is a navigation graph with connections between
 nodes, over the different areas of the city of Örebro.
 The task work includes constructing the search algorithms and to compare
 them to each other and how many nodes that are tested for each algorithm.
 Through the use of well designed objects and some provided pseudo code,
 it was trivial to write the code by using the specific class members of
 each class and following the written code.
\end_layout

\begin_layout Subsubsection
Scenario Preparation
\end_layout

\begin_layout Standard
The first task was to implement a system where data could be read from .csv-files
 into data structures.
 Since each node has a position, name and connected neighbours, it was only
 natural to make a Node class and a Connection class, which stores the connectio
ns from a specific Node to another Node, which is also added to the Node
 class.
\end_layout

\begin_layout Subsubsection
Iterative Deepening Search
\end_layout

\begin_layout Standard
To implement this search algorithm, the first step was to create a depth-limited
 search.
 This algorithm is similar to a depth-first search however it includes a
 depth parameter, which prevents the algorithm from searching further than
 a specified node depth.
 It may or may not provide the most optimal route but it will compute fast.
 To run this algorithm, a depth restriction was provided to be iterated
 through with a while-loop with the depth-limited search, trying to find
 a route with the least depth.
 The depth-limited search was constructed by using the example provided
 in the lecture but with a list of visited nodes to make it a bit more optimized.
 Below is the iterative deepening loop iterating through the search algorithm
 to find the path with the least depth.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def iterative_deepening(start, end):
\end_layout

\begin_layout Plain Layout

    maxDepth = 50
\end_layout

\begin_layout Plain Layout

    depth = 0
\end_layout

\begin_layout Plain Layout

    while maxDepth > depth:
\end_layout

\begin_layout Plain Layout

        result = depth_limited_search(start, end, depth) 
\end_layout

\begin_layout Plain Layout

        if result:
\end_layout

\begin_layout Plain Layout

            return result
\end_layout

\begin_layout Plain Layout

        depth = depth + 1
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
A* Search
\end_layout

\begin_layout Standard
One of the most used pathfinding algorithms in the industry is A*.
 It is an informed search algorithms which always finds the most optimal
 route by using a heuristic search system.
 The heurisitc function for this algorithm was implemented with Euclidean-distan
ce since it's the best choice for node-based networks.
 Manhattan-distance is best suited for finding the distance where only vertical
 and horisontal moves are allowed.
 While the A* algorithm is known to be a slow algorithm, dependant on which
 heuristic and how the big the map is, however in small maps, the time it
 takes to compute is minuscule and can be disregarded.
 To implement this algorithm the hints from the lectures were used.
 The source code has comments to explain what the algorithm does.
\end_layout

\begin_layout Subsubsection
Reconstruct path
\end_layout

\begin_layout Standard
The reconstruct path function was used for both algorithms.
 It iteratively goes through a dictionary with the key as target node and
 the node it came from as the value.
 The way the function works is by starting from the goal node and working
 its way to the start node.
 By using a while-loop, it iteratively adds the node it came from to a separate
 list, which gets reversed before it's returned since the nodes are added
 backwards.
 The function is by itself pretty self-explanatory with the named variables.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def reconstruct_path(cameFrom, start, end):
\end_layout

\begin_layout Plain Layout

    current = end
\end_layout

\begin_layout Plain Layout

    path = [current]
\end_layout

\begin_layout Plain Layout

    while current != start:
\end_layout

\begin_layout Plain Layout

        current = cameFrom[current]
\end_layout

\begin_layout Plain Layout

        path.append(current)
\end_layout

\begin_layout Plain Layout

    path.reverse()
\end_layout

\begin_layout Plain Layout

    return path
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Tests
\end_layout

\begin_layout Standard
On the next page you will find some tests that were run to measure the performan
ce of each algorithm.
 Between the two algorithms there are clearly differences in which path
 they generate and how many nodes are visited to find the optimal path.
 The results show that the Iterative-Deepening search visits more nodes
 to find a path but generally has the same amount of path nodes, but taking
 longer paths.
 See for example, the first test between Vivalla and Norra Bro, where it
 goes through Ladugardsangen from Central, instead of taking the best path
 which is through Sorby from Central.
 Obviously this is because of the heuristic for the A*, which always calculates
 the least costly path.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

----------Iterative-Deepening-Search----------
\end_layout

\begin_layout Plain Layout

-----------------Test Results-----------------
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

---------Route: Vivalla to Norra Bro---------
\end_layout

\begin_layout Plain Layout

Created path: {Vivalla}---->{Baronbackarna}---->{Hjorsta}---->{Central}---->
\end_layout

\begin_layout Plain Layout

	{Ladugardsangen}---->{Sorbyangen}---->{Brickebacken}---->{Norra Bro}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Reached depth: 7
\end_layout

\begin_layout Plain Layout

Total path nodes: 8
\end_layout

\begin_layout Plain Layout

Total tested nodes: 78
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

---------Route: Markbacken to Tybble---------
\end_layout

\begin_layout Plain Layout

Created path: {Markbacken}---->{Central}---->{Sorby}---->{Tybble}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Reached depth: 3
\end_layout

\begin_layout Plain Layout

Total path nodes: 4
\end_layout

\begin_layout Plain Layout

Total tested nodes: 65
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

---------Route: Solhaga to Hagaby---------
\end_layout

\begin_layout Plain Layout

Created path: {Solhaga}---->{Alvtomta}---->{Rosta}---->{Central}---->{Hagaby}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Reached depth: 4
\end_layout

\begin_layout Plain Layout

Total path nodes: 5
\end_layout

\begin_layout Plain Layout

Total tested nodes: 42
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

---------Route: Grenadjarstaden to Solhaga---------
\end_layout

\begin_layout Plain Layout

Created path: {Grenadjarstaden}---->{Norr}---->{Central}---->
\end_layout

\begin_layout Plain Layout

	{Rosta}---->{Vasthaga}---->{Solhaga}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Reached depth: 5
\end_layout

\begin_layout Plain Layout

Total path nodes: 6
\end_layout

\begin_layout Plain Layout

Total tested nodes: 78
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

----------A*-Search----------
\end_layout

\begin_layout Plain Layout

--------Test Results---------
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

---------Route: Vivalla to Norra Bro---------
\end_layout

\begin_layout Plain Layout

Created path: {Vivalla}--142-->{Baronbackarna}--257-->{Holmen}--387-->
\end_layout

\begin_layout Plain Layout

	{Central}--564-->{Sorby}--704-->{Tybble}--846-->{Brickebacken}--1054-->{Norra
 Bro}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Total path nodes: 8
\end_layout

\begin_layout Plain Layout

Total tested nodes: 74
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Press enter to continue...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

---------Route: Markbacken to Tybble---------
\end_layout

\begin_layout Plain Layout

Created path: {Markbacken}--297-->{Central}--474-->{Sorby}--614-->{Tybble}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Total path nodes: 4
\end_layout

\begin_layout Plain Layout

Total tested nodes: 54
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

---------Route: Solhaga to Hagaby---------
\end_layout

\begin_layout Plain Layout

Created path: {Solhaga}--110-->{Vasthaga}--295-->{Rosta}--567-->
\end_layout

\begin_layout Plain Layout

	{Central}--754-->{Hagaby}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Total path nodes: 5
\end_layout

\begin_layout Plain Layout

Total tested nodes: 37
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

---------Route: Grenadjarstaden to Solhaga---------
\end_layout

\begin_layout Plain Layout

Created path: {Grenadjarstaden}--85-->{Norr}--218-->{Central}--490-->
\end_layout

\begin_layout Plain Layout

	{Rosta}--675-->{Vasthaga}--785-->{Solhaga}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Total path nodes: 6
\end_layout

\begin_layout Plain Layout

Total tested nodes: 73
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
