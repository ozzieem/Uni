#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
% DO NOT ALTER THIS PREAMBLE!!!
%
%This preamble is designed to ensure that the document prints
% out as advertised. If you mess with this preamble,
% parts of the document may not print out as expected.  If you
% have problems LaTeXing this file, please contact 
% the documentation team
% email: lyx-docs@lists.lyx.org

\usepackage{ifpdf} % part of the hyperref bundle
\ifpdf % if pdflatex is used
     % set fonts for nicer pdf view
     \IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}
\fi % end if pdflatex is used

\usepackage{tikz}
\usetikzlibrary{mindmap}
\usepackage{attachfile2}
\usepackage{embedfile}
\usepackage{hypgotoe}
\usepackage{verbatim}
%\embedfile{Intro.pdf}
\usepackage{tocloft}
\renewcommand{\cftdot}{}
\usepackage{minitoc}
\definecolor{green}{RGB}{0, 180, 0}
\definecolor{cyan}{RGB}{0, 180, 180}
\definecolor{yellow}{RGB}{102,51,0}
\definecolor{bluekeywords}{rgb}{0.13,0.13,1}
\definecolor{greencomments}{rgb}{0,0.5,0}
\definecolor{redstrings}{rgb}{0.9,0,0}

\usepackage{listings}
\usepackage{courier}
\lstset{language=[Visual]C++,
showspaces=false,
showtabs=false,
breaklines=true,
showstringspaces=false,
breakatwhitespace=true,
escapeinside={(*@}{@*)},
commentstyle=\color{greencomments},
keywordstyle=\color{bluekeywords},
stringstyle=\color{redstrings},
basicstyle=\ttfamily,
tabsize=3
}

\lstloadlanguages{% Check Dokumentation for further languages ...
%[Visual]Basic
%Pascal
%C
C++,
%XML
%HTML
Java
}
%\DeclareCaptionFont{blue}{\color{blue}}

%\captionsetup[lstlisting]{singlelinecheck=false, labelfont={blue}, textfont={blue}}
\usepackage{caption}
\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{\colorbox[cmyk]{0.43, 0.35, 0.35,0.01}{\parbox{\textwidth}{\hspace{15pt}#1#2#3}}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white, singlelinecheck=false, margin=0pt, font={bf,footnotesize}}

% Style definition file generated by highlight 3.13, http://www.andre-simon.de/

\begin{comment}
% Highlighting theme: Acid
\usepackage{marvosym}
\newcommand{\hlstd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlnum}[1]{\textcolor[rgb]{0.5,0,0.5}{\bf{#1}}}
\newcommand{\hlesc}[1]{\textcolor[rgb]{1,0,1}{\bf{#1}}}
\newcommand{\hlstr}[1]{\textcolor[rgb]{0.65,0.52,0}{#1}}
\newcommand{\hlpps}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlslc}[1]{\textcolor[rgb]{0.95,0.47,0}{#1}}
\newcommand{\hlcom}[1]{\textcolor[rgb]{1,0.5,0}{#1}}
\newcommand{\hlppc}[1]{\textcolor[rgb]{0,0.5,0.75}{\bf{#1}}}
\newcommand{\hlopt}[1]{\textcolor[rgb]{1,0,0.5}{\bf{#1}}}
\newcommand{\hlipl}[1]{\textcolor[rgb]{0.62,0.36,1}{#1}}
\newcommand{\hllin}[1]{\textcolor[rgb]{0.19,0.19,0.19}{#1}}
\newcommand{\hlkwa}[1]{\textcolor[rgb]{0.73,0.47,0.47}{\bf{#1}}}
\newcommand{\hlkwb}[1]{\textcolor[rgb]{0.5,0.5,0.75}{\bf{#1}}}
\newcommand{\hlkwc}[1]{\textcolor[rgb]{0,0.5,0.75}{#1}}
\newcommand{\hlkwd}[1]{\textcolor[rgb]{0,0.27,0.4}{#1}}
\definecolor{bgcolor}{rgb}{0.93,0.93,0.93}
\end{comment}

% Highlighting theme: Visual Studio IDE
\newcommand{\hlstd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlnum}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlesc}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hlstr}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hlpps}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlslc}[1]{\textcolor[rgb]{0,0.5,0}{#1}}
\newcommand{\hlcom}[1]{\textcolor[rgb]{0,0.5,0}{#1}}
\newcommand{\hlppc}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlopt}[1]{\textcolor[rgb]{0,0,0}{#1}}
\newcommand{\hlipl}[1]{\textcolor[rgb]{0.64,0.08,0.08}{#1}}
\newcommand{\hllin}[1]{\textcolor[rgb]{0.17,0.57,0.69}{#1}}
\newcommand{\hlkwa}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlkwb}[1]{\textcolor[rgb]{0,0,1}{#1}}
\newcommand{\hlkwc}[1]{\textcolor[rgb]{0.17,0.57,0.69}{#1}}
\newcommand{\hlkwd}[1]{\textcolor[rgb]{0,0,0}{#1}}
\definecolor{bgcolor}{rgb}{1,1,1}

\cftsetindents{part}{-0.325in}{0.25in}


\usepackage{listings}
\usepackage{color}
\usepackage{textcomp}
\definecolor{listinggray}{gray}{0.9}
\definecolor{lbcolor}{rgb}{0.9,0.9,0.9}
\lstset{
backgroundcolor=\color{lbcolor},
tabsize=4,
rulecolor=,
language=C,
        basicstyle=\scriptsize,
        upquote=true,
        aboveskip={1.5\baselineskip},
        columns=fixed,
        keywordstyle=\color{blue},
        stringstyle=\color{red},
        commentstyle=\color{green},
        morecomment=[l][\color{magenta}]{\#}
        showstringspaces=false,
        extendedchars=true,
        breaklines=true,
        prebreak = \raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}},
        frame=single,
        showtabs=false,
        showspaces=false,
        showstringspaces=false,
        identifierstyle=\ttfamily,
        keywordstyle=\color[rgb]{0,0,1},
        commentstyle=\color[rgb]{0.133,0.545,0.133},
        stringstyle=\color[rgb]{0.627,0.126,0.941},
}

\usepackage{hyperref}
\hypersetup{
    colorlinks,
    citecolor=black,
    filecolor=black,
    linkcolor=red,
    urlcolor=green
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
AVR Assembler
\end_layout

\begin_layout Author
Özgun Mirtchev
\end_layout

\begin_layout Quotation
\align center
Laborationsrapport för kursen Datorteknik 2016 VT
\end_layout

\begin_layout Quotation
\align center
Universitetsadjunkt Kjell Mårdensjö
\end_layout

\begin_layout Quotation
\align center
Örebro Universitet 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Laboration 1: Lysdioder & Strömställare
\end_layout

\begin_layout Standard
I kommande koduppvisning kommer läsaren att märka främst två typer av funktioner
, init_func och loop_func, som är generella namn på två funktioner som används
 i assembly-koden.
 Notera att dessa namn får och kan ändras till ens eget tycke men i denna
 laboration var funktionsnamnen oförändrade.
 C-koden ser ut som på nedanstående sätt och står för grunden av assembly-progra
mmeringen.
 Istället för att skriva funktionerna i vanlig C ska dessa skrivas i assembly-ko
d som står med i slutet av respektive uppgift.
\begin_inset Newline newline
\end_inset


\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{ 	
\end_layout

\begin_layout Plain Layout

	init_func();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    while (1
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		loop_func();
\end_layout

\begin_layout Plain Layout

		wait_milliseconds(300);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset

I varje laboration kommer dessutom att fördefinierade värden för portarna
 och ingångarna att finnas:
\begin_inset Newline newline
\end_inset


\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[Motorola68k]Assembler},basicstyle={\small}"
inline false
status open

\begin_layout Plain Layout

;;;--- I/O-adresses for Port D --- 
\end_layout

\begin_layout Plain Layout

#define PIND	0x10 
\end_layout

\begin_layout Plain Layout

#define DDRD	0x11 
\end_layout

\begin_layout Plain Layout

#define PORTD	0x12
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

;;;--- I/O-adresses for Port C --- 
\end_layout

\begin_layout Plain Layout

#define PINC	0x13 
\end_layout

\begin_layout Plain Layout

#define DDRC	0x14 
\end_layout

\begin_layout Plain Layout

#define PORTC	0x15
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

;;;--- I/O-adresses for Port B --- 
\end_layout

\begin_layout Plain Layout

#define PINB	0x16 
\end_layout

\begin_layout Plain Layout

#define DDRB	0x17 
\end_layout

\begin_layout Plain Layout

#define PORTB	0x18
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

;;;--- I/O-adresses for Port A --- 
\end_layout

\begin_layout Plain Layout

#define PINA	0x19 
\end_layout

\begin_layout Plain Layout

#define DDRA	0x1A 
\end_layout

\begin_layout Plain Layout

#define PORTA	0x1B
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Programmet Hello World
\end_layout

\begin_layout Standard
Denna uppgift var främst för att prova lite lätt assembly och därför finns
 ingen redovisning.
\end_layout

\begin_layout Subsection
Assemblerprogram för att tända och släcka en lysdiod med en strömbrytare
\end_layout

\begin_layout Standard
Denna uppgift gick ut på att kunna tända en diod genom att trycka in respektive
 diod-knapp.
\begin_inset Newline newline
\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler},numbers=left"
inline false
status open

\begin_layout Plain Layout

		.data
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

lamps:  .byte 0	;; unsigned char lamps = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		.text
\end_layout

\begin_layout Plain Layout

		.global init_func
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

init_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		;; DDRA = 0x00
\end_layout

\begin_layout Plain Layout

		LDI		R20, 0x00
\end_layout

\begin_layout Plain Layout

		OUT		DDRA, R20
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		;; DDRB = 0xFF;
\end_layout

\begin_layout Plain Layout

		LDI		R20, 0xFF
\end_layout

\begin_layout Plain Layout

		OUT		DDRB, R20
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		.text
\end_layout

\begin_layout Plain Layout

		.global loop_func
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

loop_func:
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		;; PORTB = PINA
\end_layout

\begin_layout Plain Layout

		IN	 	R20, PINA
\end_layout

\begin_layout Plain Layout

		OUT		PORTB, R20
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		RET 		
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
1.2 - Tända/släcka en lysdiod med strömbrytare
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Assemblerprogram för att tända och släcka en lysdiod med en switch
\end_layout

\begin_layout Standard
Denna uppgift är har samma förutgrunder som föregående däremot är skillnaden
 att en switch används för att tända en lysdiod på ATMega32.
 När tredje switchen aktiveras lyser den första biten i registret som styr
 lysdioderna.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler},numbers=left"
inline false
status open

\begin_layout Plain Layout

lamps:  .byte 0		;;   unsigned char lamps = 0; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		.text
\end_layout

\begin_layout Plain Layout

		.global init_func
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

init_func:
\end_layout

\begin_layout Plain Layout

		;; DDRA = 0x00
\end_layout

\begin_layout Plain Layout

		LDI		R20, 0x00
\end_layout

\begin_layout Plain Layout

		OUT		DDRA, R20
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		;; DDRB = 0xFF;
\end_layout

\begin_layout Plain Layout

		LDI		R20, 0xFF
\end_layout

\begin_layout Plain Layout

		OUT		DDRB, R20
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		;; PORTB = 0xFF;
\end_layout

\begin_layout Plain Layout

		OUT		PORTB, R20
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		.text
\end_layout

\begin_layout Plain Layout

		.global loop_func
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

loop_func:
\end_layout

\begin_layout Plain Layout

		;; R20 = PINA & 0x08
\end_layout

\begin_layout Plain Layout

		IN R20, PINA
\end_layout

\begin_layout Plain Layout

		COM R20
\end_layout

\begin_layout Plain Layout

		ANDI R20, 0b00001000
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		;; R20 = R20 >> 3
\end_layout

\begin_layout Plain Layout

		LSR R20
\end_layout

\begin_layout Plain Layout

		LSR R20
\end_layout

\begin_layout Plain Layout

		LSR R20
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		;; R21 = PORTB & 0xFE
\end_layout

\begin_layout Plain Layout

		IN R21, PORTB
\end_layout

\begin_layout Plain Layout

		COM R21
\end_layout

\begin_layout Plain Layout

		ANDI R21, 0xFE
\end_layout

\begin_layout Plain Layout

		OR R20, R21		; R20 = R20 | R21
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		COM R20
\end_layout

\begin_layout Plain Layout

		OUT PORTB, R20	; PORTB = R20 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		RET
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
1.3 - Tända/släcka en lysdiod med switch
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ringräknare
\end_layout

\begin_layout Standard
Denna uppgift gick ut på att implementera en ringräknare.
 Processen för att skapa programmet följdes genom en figur från kurskompendiet
 som visar stegen för en lösning.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pictures/ringcounter.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ringräknare lösning genom register-användning
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Som det syns i ovanstående figur finns det olika steg man kan följa.
 Notera att det finns alternativa lösningar till denna uppgift men denna
 valdes för att lättare kunna designa koden för ringräknaren.
 I denna lösning används processorns register medan de andra respresenterar
 lösningar som involverar en mönstertabell eller en if-else-sats.
 För enkelhetens skull gjordes denna uppgift med en lösning som använder
 processorns register genom T-bit utilisering.
 
\end_layout

\begin_layout Standard
Stegen som följdes demonstreras i nedanstående steg med tillhörande assembly-kod
 i algoritm-figuren.
\end_layout

\begin_layout Enumerate
I första steget initierades T-biten till 0 genom att använda CLT-instruktionen.
\end_layout

\begin_layout Enumerate
Andra steget inkluderade att kopiera T-biten till bit 7 i processorns R21-regist
er som är användes som ett hjälpregister genom att använda instruktionen
 BLD.
\end_layout

\begin_layout Enumerate
Samma sak utfördes på registret R20, men i detta fall kopierades bit 6 till
 T-biten.
 R20 är ringräknaren, alltså registret som aktiverar lysdioderna.
\end_layout

\begin_layout Enumerate
Eftersom R21 fick bit 7 så roterades den så att den hamnar i C-biten som
 i nästa steg roterades in i ringräknaren-registret R20, båda använde instruktio
nen ROL.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler},numbers=left"
inline false
status open

\begin_layout Plain Layout

		.data
\end_layout

\begin_layout Plain Layout

     
\end_layout

\begin_layout Plain Layout

		.text         
\end_layout

\begin_layout Plain Layout

		.global init_func
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

init_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		LDI R20, 0xFF
\end_layout

\begin_layout Plain Layout

		OUT DDRB, R20
\end_layout

\begin_layout Plain Layout

		CLT
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		.text
\end_layout

\begin_layout Plain Layout

		.global loop_func
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

loop_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		BLD R21, 7
\end_layout

\begin_layout Plain Layout

		BST R20, 6
\end_layout

\begin_layout Plain Layout

		ROL R21
\end_layout

\begin_layout Plain Layout

		ROL R20
\end_layout

\begin_layout Plain Layout

		OUT PORTB, R20
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		RET
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
1.4 - Ringräknare genom registeranvändning
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Johnsonräknare
\end_layout

\begin_layout Subsubsection
Kommentar
\end_layout

\begin_layout Standard
Koden som beskrivs nedan är i princip identisk mot ringräknar koden.
 Den enda skillnaden är att ett register inverteras i johnsonräknaren så
 att det fortsätter lysa även efter dioden har flyttat sig.
 I ringräknaren behövdes inte det eftersom det bara var en diod som skulle
 förflytta sig hela tiden.
\end_layout

\begin_layout Subsubsection
Kod
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler},numbers=left"
inline false
status open

\begin_layout Plain Layout

		.data
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		.text
\end_layout

\begin_layout Plain Layout

		.global init_func
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

init_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		LDI R20, 0xFF 		
\end_layout

\begin_layout Plain Layout

		OUT DDRB, R20 		
\end_layout

\begin_layout Plain Layout

		CLT
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		.text
\end_layout

\begin_layout Plain Layout

		.global loop_func
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

loop_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		BLD		R21, 7 		
\end_layout

\begin_layout Plain Layout

		BST		R20, 6		 		
\end_layout

\begin_layout Plain Layout

		COM		R21	;; Detta steg gör ringräknaren till en johnsonräknare		
\end_layout

\begin_layout Plain Layout

		ROL		R21	 		
\end_layout

\begin_layout Plain Layout

		ROL		R20
\end_layout

\begin_layout Plain Layout

		OUT PORTB, R20
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		RET
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
1.5 - Johnsonräknare genom registeranvändning
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler},numbers=left"
inline false
status open

\begin_layout Plain Layout

#define	vjohn R20 
\end_layout

\begin_layout Plain Layout

#define one R21 
\end_layout

\begin_layout Plain Layout

#define vjohn_and R22
\end_layout

\begin_layout Plain Layout

vjohn_temp: .byte 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        .text         
\end_layout

\begin_layout Plain Layout

		.global init_func           
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

init_func:
\end_layout

\begin_layout Plain Layout

		LDI	vjohn, 0xFF 		
\end_layout

\begin_layout Plain Layout

		OUT	DDRB, vjohn
\end_layout

\begin_layout Plain Layout

		LDI	vjohn, vjohn_temp	;; R20 = vjohn <=> R20 = 0 		
\end_layout

\begin_layout Plain Layout

		LDI	one, 1	;; R21 = 1
\end_layout

\begin_layout Plain Layout

		RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        .text
\end_layout

\begin_layout Plain Layout

		.global loop_func
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

loop_func:
\end_layout

\begin_layout Plain Layout

		LDS	vjohn,vjohn_temp	;;R20=vjohn
\end_layout

\begin_layout Plain Layout

		MOV	vjohn_and, vjohn	;; R22 = R20
\end_layout

\begin_layout Plain Layout

		ANDI	vjohn_and, 0x80	;; R22 & 0x80
\end_layout

\begin_layout Plain Layout

		BREQ	if_equal
\end_layout

\begin_layout Plain Layout

		RJMP	else_f
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if_equal: 
\end_layout

\begin_layout Plain Layout

		LSL	vjohn	;; R20 << 1
\end_layout

\begin_layout Plain Layout

		ADD	vjohn, one	;; R20 += R21
\end_layout

\begin_layout Plain Layout

		RJMP	end_loop
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

else_f:
\end_layout

\begin_layout Plain Layout

		LSL	vjohn	;; R20 << 1
\end_layout

\begin_layout Plain Layout

		RJMP	end_loop
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

end_loop:
\end_layout

\begin_layout Plain Layout

		STS		vjohn_temp, vjohn
\end_layout

\begin_layout Plain Layout

		COM		vjohn	;; Inverterar för lysdioderna
\end_layout

\begin_layout Plain Layout

		OUT		PORTB, vjohn
\end_layout

\begin_layout Plain Layout

		RET
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
1.5 - Johnsonräknare genom if-else-användning
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Lysdiodsmönster
\end_layout

\begin_layout Standard
I denna uppgift skulle ett mönster skapas.
 Mönstret i fråga ser ut som en johnsonräknare som i cykler räknar inåt
 och sedan utåt.
 En representation kan fås genom nedanstående figur 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Lysdiodsmönster"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pictures/lysdiodmönster.PNG
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Lysdiodsmönster
\begin_inset CommandInset label
LatexCommand label
name "fig:Lysdiodsmönster"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

För uppgiften användes en lista för att hålla reda på vilka lysdioder som
 ska lysa.
 Loop-funktionen gick igenom en for-loop liknande sats som aktiverade respektive
 position i listan.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler},numbers=left"
inline false
status open

\begin_layout Plain Layout

		.data 		
\end_layout

\begin_layout Plain Layout

		.global LEDS
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

LEDS: .byte 0x00, 0x81, 0xC3, 0xE7, 0xFF, 0xE7, 0xC3, 0x81
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        .text         
\end_layout

\begin_layout Plain Layout

		.global init_func           
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

init_func: 		
\end_layout

\begin_layout Plain Layout

		;; i = 0 		
\end_layout

\begin_layout Plain Layout

		LDI R28, 0x00 		
\end_layout

\begin_layout Plain Layout

		LDI R29, 0x00
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		;; DDRB = 0xFF 		
\end_layout

\begin_layout Plain Layout

		LDI	R24, 0xFF 		
\end_layout

\begin_layout Plain Layout

		OUT DDRB, R24
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        .text         
\end_layout

\begin_layout Plain Layout

		.global loop_func
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

loop_func: 	
\end_layout

\begin_layout Plain Layout

		;; PORTB = LEDS[i] 		
\end_layout

\begin_layout Plain Layout

		LDI R30, lo8(LEDS) 		
\end_layout

\begin_layout Plain Layout

		LDI R31, hi8(LEDS) 
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		;; LEDS + i - R31:R30 + R29:R28 		
\end_layout

\begin_layout Plain Layout

		ADD R30, R28 		
\end_layout

\begin_layout Plain Layout

		ADC R31, R29
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		LD	R24, Z		;; Z = R31:R30 		
\end_layout

\begin_layout Plain Layout

		/*COM R24*/ ;;ignore
\end_layout

\begin_layout Plain Layout

		OUT	PORTB, R24
\end_layout

\begin_layout Plain Layout

		ADIW R28, 0x01	;; i += 1 		  		
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		;; i = i & 0x07 		
\end_layout

\begin_layout Plain Layout

		ANDI R28, 0x07 		
\end_layout

\begin_layout Plain Layout

		ANDI R29, 0x00
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		RET
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
1.6 - Lysdiodsmönster genom tabell
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Laboration 2: Subrutiner och aritmetik
\end_layout

\begin_layout Subsection
Villkorliga programsatser i assembler
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler}"
inline false
status open

\begin_layout Plain Layout

	.data
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define vjohn R20
\end_layout

\begin_layout Plain Layout

#define vjohn_and R21
\end_layout

\begin_layout Plain Layout

#define vring R22
\end_layout

\begin_layout Plain Layout

vjohn_temp: .byte 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	.text
\end_layout

\begin_layout Plain Layout

	.global init_func
\end_layout

\begin_layout Plain Layout

init_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 	LDI	R18, 0xFF
\end_layout

\begin_layout Plain Layout

	OUT	DDRB, R18
\end_layout

\begin_layout Plain Layout

	LDI	R17, 0x00
\end_layout

\begin_layout Plain Layout

	OUT	DDRA, R17
\end_layout

\begin_layout Plain Layout

	LDI	vjohn, vjohn_temp
\end_layout

\begin_layout Plain Layout

    RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	.text
\end_layout

\begin_layout Plain Layout

	.global loop_func
\end_layout

\begin_layout Plain Layout

loop_func:
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

	IN vjohn, PINA
\end_layout

\begin_layout Plain Layout

	MOV R19, vjohn
\end_layout

\begin_layout Plain Layout

	ANDI R19, 0x01
\end_layout

\begin_layout Plain Layout

	BREQ ring_f
\end_layout

\begin_layout Plain Layout

	RJMP john_f
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
2.1 - Villkorliga programsatser main-loop
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler}"
inline false
status open

\begin_layout Plain Layout

ring_f:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	LSL vring		;vring
\end_layout

\begin_layout Plain Layout

	CPI vring, 0x00
\end_layout

\begin_layout Plain Layout

	BREQ ring_eq
\end_layout

\begin_layout Plain Layout

	RJMP ring_end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ring_eq: 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	LDI vring, 0x01
\end_layout

\begin_layout Plain Layout

	RJMP ring_end
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

ring_end:
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	COM vring
\end_layout

\begin_layout Plain Layout

	OUT PORTB, vring
\end_layout

\begin_layout Plain Layout

	COM vring
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

john_f:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	LDS	vjohn, vjohn_temp
\end_layout

\begin_layout Plain Layout

	MOV	vjohn_and, vjohn
\end_layout

\begin_layout Plain Layout

	ANDI vjohn_and, 0x80
\end_layout

\begin_layout Plain Layout

	BREQ john_if
\end_layout

\begin_layout Plain Layout

	RJMP john_else
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

john_if:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	LSL vjohn
\end_layout

\begin_layout Plain Layout

	INC vjohn
\end_layout

\begin_layout Plain Layout

	RJMP john_end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

john_else:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	LSL vjohn
\end_layout

\begin_layout Plain Layout

	RJMP john_end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

john_end:
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	STS vjohn_temp, vjohn
\end_layout

\begin_layout Plain Layout

	COM vjohn
\end_layout

\begin_layout Plain Layout

	OUT PORTB, vjohn
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
2.1 - Villkorliga programsatser (Ring och johnräknare-funktioner)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Elektronisk tärning
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler}"
inline false
status open

\begin_layout Plain Layout

	.data
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

pattern: 
\end_layout

\begin_layout Plain Layout

	.byte 0x10, 0x82, 0x92, 0xC6, 0xD6, 0xEE
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	.text
\end_layout

\begin_layout Plain Layout

	.global init_func  
\end_layout

\begin_layout Plain Layout

init_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	LDI R20, 0xFF
\end_layout

\begin_layout Plain Layout

	OUT DDRB, R20
\end_layout

\begin_layout Plain Layout

	LDI R21, 0x00
\end_layout

\begin_layout Plain Layout

	OUT DDRA, R21
\end_layout

\begin_layout Plain Layout

	CLR R20
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	.text
\end_layout

\begin_layout Plain Layout

	.global loop_func
\end_layout

\begin_layout Plain Layout

loop_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	IN R21, PINA
\end_layout

\begin_layout Plain Layout

	ANDI R21, 0x01
\end_layout

\begin_layout Plain Layout

	BREQ dice_update
\end_layout

\begin_layout Plain Layout

	RJMP dice_end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

dice_update:
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

	INC R20	; counter++
\end_layout

\begin_layout Plain Layout

	CPI R20, 0x06
\end_layout

\begin_layout Plain Layout

	BREQ dice_if
\end_layout

\begin_layout Plain Layout

	RJMP dice_end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

dice_if:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	LDI R20, 0x00
\end_layout

\begin_layout Plain Layout

	RJMP dice_end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

dice_end:
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	LDI R30, lo8(pattern)
\end_layout

\begin_layout Plain Layout

	LDI R31, hi8(pattern)
\end_layout

\begin_layout Plain Layout

	ADD R30, R20
\end_layout

\begin_layout Plain Layout

	LD R24, Z
\end_layout

\begin_layout Plain Layout

	COM R24
\end_layout

\begin_layout Plain Layout

	OUT PORTB, R24
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
2.2 - Elektronisk tärning
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Förändringsräknare
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler}"
inline false
status open

\begin_layout Plain Layout

	.data
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define oldValue R22
\end_layout

\begin_layout Plain Layout

#define newValue R23
\end_layout

\begin_layout Plain Layout

counter: .byte 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	.text
\end_layout

\begin_layout Plain Layout

	.global init_func
\end_layout

\begin_layout Plain Layout

init_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	LDI R20, 0xFF
\end_layout

\begin_layout Plain Layout

	OUT DDRB, R20
\end_layout

\begin_layout Plain Layout

	LDI R21, 0x00
\end_layout

\begin_layout Plain Layout

	OUT DDRA, R21
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	.text
\end_layout

\begin_layout Plain Layout

	.global loop_func
\end_layout

\begin_layout Plain Layout

loop_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	MOV oldValue, newValue
\end_layout

\begin_layout Plain Layout

	/*IN R19, PINA
\end_layout

\begin_layout Plain Layout

	ANDI R19, 0x01*/
\end_layout

\begin_layout Plain Layout

	EOR R19, oldValue	;För automatisk räkning utan intryckning
\end_layout

\begin_layout Plain Layout

	MOV newValue, R19
\end_layout

\begin_layout Plain Layout

	CP oldValue, newValue
\end_layout

\begin_layout Plain Layout

	BRNE loop_if
\end_layout

\begin_layout Plain Layout

	RJMP loop_end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

loop_if:
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	LDS R18, counter
\end_layout

\begin_layout Plain Layout

	INC R18
\end_layout

\begin_layout Plain Layout

	STS counter, R18
\end_layout

\begin_layout Plain Layout

	RJMP loop_end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

loop_end:
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	COM R18
\end_layout

\begin_layout Plain Layout

	OUT PORTB, R18
\end_layout

\begin_layout Plain Layout

	CLR R18
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
2.3 - Förändringsräknare
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Simulerad aritmetisk enhet (AU)
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler}"
inline false
status open

\begin_layout Plain Layout

        .data
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

#define valueX R20
\end_layout

\begin_layout Plain Layout

#define valueY R21
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

        .text
\end_layout

\begin_layout Plain Layout

        .global init_func
\end_layout

\begin_layout Plain Layout

init_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		LDI R23, 0xFF
\end_layout

\begin_layout Plain Layout

		OUT DDRB, R23
\end_layout

\begin_layout Plain Layout

		LDI R23, 0x00
\end_layout

\begin_layout Plain Layout

		OUT DDRA, R23
\end_layout

\begin_layout Plain Layout

		LDI R23, 0x00
\end_layout

\begin_layout Plain Layout

		OUT DDRD, R23
\end_layout

\begin_layout Plain Layout

        RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        .text
\end_layout

\begin_layout Plain Layout

        .global loop_func
\end_layout

\begin_layout Plain Layout

loop_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		IN R22, PINA
\end_layout

\begin_layout Plain Layout

		COM  R22
\end_layout

\begin_layout Plain Layout

		ANDI R22, 0xF0
\end_layout

\begin_layout Plain Layout

		MOV valueX, R22
\end_layout

\begin_layout Plain Layout

		IN R22, PINA
\end_layout

\begin_layout Plain Layout

		COM R22
\end_layout

\begin_layout Plain Layout

		LSL R22
\end_layout

\begin_layout Plain Layout

		LSL R22
\end_layout

\begin_layout Plain Layout

		LSL R22
\end_layout

\begin_layout Plain Layout

		LSL R22
\end_layout

\begin_layout Plain Layout

		MOV valueY, R22
\end_layout

\begin_layout Plain Layout

		IN R23, PIND
\end_layout

\begin_layout Plain Layout

		ANDI  R23, 0x01
\end_layout

\begin_layout Plain Layout

		CPI R23, 0x01
\end_layout

\begin_layout Plain Layout

		BRNE Subtract_func
\end_layout

\begin_layout Plain Layout

		RJMP Add_func
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Subtract_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		SUB valueX, valueY
\end_layout

\begin_layout Plain Layout

		IN	R22, SREG
\end_layout

\begin_layout Plain Layout

		COM valueX
\end_layout

\begin_layout Plain Layout

		OUT PORTB, valueX
\end_layout

\begin_layout Plain Layout

		RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Add_func:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		ADD valueX, valueY
\end_layout

\begin_layout Plain Layout

		ANDI valueX , 0xF0
\end_layout

\begin_layout Plain Layout

		IN	R22, SREG
\end_layout

\begin_layout Plain Layout

		ANDI R22, 0x0F
\end_layout

\begin_layout Plain Layout

		OR valueX,R22
\end_layout

\begin_layout Plain Layout

		COM valueX
\end_layout

\begin_layout Plain Layout

		OUT PORTB, valueX
\end_layout

\begin_layout Plain Layout

        RET
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
2.4 - Simulerings-kod
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Några loopar
\end_layout

\begin_layout Subsubsection
7-räknare
\end_layout

\begin_layout Standard
Tanken med denna uppgift var att räkning skulle ske genom varje flank-detekterin
g.
 Vid nedaktivering av en knapp för negativ flank och uppaktivering av en
 knapp för positiv flank.
 I nedastående kod räknar det däremot automatisk med hjälp av instruktionen
 EOR som har samma funktion som en XOR-operation.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler}"
inline false
status open

\begin_layout Plain Layout

	.data
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

varX: .byte 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	.text
\end_layout

\begin_layout Plain Layout

	.global init_func
\end_layout

\begin_layout Plain Layout

         
\end_layout

\begin_layout Plain Layout

init_func:
\end_layout

\begin_layout Plain Layout

	LDI R20, 0xFF
\end_layout

\begin_layout Plain Layout

	OUT DDRB, R20
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	.text
\end_layout

\begin_layout Plain Layout

	.global loop_func
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

loop_func:
\end_layout

\begin_layout Plain Layout

	CALL seven
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

seven:
\end_layout

\begin_layout Plain Layout

	LDS R21, varX
\end_layout

\begin_layout Plain Layout

	INC R21
\end_layout

\begin_layout Plain Layout

	STS varX, R21
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	CPI R21, 0x08
\end_layout

\begin_layout Plain Layout

	BREQ reset
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	LDI R24, 0
\end_layout

\begin_layout Plain Layout

	LDI R25, 1
\end_layout

\begin_layout Plain Layout

	CALL wait_milliseconds
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	COM R21
\end_layout

\begin_layout Plain Layout

	OUT PORTB, R21
\end_layout

\begin_layout Plain Layout

	COM R21
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	RJMP seven
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

reset:
\end_layout

\begin_layout Plain Layout

	LDI R21, 0x00
\end_layout

\begin_layout Plain Layout

	STS varX, R21
\end_layout

\begin_layout Plain Layout

	CLR R21
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
2.5 - 7-räknare
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
7- och 30-räknare
\end_layout

\begin_layout Standard
Denna kod har lånat seven-funktionen som finns från förra deluppgiften och
 dessutom har en thirty-funktion lagts till som räknar ned från 30 efter
 att seven har körts tre gånger.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={[x86masm]Assembler}"
inline false
status open

\begin_layout Plain Layout

	.data
\end_layout

\begin_layout Plain Layout

varX: .byte 0
\end_layout

\begin_layout Plain Layout

varY: .byte 0
\end_layout

\begin_layout Plain Layout

	.text
\end_layout

\begin_layout Plain Layout

	.global init_func
\end_layout

\begin_layout Plain Layout

init_func:
\end_layout

\begin_layout Plain Layout

	LDI R20, 0xFF
\end_layout

\begin_layout Plain Layout

	OUT DDRB, R20
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\begin_layout Plain Layout

	.text
\end_layout

\begin_layout Plain Layout

	.global loop_func
\end_layout

\begin_layout Plain Layout

loop_func:
\end_layout

\begin_layout Plain Layout

	CALL seven
\end_layout

\begin_layout Plain Layout

	CALL seven
\end_layout

\begin_layout Plain Layout

	CALL seven
\end_layout

\begin_layout Plain Layout

	CALL thirty
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\begin_layout Plain Layout

seven:
\end_layout

\begin_layout Plain Layout

	LDS R21, varX
\end_layout

\begin_layout Plain Layout

	INC R21
\end_layout

\begin_layout Plain Layout

	STS varX, R21
\end_layout

\begin_layout Plain Layout

	; varX = 7 ? reset : seven
\end_layout

\begin_layout Plain Layout

	CPI R21, 0x08
\end_layout

\begin_layout Plain Layout

	BREQ reset
\end_layout

\begin_layout Plain Layout

	CALL display
\end_layout

\begin_layout Plain Layout

	RJMP seven
\end_layout

\begin_layout Plain Layout

thirty:
\end_layout

\begin_layout Plain Layout

	LDS R21, varY
\end_layout

\begin_layout Plain Layout

	DEC R21
\end_layout

\begin_layout Plain Layout

	DEC R21
\end_layout

\begin_layout Plain Layout

	STS varY, R21
\end_layout

\begin_layout Plain Layout

	; varY = 0 ? reset : thirty
\end_layout

\begin_layout Plain Layout

	CPI R21, 0x00
\end_layout

\begin_layout Plain Layout

	BREQ reset
\end_layout

\begin_layout Plain Layout

	CALL display
\end_layout

\begin_layout Plain Layout

	RJMP thirty
\end_layout

\begin_layout Plain Layout

reset:
\end_layout

\begin_layout Plain Layout

	LDI R21, 0x00
\end_layout

\begin_layout Plain Layout

	STS varX, R21
\end_layout

\begin_layout Plain Layout

	LDI R21, 0x1E
\end_layout

\begin_layout Plain Layout

	STS varY, R21
\end_layout

\begin_layout Plain Layout

	CLR R21
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\begin_layout Plain Layout

display:
\end_layout

\begin_layout Plain Layout

	; wait_milliseconds ~0.25s
\end_layout

\begin_layout Plain Layout

	LDI R24, 0
\end_layout

\begin_layout Plain Layout

	LDI R25, 1
\end_layout

\begin_layout Plain Layout

	CALL wait_milliseconds
\end_layout

\begin_layout Plain Layout

	COM R21
\end_layout

\begin_layout Plain Layout

	OUT PORTB, R21
\end_layout

\begin_layout Plain Layout

	COM R21
\end_layout

\begin_layout Plain Layout

	RET
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
2.5 - 7 och 30-räknare
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Laboration 3: Hårdvarunära programmering i C
\end_layout

\begin_layout Standard
I denna laboration kommer koden att främst skrivas i C.
 Många av laborationerna är nästan direkta översättningar från assembler-uppgift
erna till C från förra laborationer.
\end_layout

\begin_layout Subsection
C-program för att tända och släcka en lysdiod 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRA = 0x00;
\end_layout

\begin_layout Plain Layout

	DDRB = 0xFF;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		PORTB = PINA;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.1 - Tända/släcka en lysdiod C
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ringräknare i C
\end_layout

\begin_layout Standard
I uppgiften ska en ringräknare konstrueras som stannar vid knapptryckning
 (sw3) och fortsätter när man trycker igen.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void wait_millseconds(int milliseconds);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRA = 0x00;
\end_layout

\begin_layout Plain Layout

	DDRB = 0xFF;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	char leds[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
\end_layout

\begin_layout Plain Layout

	unsigned char new_sw3, old_sw3, run;
\end_layout

\begin_layout Plain Layout

	int i = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	new_sw3 = old_sw3 = run = 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		// switch
\end_layout

\begin_layout Plain Layout

		old_sw3 = new_sw3;
\end_layout

\begin_layout Plain Layout

		new_sw3 = (PINA & 0x08) == 0;
\end_layout

\begin_layout Plain Layout

		if (old_sw3 && !new_sw3)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			run = !run;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		if(run)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

				PORTB = ~leds[i];
\end_layout

\begin_layout Plain Layout

				i++;
\end_layout

\begin_layout Plain Layout

				i = i & 0x07;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			PORTB = 0xFF; //Släcka diod vid !run
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		wait_milliseconds(100);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.2 - Ringräknare C
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Spegling av en switchs värde på en LCD-display
\end_layout

\begin_layout Standard
Denna uppgift gick ut på att visa värden av den intryckta switchen på en
 LCD-display (exempel figur 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:LCD-skärm-för-ATmega32"

\end_inset

) .
 Koden blev uppdelade i funktioner för att göra det tydligare vad varje
 sektion av kod gör.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pictures/Lcd.jpg
	lyxscale 50
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
LCD-skärm för ATmega32
\begin_inset CommandInset label
LatexCommand label
name "fig:LCD-skärm-för-ATmega32"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

lcd4 theDisplay;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void dec_to_bin(int sw_value, char * sw_bin);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRA = 0x00;
\end_layout

\begin_layout Plain Layout

	lcd4_init(&theDisplay, &PORTB, &DDRB, 4000, 100);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	int sw_value = 0;
\end_layout

\begin_layout Plain Layout

	char s[20];
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		sw_value = PINA;
\end_layout

\begin_layout Plain Layout

		print_to_lcd(s, sw_value);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.3 - Main-funktion LCD
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void print_to_lcd(char s[], int sw_value)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	// PRINT HEX
\end_layout

\begin_layout Plain Layout

	sprintf(s, "HEX = %02x", 0xFF - sw_value);
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row1(&theDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&theDisplay, s);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	// CALCULATE BINARY
\end_layout

\begin_layout Plain Layout

	char sw_bin[9];
\end_layout

\begin_layout Plain Layout

	dec_to_bin(sw_value, sw_bin);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// PRINT BINARY
\end_layout

\begin_layout Plain Layout

	sprintf(s,"BIN = %s", sw_bin);
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row2(&theDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&theDisplay, s);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for (int i = 0; i <= 8; i++)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		sw_bin[i] = 48;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void dec_to_bin(int sw_value, char * sw_bin)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int dec, i = 0;
\end_layout

\begin_layout Plain Layout

	dec = 255 - sw_value;
\end_layout

\begin_layout Plain Layout

	while(i < 8)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		sw_bin[7-i] = dec % 2 + '0';
\end_layout

\begin_layout Plain Layout

		dec /= 2;
\end_layout

\begin_layout Plain Layout

		i++;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	sw_bin[8] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.3 - Funktioner för LCD
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Elektronisk tärning med presentation på en LCD-display
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <util/delay.h>
\end_layout

\begin_layout Plain Layout

#include "lcd4.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

lcd4 theDisplay;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const int DICE_MAX = 6;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRA = 0x00;
\end_layout

\begin_layout Plain Layout

	lcd4_init(&theDisplay, &PORTB, &DDRB, 4000, 100);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	int sw_button = 0;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		sw_button = (PINA & 0x01) == 0;
\end_layout

\begin_layout Plain Layout

		if(sw_button)
\end_layout

\begin_layout Plain Layout

			print_to_lcd();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void print_to_lcd()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char s[20];
\end_layout

\begin_layout Plain Layout

	int diceValue = rand() % DICE_MAX + 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	sprintf(s, "Dice Dec = %d", diceValue);
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row1(&theDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&theDisplay, s);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.4 - Elektronisk tärning på LCD
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Bitfältsstruktur för att visa två tärningars värde på lysdioder
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include "Dice.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void wait_milliseconds(int);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRA = 0x00;
\end_layout

\begin_layout Plain Layout

	DDRB = 0xFF;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	bDicePORT.unusedOne = 1;
\end_layout

\begin_layout Plain Layout

	bDicePORT.unusedTwo = 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		int diceOneRandomValue = rand () % 6 + 1;
\end_layout

\begin_layout Plain Layout

		int diceTwoRandomValue = rand () % 6 + 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		if(!(PINA & 0x08))
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			bDicePORT.diceOne = diceOneRandomValue;
\end_layout

\begin_layout Plain Layout

			bDicePORT.diceTwo = diceTwoRandomValue;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		wait_milliseconds(300);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.5 - Bitfältsstruktur - main.c
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef DICE_H_
\end_layout

\begin_layout Plain Layout

#define DICE_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	unsigned char diceTwo : 3;		//Bit 0-2
\end_layout

\begin_layout Plain Layout

	unsigned char unusedOne : 1;	//Bit 3 används ej
\end_layout

\begin_layout Plain Layout

	unsigned char diceOne : 3;		//Bit 4-6
\end_layout

\begin_layout Plain Layout

	unsigned char unusedTwo : 1;	//Bit 7 används ej.
\end_layout

\begin_layout Plain Layout

} diceRegister; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define bDicePORT (*(volatile diceRegister *) &PORTB)
\end_layout

\begin_layout Plain Layout

#define bDiceDDR (*(volatile) diceRegister *) &DDRB)
\end_layout

\begin_layout Plain Layout

#define bDicePIN (*(volatile) diceRegister *) &PINB)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.5 - Bitfältsstruktur - Dice.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Mätning av exekveringstider med simulatorn
\end_layout

\begin_layout Standard
Följande kod analyserades för denna uppgift:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	gXi = 20;
\end_layout

\begin_layout Plain Layout

	gYi = 30;
\end_layout

\begin_layout Plain Layout

	gRi = gXi * gYi;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Tid för att utföra multiplikation av två heltal med AVR-processor.
\end_layout

\begin_layout Standard
Den beräknade tiden från simulationen framgav resultatet 22 
\begin_inset Formula $\mu s$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Utan och med volatile
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	gXi = 20;
\end_layout

\begin_layout Plain Layout

0000003E  LDI R24,0x14		Load immediate 
\end_layout

\begin_layout Plain Layout

0000003F  LDI R25,0x00		Load immediate 
\end_layout

\begin_layout Plain Layout

00000040  STS 0x0065,R25		Store direct to data space 
\end_layout

\begin_layout Plain Layout

00000042  STS 0x0064,R24		Store direct to data space 
\end_layout

\begin_layout Plain Layout

	gYi = 30;
\end_layout

\begin_layout Plain Layout

00000044  LDI R24,0x1E		Load immediate 
\end_layout

\begin_layout Plain Layout

00000045  LDI R25,0x00		Load immediate 
\end_layout

\begin_layout Plain Layout

00000046  STS 0x0061,R25		Store direct to data space 
\end_layout

\begin_layout Plain Layout

00000048  STS 0x0060,R24		Store direct to data space 
\end_layout

\begin_layout Plain Layout

	gRi = gXi * gYi;
\end_layout

\begin_layout Plain Layout

0000004A  LDS R20,0x0064		Load direct from data space 
\end_layout

\begin_layout Plain Layout

0000004C  LDS R21,0x0065		Load direct from data space 
\end_layout

\begin_layout Plain Layout

0000004E  LDS R18,0x0060		Load direct from data space 
\end_layout

\begin_layout Plain Layout

00000050  LDS R19,0x0061		Load direct from data space 
\end_layout

\begin_layout Plain Layout

00000052  MUL R20,R18		Multiply unsigned 
\end_layout

\begin_layout Plain Layout

00000053  MOVW R24,R0		Copy register pair 
\end_layout

\begin_layout Plain Layout

00000054  MUL R20,R19		Multiply unsigned 
\end_layout

\begin_layout Plain Layout

00000055  ADD R25,R0		Add without carry 
\end_layout

\begin_layout Plain Layout

00000056  MUL R21,R18		Multiply unsigned 
\end_layout

\begin_layout Plain Layout

00000057  ADD R25,R0		Add without carry 
\end_layout

\begin_layout Plain Layout

00000058  CLR R1		Clear Register 
\end_layout

\begin_layout Plain Layout

00000059  STS 0x0063,R25		Store direct to data space 
\end_layout

\begin_layout Plain Layout

0000005B  STS 0x0062,R24		Store direct to data space 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.6 - Assemblykod med volatile
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	gXi = 20;
\end_layout

\begin_layout Plain Layout

0000003E  LDI R24,0x14		Load immediate 
\end_layout

\begin_layout Plain Layout

0000003F  LDI R25,0x00		Load immediate 
\end_layout

\begin_layout Plain Layout

00000040  STS 0x0065,R25		Store direct to data space 
\end_layout

\begin_layout Plain Layout

00000042  STS 0x0064,R24		Store direct to data space 
\end_layout

\begin_layout Plain Layout

	gYi = 30;
\end_layout

\begin_layout Plain Layout

00000044  LDI R24,0x1E		Load immediate 
\end_layout

\begin_layout Plain Layout

00000045  LDI R25,0x00		Load immediate 
\end_layout

\begin_layout Plain Layout

00000046  STS 0x0061,R25		Store direct to data space 
\end_layout

\begin_layout Plain Layout

00000048  STS 0x0060,R24		Store direct to data space 
\end_layout

\begin_layout Plain Layout

	gRi = gXi * gYi;
\end_layout

\begin_layout Plain Layout

0000004A  LDI R24,0x58		Load immediate 
\end_layout

\begin_layout Plain Layout

0000004B  LDI R25,0x02		Load immediate 
\end_layout

\begin_layout Plain Layout

0000004C  STS 0x0063,R25		Store direct to data space 
\end_layout

\begin_layout Plain Layout

0000004E  STS 0x0062,R24		Store direct to data space 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.6 - Assemblykod utan volatile
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eftersom volatile tvingar programmet att köra utan kodoptimering sker beräkninge
n i assembly normalt 
\series bold
inte
\series default
 till.
 Utan volatile optimeras den delen bort i assembly och resultatet läggs
 direkt in i registret.
\end_layout

\begin_layout Subsubsection
Exekveringstider med en 8Mhz överklockad processor
\end_layout

\begin_layout Standard
Tidsmätningar utfördes på följande datatyper: int, long och float.
 Tiderna står till höger om varje beräkning i nedanstående kodram.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	IntTest();		// 39,25 us
\end_layout

\begin_layout Plain Layout

	LongTest();		// 100,88 us
\end_layout

\begin_layout Plain Layout

	FloatTest();	// 103,88 us
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void IntTest()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	volatile int gXi = 0x0040, gYi = 0x0020, gRi = 0;
\end_layout

\begin_layout Plain Layout

	gRi = gXi + gYi;	//1,75 us
\end_layout

\begin_layout Plain Layout

	gRi = gXi * gYi;	//2,75 us
\end_layout

\begin_layout Plain Layout

	gRi = gXi / gYi;	//28,5 us
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void LongTest()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	volatile long gXi = 0x0040L, gYi = 0x0020L, gRi = 0;
\end_layout

\begin_layout Plain Layout

	gRi = gXi + gYi;	// 3,50 us
\end_layout

\begin_layout Plain Layout

	gRi = gXi * gYi;	// 12,13 us
\end_layout

\begin_layout Plain Layout

	gRi = gXi / gYi;	// 77,25 us
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void FloatTest()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	volatile float gXi = 20.0, gYi = 30.0, gRi = 0;
\end_layout

\begin_layout Plain Layout

	gRi = gXi + gYi;	// 15,38 us
\end_layout

\begin_layout Plain Layout

	gRi = gXi * gYi;	// 18,50 us
\end_layout

\begin_layout Plain Layout

	gRi = gXi / gYi;	// 62,00 us
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.6 - Tidsmätningar på int, long och float
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Beräkningar på float med blandade datatyper
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void FloatMixTest()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	volatile float gFi = 1.5;
\end_layout

\begin_layout Plain Layout

	volatile float gRi = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// float = float * int;
\end_layout

\begin_layout Plain Layout

	volatile int gXi = 0x0040;
\end_layout

\begin_layout Plain Layout

	gRi = gFi * gXi;	// 26,25 us
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// float = float * long;
\end_layout

\begin_layout Plain Layout

	volatile long gLi = 0x0020;
\end_layout

\begin_layout Plain Layout

	gRi = gFi * gLi;	// 25,50 us
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// float = float * float;
\end_layout

\begin_layout Plain Layout

	gRi = gFi * gFi;	// 20,88 us
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.6 - Tidsmätningar på float
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Resultat av tidsmätningar
\end_layout

\begin_layout Standard
Denna simulering visar att datatypen int är snabbast att beräkna medan long
 och float kommer efter i beräkningstid.
 Addition är snabbare att beräkna, multiplikation är ungefär lika snabb
 som addition medan division är långsammast.
 Simuleringen i förra uppgiften visade också att det inte är så stora skillnader
 att utföra aritmetiska beräkningar mellan olika datatyper då det bara skiljde
 några mikrosekunder.
 Generellt sett verkar det som om float är den datatypen som tar längst
 tid att utföra beräkningar med.
 Detta kan bero på att flera instruktioner måste utföras i assembly för
 att göra samma beräkning, jämfört med till exempel int.
 Long har 64 bitar, medan float har 32-bitar, likadant som int, men skillnaden
 är att float har "decimalbitar" som kan försvåra beräkningarna någorlunda.
\end_layout

\begin_layout Subsection
Uppgift 7 - Strukturen sedd på maskinnivån som värdeparameter respektive
 retur-typ
\end_layout

\begin_layout Enumerate
Struktens medlemmar läggs till i registren i minnesstacken i en sekventiell
 följd.
 Början av strukten lagras på en adress i minnet där också första medlemmen
 av strukten räknas, därefter kommer resterande meddlemmar ordnade efter
 varandra i respektive address beroende på storleken av datamedlemmarna.
 Alltså om struktens början lagras på adress 0x40, lagras också den första
 medlemmen också på 0x40.
 Om andra medlemmen är en int så lagras denna på 0x42 då en int är två bytes.
\end_layout

\begin_layout Enumerate
En strukt returneras av en funktion genom att först skicka adressen av funktione
ns början och därefter struktens adress i jämförelse med funktionen.
\end_layout

\begin_layout Subsection
Falsk elektronisk tärning
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include "..
\backslash
..
\backslash
help_files
\backslash
Dice.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void wait_milliseconds(int);
\end_layout

\begin_layout Plain Layout

void ThrowDice(char, int *, char, int *);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

enum { Normal, False } Dice;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRA = 0x00;
\end_layout

\begin_layout Plain Layout

	DDRB = 0xFF;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	int nFalseThrow = 0;
\end_layout

\begin_layout Plain Layout

	int diceValue = 6;	// Inverted value for diode display
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	bDicePORT.unusedOne = 1;
\end_layout

\begin_layout Plain Layout

	bDicePORT.unusedTwo = 1;
\end_layout

\begin_layout Plain Layout

	bDicePORT.diceTwo = diceValue;
\end_layout

\begin_layout Plain Layout

	bDicePORT.diceOne = diceValue;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Dice = Normal;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		char NormalThrow = !(PINA & 0x01);
\end_layout

\begin_layout Plain Layout

		char FalseThrow = !(PINA & 0x10);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		ThrowDice(NormalThrow, &diceValue, FalseThrow, &nFalseThrow
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.8 - Dice - main.c
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void ThrowDice(char NormalThrow, int *diceValue, 
\end_layout

\begin_layout Plain Layout

char FalseThrow, int *nFalseThrow)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch(Dice)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case Normal:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			if(NormalThrow)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				if(*diceValue >= 1)
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					bDicePORT.diceTwo = *diceValue;
\end_layout

\begin_layout Plain Layout

					bDicePORT.diceOne = *diceValue;
\end_layout

\begin_layout Plain Layout

					*diceValue--;
\end_layout

\begin_layout Plain Layout

					wait_milliseconds(200);
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

				else
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					*diceValue = 6;
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			else if(FalseThrow)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				Dice = False;
\end_layout

\begin_layout Plain Layout

				*nFalseThrow = 0;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} break;	// Normal
\end_layout

\begin_layout Plain Layout

		case False:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			if(NormalThrow)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				*diceValue = 1;
\end_layout

\begin_layout Plain Layout

				if(*nFalseThrow < 2)
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					bDicePORT.diceTwo = *diceValue;
\end_layout

\begin_layout Plain Layout

					bDicePORT.diceOne = *diceValue;
\end_layout

\begin_layout Plain Layout

					*nFalseThrow++;
\end_layout

\begin_layout Plain Layout

					wait_milliseconds(200);
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

				else
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					*diceValue = 6;
\end_layout

\begin_layout Plain Layout

					bDicePORT.diceTwo = *diceValue;
\end_layout

\begin_layout Plain Layout

					bDicePORT.diceOne = *diceValue;
\end_layout

\begin_layout Plain Layout

					Dice = Normal;
\end_layout

\begin_layout Plain Layout

					*nFalseThrow = 0;
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} break;	//False
\end_layout

\begin_layout Plain Layout

		default:
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

	}	// Switch
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.8 - ThrowDice - function
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Kodlås
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

enum
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Closed,
\end_layout

\begin_layout Plain Layout

	Open,
\end_layout

\begin_layout Plain Layout

	PushKey,
\end_layout

\begin_layout Plain Layout

	ReleaseKey
\end_layout

\begin_layout Plain Layout

} Locker;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void TryUnlock(char, int *, int *, char, char, int *, const int);
\end_layout

\begin_layout Plain Layout

void CheckIfWrongCombination(int*, char, int*, char, char, int*, const int);
\end_layout

\begin_layout Plain Layout

int CheckTrueCombination(int, char, int*, char, char );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRA = 0x00;
\end_layout

\begin_layout Plain Layout

	DDRB = 0xFF;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	const int timeout = 20;
\end_layout

\begin_layout Plain Layout

	int time_counter = 0;
\end_layout

\begin_layout Plain Layout

	int iCode = 0;
\end_layout

\begin_layout Plain Layout

	int code[6] = {1,2,3,1,1,2};
\end_layout

\begin_layout Plain Layout

	Locker = Closed;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		char eventKey1 = !(PINA & 0x80);
\end_layout

\begin_layout Plain Layout

		char eventKey2 = !(PINA & 0x40);
\end_layout

\begin_layout Plain Layout

		char eventKey3 = !(PINA & 0x20);
\end_layout

\begin_layout Plain Layout

		PORTB = PINA;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		TryUnlock(eventKey1, code, &iCode, eventKey2, eventKey3, &time_counter,
 timeout);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		wait_milliseconds(50);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.9 - Kodlås - main
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void TryUnlock(char eventKey1, int * code, int *iCode, 
\end_layout

\begin_layout Plain Layout

char eventKey2, char eventKey3, int *time_counter, const int timeout)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch(Locker)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case Closed:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			if((eventKey1 && (code[*iCode] == 1))
\end_layout

\begin_layout Plain Layout

			|| (eventKey2 && (code[*iCode] == 2))
\end_layout

\begin_layout Plain Layout

			|| (eventKey3 && (code[*iCode] == 3)))
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				*iCode++;
\end_layout

\begin_layout Plain Layout

				Locker = PushKey;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			PORTB = 254;
\end_layout

\begin_layout Plain Layout

		} break;	// Closed
\end_layout

\begin_layout Plain Layout

		case Open:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			if(*time_counter > timeout)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				Locker = Closed;
\end_layout

\begin_layout Plain Layout

				*time_counter = 0;
\end_layout

\begin_layout Plain Layout

				*iCode = 0;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			*time_counter++;
\end_layout

\begin_layout Plain Layout

			PORTB = 255 - *time_counter;	//20 sec
\end_layout

\begin_layout Plain Layout

			wait_milliseconds(500);
\end_layout

\begin_layout Plain Layout

		} break;	// Open
\end_layout

\begin_layout Plain Layout

		case PushKey:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			if(!eventKey1
\end_layout

\begin_layout Plain Layout

			&& !eventKey2
\end_layout

\begin_layout Plain Layout

			&& !eventKey3)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				Locker = ReleaseKey;
\end_layout

\begin_layout Plain Layout

				*time_counter++;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			if(*iCode >= 6)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				Locker = Open;
\end_layout

\begin_layout Plain Layout

				*time_counter = 0;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} break;	// PushKey
\end_layout

\begin_layout Plain Layout

		case ReleaseKey:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			CheckIfWrongCombination(
\end_layout

\begin_layout Plain Layout

			&*iCode, eventKey1, code,
\end_layout

\begin_layout Plain Layout

			eventKey2, eventKey3,
\end_layout

\begin_layout Plain Layout

			&*time_counter, timeout
\end_layout

\begin_layout Plain Layout

			);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			*iCode = CheckTrueCombination(
\end_layout

\begin_layout Plain Layout

			*iCode, eventKey1, code,
\end_layout

\begin_layout Plain Layout

			eventKey2, eventKey3
\end_layout

\begin_layout Plain Layout

			);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			PORTB = 254;
\end_layout

\begin_layout Plain Layout

		} break;	// ReleaseKey
\end_layout

\begin_layout Plain Layout

		default:
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

	}	// Switch
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.9 - TryUnlock-function
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void CheckIfWrongCombination(
\end_layout

\begin_layout Plain Layout

	int *iCode, char eventKey1, int * code,
\end_layout

\begin_layout Plain Layout

	char eventKey2, char eventKey3, 
\end_layout

\begin_layout Plain Layout

	int *time_counter, const int timeout)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (*iCode < 3)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if((eventKey1 && (code[*iCode] != 1))
\end_layout

\begin_layout Plain Layout

		|| (eventKey2 && (code[*iCode] != 2))
\end_layout

\begin_layout Plain Layout

		|| (eventKey3 && (code[*iCode] != 3))
\end_layout

\begin_layout Plain Layout

		|| *time_counter > timeout)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Locker = Closed;
\end_layout

\begin_layout Plain Layout

			*time_counter = 0;
\end_layout

\begin_layout Plain Layout

			*iCode = 0;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			if ((eventKey1 && (code[*iCode] != 1))
\end_layout

\begin_layout Plain Layout

			|| (eventKey2 && (code[*iCode] != 2)))
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				Locker = Closed;
\end_layout

\begin_layout Plain Layout

				*time_counter = 0;
\end_layout

\begin_layout Plain Layout

				*iCode = 0;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int CheckTrueCombination(
\end_layout

\begin_layout Plain Layout

	int iCode, char eventKey1, int * code,
\end_layout

\begin_layout Plain Layout

	char eventKey2, char eventKey3)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (iCode < 3)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if((eventKey1 && (code[iCode] == 1))
\end_layout

\begin_layout Plain Layout

		|| (eventKey2 && (code[iCode] == 2))
\end_layout

\begin_layout Plain Layout

		|| (eventKey3 && (code[iCode] == 3)))
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			iCode++;
\end_layout

\begin_layout Plain Layout

			Locker = PushKey;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if ((eventKey1 && (code[iCode] == 1))
\end_layout

\begin_layout Plain Layout

		|| (eventKey2 && (code[iCode] == 2)))
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			iCode++;
\end_layout

\begin_layout Plain Layout

			Locker = PushKey;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}				return iCode;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.9 - CodeCheck-functions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Avstudsning av en tryckknapp
\end_layout

\begin_layout Subsubsection
Tillståndsdiagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pictures/Avstudsnings tillståndsdiagram.PNG
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Tillståndsdiagram för Avstudsning av en tryckknapp
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
C-kod
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static int n = 0;
\end_layout

\begin_layout Plain Layout

static enum {Zero, Wait, One} Signal;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRB = 0xFF;
\end_layout

\begin_layout Plain Layout

	DDRA = 0x00;
\end_layout

\begin_layout Plain Layout

	Signal = Zero;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		char input = !(PINA & 0x01);
\end_layout

\begin_layout Plain Layout

		PORTB = 255 - bounce(input);
\end_layout

\begin_layout Plain Layout

		wait_milliseconds(100);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int bounce(int signal)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch (Signal)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case Zero:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			if(signal == 1)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				Signal = One;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			return 0;
\end_layout

\begin_layout Plain Layout

		} break;
\end_layout

\begin_layout Plain Layout

		case One:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			if(signal == 0)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				Signal = Wait;
\end_layout

\begin_layout Plain Layout

				n = 10;
\end_layout

\begin_layout Plain Layout

				return 1;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			return 0;
\end_layout

\begin_layout Plain Layout

		} break;
\end_layout

\begin_layout Plain Layout

		case Wait:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			n--;
\end_layout

\begin_layout Plain Layout

			if(n == 0)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				Signal = Zero;
\end_layout

\begin_layout Plain Layout

				return 0;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} break;
\end_layout

\begin_layout Plain Layout

		default:
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.10 - Avstudsning - main
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Trafikljusstyrning
\end_layout

\begin_layout Subsubsection
Introduktion
\end_layout

\begin_layout Standard
I denna uppgift skulle trafikljus styras genom olika tillstånd.
 Lösningen genomfördes i C-kod men med objektorienterad stil, genom användning
 av structs.
 Följande figurer visar hur kretsens kopplingar såg ut och vilka lampor
 som representerade vilken riktning.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pictures/intersectiontrafficlight.PNG
	scale 75

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Trafikljus-korsning
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pictures/systemdiagram.PNG
	scale 75

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Systemdiagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Figurer av trafiksituationen
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
Tillståndsdiagram
\end_layout

\begin_layout Standard
I figur 
\begin_inset CommandInset ref
LatexCommand ref
reference "Tillståndsdiagram Trafikljus"

\end_inset

 ser man den uppritade tillståndsdiagrammet för denna uppgift.
 Trafik detektering sker via sensorer som man trycker på mikroprocessorns.
 Starttillstånd kommer att bli GoSouth, vilket innebär att det är trafik
 i södergående riktning, vilket då lyser upp den gröna lampan och låter
 den västgående riktningen vara röd.
 Mellanväxlingen mellan riktningarna sker på det viset att när trafik detekteras
 så påbörjas en nedräkning.
 Beroende på om det är en riktning som är trafikerad eller om båda riktningarna
 är trafikerade.
 När en riktning är trafikerad dras timern igång 2 sekunder snabbare än
 om båda riktningar skulle vara trafikerade.
 Detta för att vid lite trafik, inte låta trafikanterna vänta på ljusomslag.
 och vid mycket trafik, låta alla riktningarna få lika mycket tid att passera.
 Enligt tillståndsdiagrammet visar de mittersta pilarna att omslaget sker
 direkt från grön till röd och vice versa, men detta är bara en ritning
 som indikerar en annan timer än de andra pilarna och för att förtydliga
 hur det går till.
 Transitionerna passerar 
\bar under
alltid
\bar default
 väntetillstånden.
 I nästkommande sidor visas koden för denna uppgift.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pictures/TillståndsdiagramTrafficLights.PNG
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Tillståndsdiagram Trafikljus 
\begin_inset CommandInset label
LatexCommand label
name "Tillståndsdiagram Trafikljus"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
C-Kod
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include "TrafficLights.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRA = 0x00;
\end_layout

\begin_layout Plain Layout

	DDRB = 0xFF;
\end_layout

\begin_layout Plain Layout

	Traffic = GoSouth;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		char TrafficOnSouth = !(PINA & 0x01);
\end_layout

\begin_layout Plain Layout

		char TrafficOnWest = !(PINA & 0x02);
\end_layout

\begin_layout Plain Layout

		switch (Traffic)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			case GoSouth:
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				ActivateSouthLane(TrafficOnWest, TrafficOnSouth);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			} break;
\end_layout

\begin_layout Plain Layout

			case WaitSouth:
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				TransitionSouthToWest();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			} break;
\end_layout

\begin_layout Plain Layout

			case GoWest:
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				ActivateWestLane(TrafficOnSouth, TrafficOnWest);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			} break;
\end_layout

\begin_layout Plain Layout

			case WaitWest:
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				TransitionWestToSouth();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			} break;
\end_layout

\begin_layout Plain Layout

			default:
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.11 - TrafficLights - main.c
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef TRAFFICLIGHTS_H_
\end_layout

\begin_layout Plain Layout

#define TRAFFICLIGHTS_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

enum {
\end_layout

\begin_layout Plain Layout

	GoSouth,
\end_layout

\begin_layout Plain Layout

	WaitSouth,
\end_layout

\begin_layout Plain Layout

	GoWest,
\end_layout

\begin_layout Plain Layout

	WaitWest
\end_layout

\begin_layout Plain Layout

} Traffic;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct TrafficLights {
\end_layout

\begin_layout Plain Layout

	char Red;
\end_layout

\begin_layout Plain Layout

	char Yellow;
\end_layout

\begin_layout Plain Layout

	char Green;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct TrafficLights SouthTrafficLight = {0xFF - 0x20, 0xFF - 0x40, 0xFF
 - 0x80};
\end_layout

\begin_layout Plain Layout

struct TrafficLights WestTrafficLight = {0xFF - 0x10, 0xFF - 0x08, 0xFF
 - 0x04};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// How to make this work?
\end_layout

\begin_layout Plain Layout

//#define SouthLight (*(SouthTrafficLight)* &PORTB)
\end_layout

\begin_layout Plain Layout

//#define WestLight (*(WestTrafficLight)* &PORTB)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int oneSec = 1000, threeSec = 3000;	//Timer tid
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.11 - Trafficlight.h Del I
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void ActivateSouthLane(char TrafficOnWest, char TrafficOnSouth)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	PORTB = SouthTrafficLight.Green;
\end_layout

\begin_layout Plain Layout

	PORTB += WestTrafficLight.Red;
\end_layout

\begin_layout Plain Layout

	if(TrafficOnWest && !TrafficOnSouth)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		wait_milliseconds(oneSec);
\end_layout

\begin_layout Plain Layout

		Traffic = WaitSouth;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if(TrafficOnWest && TrafficOnSouth)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		wait_milliseconds(threeSec);
\end_layout

\begin_layout Plain Layout

		Traffic = WaitSouth;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void TransitionSouthToWest()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	PORTB = WestTrafficLight.Red;
\end_layout

\begin_layout Plain Layout

	PORTB += WestTrafficLight.Yellow;
\end_layout

\begin_layout Plain Layout

	PORTB += SouthTrafficLight.Yellow + 1;
\end_layout

\begin_layout Plain Layout

	wait_milliseconds(oneSec);
\end_layout

\begin_layout Plain Layout

	Traffic = GoWest;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ActivateWestLane(char TrafficOnSouth, char TrafficOnWest)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	PORTB = WestTrafficLight.Green;
\end_layout

\begin_layout Plain Layout

	PORTB += SouthTrafficLight.Red - 1;
\end_layout

\begin_layout Plain Layout

	if(TrafficOnSouth && !TrafficOnWest)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		wait_milliseconds(oneSec);
\end_layout

\begin_layout Plain Layout

		Traffic = WaitWest;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if(TrafficOnSouth && TrafficOnWest)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		wait_milliseconds(threeSec);
\end_layout

\begin_layout Plain Layout

		Traffic = WaitWest;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void TransitionWestToSouth()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	PORTB = WestTrafficLight.Yellow;
\end_layout

\begin_layout Plain Layout

	PORTB += SouthTrafficLight.Red;
\end_layout

\begin_layout Plain Layout

	PORTB += SouthTrafficLight.Yellow;
\end_layout

\begin_layout Plain Layout

	wait_milliseconds(oneSec);
\end_layout

\begin_layout Plain Layout

	Traffic = GoSouth;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* TRAFFICLIGHTS_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
3.11 - Trafficlight.h - Del II (Metoder)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Laboration 4: Objektorienterad programmering i C
\end_layout

\begin_layout Subsection
Objektorienterad modellering av en mönstergenerator
\end_layout

\begin_layout Standard
I denna uppgift skulle en mönster-visare konstrueras.
 Programmering skedde i C i en objektorienterad stil.
 De filer som användes som inkluderingsfiler är pattern.h och pulse.h.
 Därefter finns koderna för uppbyggnaden, pattern.c och main.c.
 Pulse.h har en funktion som läser av negativa flanker och ger en pulserande
 effekt.
 De mönster som skapades var följande: En ringräknare, en johnsonräknare,
 en binär nedräknare och en skiftande blinkmönster.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

typedef struct  
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char in;
\end_layout

\begin_layout Plain Layout

	char in_old;
\end_layout

\begin_layout Plain Layout

	char out;
\end_layout

\begin_layout Plain Layout

} Pulse;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char pulse_run(Pulse* p, char in)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	p->in_old = p->in;
\end_layout

\begin_layout Plain Layout

	p->in = in;
\end_layout

\begin_layout Plain Layout

	p->out = p->in_old & !p->in;
\end_layout

\begin_layout Plain Layout

	return p->out;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.1 - Pulse.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef PATTERN8_H_
\end_layout

\begin_layout Plain Layout

#define PATTERN8_H_
\end_layout

\begin_layout Plain Layout

#include "avr/io.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

enum Pattern {
\end_layout

\begin_layout Plain Layout

	Ring,
\end_layout

\begin_layout Plain Layout

	Johnson,
\end_layout

\begin_layout Plain Layout

	Counter,
\end_layout

\begin_layout Plain Layout

	Flash
\end_layout

\begin_layout Plain Layout

} patternState;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

	int i;
\end_layout

\begin_layout Plain Layout

	int johnson;
\end_layout

\begin_layout Plain Layout

	int counter;
\end_layout

\begin_layout Plain Layout

} Pattern8;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void pattern8_init(Pattern8* p);
\end_layout

\begin_layout Plain Layout

void pattern8_next(Pattern8* p);
\end_layout

\begin_layout Plain Layout

void pattern8_run(Pattern8* p);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char pattern8_ring(Pattern8* p);
\end_layout

\begin_layout Plain Layout

int pattern8_johnson(Pattern8* p);
\end_layout

\begin_layout Plain Layout

int pattern8_counter(Pattern8* p);
\end_layout

\begin_layout Plain Layout

int pattern8_flashing(Pattern8* p);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define pattern (*(volatile Pattern8)* &PORTB)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* PATTERN8_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.1 - pattern8.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include "pattern8.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

pattern8_init(Pattern8* p)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	p->i = 0;
\end_layout

\begin_layout Plain Layout

	p->johnson = 0;
\end_layout

\begin_layout Plain Layout

	p->counter = 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

pattern8_next(Pattern8* p)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	pattern8_init(&p);
\end_layout

\begin_layout Plain Layout

	switch(patternState)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case Ring:
\end_layout

\begin_layout Plain Layout

		patternState = Johnson;
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

		case Johnson:
\end_layout

\begin_layout Plain Layout

		patternState = Counter;
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

		case Counter:
\end_layout

\begin_layout Plain Layout

		patternState = Flash;
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

		case Flash:
\end_layout

\begin_layout Plain Layout

		patternState = Ring;
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char pattern8_ring(Pattern8* p)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char leds[8] = {0x01, 0x02, 0x04, 0x08,
\end_layout

\begin_layout Plain Layout

	0x10, 0x20, 0x40, 0x80};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	p->i++;
\end_layout

\begin_layout Plain Layout

	p->i = p->i & 0x07;
\end_layout

\begin_layout Plain Layout

	return ~leds[p->i];
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int pattern8_johnson(Pattern8* p)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if(( p->johnson & 0x80) == 0)
\end_layout

\begin_layout Plain Layout

		p->johnson=(p->johnson << 1) + 1;
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

		p->johnson = p->johnson << 1;
\end_layout

\begin_layout Plain Layout

	return p->johnson;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int pattern8_counter(Pattern8* p)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	p->i++;
\end_layout

\begin_layout Plain Layout

	return p->i;	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int pattern8_flashing(Pattern8* p)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if(p->i < 255)
\end_layout

\begin_layout Plain Layout

		p->i = p->i << 2;
\end_layout

\begin_layout Plain Layout

	else if(p->i > 255)
\end_layout

\begin_layout Plain Layout

		p->i = p->i >> 4;
\end_layout

\begin_layout Plain Layout

	return p->i;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.1 - pattern8.c
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include "pattern8.h"
\end_layout

\begin_layout Plain Layout

#include "pulse.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void wait_milliseconds(int);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRA = 0x00;
\end_layout

\begin_layout Plain Layout

	DDRB = 0xFF;
\end_layout

\begin_layout Plain Layout

	Pulse p7;
\end_layout

\begin_layout Plain Layout

	Pattern8 p8;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while(1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		char sw7 = (!(PINA & 0x80));
\end_layout

\begin_layout Plain Layout

		switch(patternState)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			case Ring:
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				PORTB = pattern8_ring(&p8);
\end_layout

\begin_layout Plain Layout

			} break;
\end_layout

\begin_layout Plain Layout

			case Johnson:
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				PORTB = pattern8_johnson(&p8);
\end_layout

\begin_layout Plain Layout

			} break;
\end_layout

\begin_layout Plain Layout

			case Counter:
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				PORTB = pattern8_counter(&p8);
\end_layout

\begin_layout Plain Layout

			} break;
\end_layout

\begin_layout Plain Layout

			case Flash:
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				PORTB = pattern8_flashing(&p8);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			default:
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

			} break;
\end_layout

\begin_layout Plain Layout

		} // switch
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		// Move to next pattern
\end_layout

\begin_layout Plain Layout

		if(pulse_run(&p7, sw7))
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			pattern8_next(&p8);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		wait_milliseconds(100);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.1 - main.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Kast av tärningar
\end_layout

\begin_layout Subsubsection
main-program
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include "Dice.h"
\end_layout

\begin_layout Plain Layout

#include "Dice_LCD.h"
\end_layout

\begin_layout Plain Layout

#include "Dice_LEDS.h"
\end_layout

\begin_layout Plain Layout

#include "UsedLibraries
\backslash
io_di.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	io_di button;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Dice dice1, dice2;
\end_layout

\begin_layout Plain Layout

	DiceLCD diceLcd;
\end_layout

\begin_layout Plain Layout

	DiceLEDS diceLeds = {0x08, 0x82, 0x52, 0xC6, 0xD6, 0xEE};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	io_di_init(&button, &PORTA, 0x01);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	dice_init(&dice1);
\end_layout

\begin_layout Plain Layout

	dice_init(&dice2);
\end_layout

\begin_layout Plain Layout

	diceLEDS_init(&diceLeds);
\end_layout

\begin_layout Plain Layout

	DiceLCD_init(&diceLcd);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		char ioButton = io_di_read(&button);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		if(!ioButton)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			dice_throw(&dice1);
\end_layout

\begin_layout Plain Layout

			dice_throw(&dice2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			diceLEDS_display(&diceLeds, &dice1);
\end_layout

\begin_layout Plain Layout

			DiceLCD_display(&diceLcd, &dice1, &dice2);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.2 - main.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Dice-struct
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef DICE_H_
\end_layout

\begin_layout Plain Layout

#define DICE_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

	int value;
\end_layout

\begin_layout Plain Layout

} Dice;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void dice_init(Dice*);
\end_layout

\begin_layout Plain Layout

int dice_value(Dice*);
\end_layout

\begin_layout Plain Layout

void dice_throw(Dice*);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* DICE_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.2 - Dice.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include "Dice.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define DICE_MAX 6
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void dice_init(Dice* d)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	d->value = 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void dice_throw(Dice* d)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	d->value = rand() % DICE_MAX + 1;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int dice_value(Dice* d)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	return d->value;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.2 - Dice.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Dice_LCD-struct
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef DICE_LCD_H_
\end_layout

\begin_layout Plain Layout

#define DICE_LCD_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <util/delay.h>
\end_layout

\begin_layout Plain Layout

#include "UsedLibraries
\backslash
lcd4.h"
\end_layout

\begin_layout Plain Layout

#include "Dice.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char s[20];
\end_layout

\begin_layout Plain Layout

	lcd4 lcdDisplay;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

} DiceLCD;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void diceLCD_init(DiceLCD*);
\end_layout

\begin_layout Plain Layout

void diceLCD_display(DiceLCD*, Dice*, Dice*);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* DICE_LCD_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.2 - Dice_LCD.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include "Dice_LCD.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void DiceLCD_init(DiceLCD* dlcd)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	lcd4_init(&dlcd->lcdDisplay, &PORTB, &DDRB, 4000, 100);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void DiceLCD_display(DiceLCD* dlcd, Dice* d1, Dice* d2)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	sprintf(dlcd->s, "Dice1 = %d", dice_value(d1));
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row1(&dlcd->lcdDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&dlcd->lcdDisplay, dlcd->s);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	sprintf(dlcd->s, "Dice2 = %d", dice_value(d2));
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row2(&dlcd->lcdDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&dlcd->lcdDisplay, dlcd->s);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.2 - Dice_LCD.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Dice_LEDS-struct
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef DICE_LEDS_H_
\end_layout

\begin_layout Plain Layout

#define DICE_LEDS_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include "Dice.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char leds[6];
\end_layout

\begin_layout Plain Layout

} DiceLEDS;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void diceLEDS_init(DiceLEDS*);
\end_layout

\begin_layout Plain Layout

void diceLEDS_display(DiceLEDS*, Dice*);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* DICE_LEDS_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.2 - Dice_LEDS.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include "Dice_LEDS.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

diceLEDS_init(DiceLEDS* dleds)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRD = 0xFF;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void diceLEDS_display(DiceLEDS* dleds, Dice* d)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	PORTD = 255 - dleds->leds[d->value - 1];
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.2 - Dice_LEDS.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Avläsning av spänningen från en potentiometer
\end_layout

\begin_layout Subsubsection
Main-program
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include "VoltLCD.h"
\end_layout

\begin_layout Plain Layout

#include "Potentiometer.h"
\end_layout

\begin_layout Plain Layout

#include "io_ai.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define FIVE_VOLT_TIME 1000
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRD = 0xFF;
\end_layout

\begin_layout Plain Layout

	io_ai InVolt;
\end_layout

\begin_layout Plain Layout

	io_ai_init(&InVolt, IO_AI_CHANNEL0, 0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	VoltLCD vLcd;
\end_layout

\begin_layout Plain Layout

	Potentiometer potentioMeter;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	voltLCD_init(&vLcd);
\end_layout

\begin_layout Plain Layout

	potentiometer_init(&potentioMeter);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		potentiometer_setvolts(&potentioMeter, io_ai_read(&InVolt));
\end_layout

\begin_layout Plain Layout

		voltLCD_display(&vLcd, potentiometer_getvolts(&potentioMeter));
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.3 - main.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Potentiometer-struct
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef POTENTIOMETER_H_
\end_layout

\begin_layout Plain Layout

#define POTENTIOMETER_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int volts;
\end_layout

\begin_layout Plain Layout

} Potentiometer;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void potentiometer_init(Potentiometer*);
\end_layout

\begin_layout Plain Layout

int potentiometer_getvolts(Potentiometer*);
\end_layout

\begin_layout Plain Layout

void potentiometer_setvolts(Potentiometer*, int);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* POTENTIOMETER_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.3 - Potentiometer.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include "Potentiometer.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void potentiometer_init(Potentiometer* pm)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	pm->volts = 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int potentiometer_getvolts(Potentiometer* pm)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	return pm->volts;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void potentiometer_setvolts(Potentiometer* pm, int volts)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	pm->volts = volts / 200;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.3 - Potentiometer.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
LCD-struct
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef VOLTLCD_H_
\end_layout

\begin_layout Plain Layout

#define VOLTLCD_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <util/delay.h>
\end_layout

\begin_layout Plain Layout

#include "lcd4.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char s[20];
\end_layout

\begin_layout Plain Layout

	lcd4 lcdDisplay;
\end_layout

\begin_layout Plain Layout

} VoltLCD;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void voltLCD_init(VoltLCD*);
\end_layout

\begin_layout Plain Layout

void voltLCD_display(VoltLCD*, long);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* VOLTLCD_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.3 - VoltLCD.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include "VoltLCD.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void voltLCD_init(VoltLCD* vlcd)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	lcd4_init(&vlcd->lcdDisplay, &PORTB, &DDRB, 4000, 100);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void voltLCD_display(VoltLCD* vlcd, long volts)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	sprintf(vlcd->s, "U = %d  ", volts);
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row1(&vlcd->lcdDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&vlcd->lcdDisplay, vlcd->s);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.3 - VoltLCD.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Styrning av ringräknarens blinkhastighet med hjälp av en potentiometer
\end_layout

\begin_layout Standard
Enda skillnaden med denna uppgift gentemot det föregående är main.c-filen
 som genom en påbyggnad har fått en funktion som är en ringräknare.
 Header-filerna som används är också från föregående uppgift.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include "VoltLCD.h"
\end_layout

\begin_layout Plain Layout

#include "Potentiometer.h"
\end_layout

\begin_layout Plain Layout

#include "io_ai.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define FIVE_VOLT_TIME 1000
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int RingCounter(int, char*, Potentiometer);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRD = 0xFF;
\end_layout

\begin_layout Plain Layout

	io_ai InVolt;
\end_layout

\begin_layout Plain Layout

	io_ai_init(&InVolt, IO_AI_CHANNEL0, 0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	VoltLCD vLcd;
\end_layout

\begin_layout Plain Layout

	Potentiometer potentioMeter;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	voltLCD_init(&vLcd);
\end_layout

\begin_layout Plain Layout

	potentiometer_init(&potentioMeter);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	char leds[8] = 
\end_layout

\begin_layout Plain Layout

	{0x01, 0x02, 0x04, 0x08,
\end_layout

\begin_layout Plain Layout

	0x10, 0x20, 0x40, 0x80};
\end_layout

\begin_layout Plain Layout

	int i = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		potentiometer_setvolts(&potentioMeter, io_ai_read(&InVolt));
\end_layout

\begin_layout Plain Layout

		voltLCD_display(&vLcd, potentiometer_getvolts(&potentioMeter));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		i = RingCounter(i, leds, potentioMeter);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int RingCounter(int i, char* leds, Potentiometer potentioMeter)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	i++;
\end_layout

\begin_layout Plain Layout

	i = i & 0x07;
\end_layout

\begin_layout Plain Layout

	PORTD = ~leds[i];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	int time = FIVE_VOLT_TIME - (potentiometer_getvolts(&potentioMeter) * 200);
\end_layout

\begin_layout Plain Layout

	time = time > 0 ? wait_milliseconds(time) : wait_milliseconds(1);
\end_layout

\begin_layout Plain Layout

	return i;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.4 - main.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Temperatursensor SMT160 med PWM-utgång
\end_layout

\begin_layout Subsubsection
main-program
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include "lcd4.h"
\end_layout

\begin_layout Plain Layout

#include "sensorSMT160.h"
\end_layout

\begin_layout Plain Layout

#include "SMTLCD.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define BIT7 0x80
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	SMTLCD theDisplay;
\end_layout

\begin_layout Plain Layout

	SensorSMT160 theTemperature;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	SMTLCD_init(&theDisplay);
\end_layout

\begin_layout Plain Layout

	sensorSMT160_init(&theTemperature, &PINB, BIT7);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    while (1) 
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

		sensorSMT160_read(&theTemperature);
\end_layout

\begin_layout Plain Layout

		SMTLCD_display(&theDisplay, &theTemperature);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.5 - main.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Sensor SMT160-struct
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef SENSORSMT160_H_
\end_layout

\begin_layout Plain Layout

#define SENSORSMT160_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int value;
\end_layout

\begin_layout Plain Layout

	unsigned char* pin;
\end_layout

\begin_layout Plain Layout

	unsigned char bit_mask;
\end_layout

\begin_layout Plain Layout

} SensorSMT160;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void sensorSMT160_init(SensorSMT160*, char*, char);
\end_layout

\begin_layout Plain Layout

float sensorSMT160_read(SensorSMT160*);
\end_layout

\begin_layout Plain Layout

unsigned int sensor_smt160_sample(volatile unsigned char* pin, 
\end_layout

\begin_layout Plain Layout

									unsigned char bit_mask, 
\end_layout

\begin_layout Plain Layout

										unsigned int);
\end_layout

\begin_layout Plain Layout

void sensorSMT160_testSignalChange();
\end_layout

\begin_layout Plain Layout

void sensorSMT160_testSignalFrequency();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* SENSORSMT160_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.5 - SensorSMT160.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include "sensorSMT160.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void sensorSMT160_init(SensorSMT160* smt, char* pin, char bit_mask)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	smt->pin = pin;
\end_layout

\begin_layout Plain Layout

	smt->bit_mask = bit_mask;
\end_layout

\begin_layout Plain Layout

	smt->value = 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

float sensorSMT160_read(SensorSMT160* smt)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	unsigned int n = 50000;
\end_layout

\begin_layout Plain Layout

	unsigned int ones = sensor_smt160_sample(smt->pin, smt->bit_mask, n);
\end_layout

\begin_layout Plain Layout

	float dc = (float) ones / (float) n;
\end_layout

\begin_layout Plain Layout

	float temp = (dc - 0.32) / 0.00470;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	smt->value =  temp;
\end_layout

\begin_layout Plain Layout

	return temp;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

__attribute__((noinline))
\end_layout

\begin_layout Plain Layout

unsigned int sensor_smt160_sample(
\end_layout

\begin_layout Plain Layout

volatile unsigned char* pin, //Register R25:R24
\end_layout

\begin_layout Plain Layout

unsigned char bit_mask, //Register R22
\end_layout

\begin_layout Plain Layout

unsigned int n //Register R21:R20
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	asm volatile (
\end_layout

\begin_layout Plain Layout

	" movw r30, r24 " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" movw r26, r20 " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" ldi r24, 0x00 " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" ldi r25, 0x00 " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" ldi r19, 0xff " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" ldi r20, 0x00 " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	"loop: " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" ld r18, Z " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" and r18, r22 " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" add r18, r19 " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" adc r24, r20 " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" adc r25, r20 " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" sbiw r26, 0x01 " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" brne loop " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	" ret " "
\backslash
n
\backslash
t"
\end_layout

\begin_layout Plain Layout

	);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void sensorSMT160_testSignalChange()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	/* Test that there's a sensorsignal on the digital input.
\end_layout

\begin_layout Plain Layout

	If signal is constant for a period of time ie 10 ms,
\end_layout

\begin_layout Plain Layout

	then its something wrong on the sensor */
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void sensorSMT160_testSignalFrequency()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	/* The frequency on the signal from the sensor shall be in the
\end_layout

\begin_layout Plain Layout

	interval of 1-4 kHz.
 If it's not then there's probably sensorfault.
\end_layout

\begin_layout Plain Layout

	Tests if the frequency on the sensorsignal is in a given interval.
 */
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.5 - SensorSMT160.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
LCD-struct
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef SMTLCD_H_
\end_layout

\begin_layout Plain Layout

#define SMTLCD_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <util/delay.h>
\end_layout

\begin_layout Plain Layout

#include "lcd4.h"
\end_layout

\begin_layout Plain Layout

#include "sensorSMT160.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char s[20];
\end_layout

\begin_layout Plain Layout

	lcd4 lcdDisplay;
\end_layout

\begin_layout Plain Layout

} SMTLCD;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void SMTLCD_init(SMTLCD*);
\end_layout

\begin_layout Plain Layout

void SMTLCD_display(SMTLCD*, SensorSMT160*);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* SMTLCD_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.5 - SMTLcd.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include "sensorSMT160.h"
\end_layout

\begin_layout Plain Layout

#include "SMTLCD.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void SMTLCD_init(SMTLCD* smtLcd)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	lcd4_init(&smtLcd->lcdDisplay, &PORTB, &DDRB, 4000, 100);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void SMTLCD_display(SMTLCD* smtLcd, SensorSMT160* smt)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	sprintf(smtLcd->s, "Temperature:");
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row1(&smtLcd->lcdDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&smtLcd->lcdDisplay, smtLcd->s);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	sprintf(smtLcd->s, "%d", smt->value);
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row2(&smtLcd->lcdDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&smtLcd->lcdDisplay, smtLcd->s);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	lcd4_write_char(&smtLcd->lcdDisplay, 0xDF);
\end_layout

\begin_layout Plain Layout

	lcd4_write_char(&smtLcd->lcdDisplay, 'C');
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.5 - SMTLcd.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Öka/Minska-knappar med acceleration
\end_layout

\begin_layout Subsubsection
Main-program
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include "Accelerator.h"
\end_layout

\begin_layout Plain Layout

#include "AccLCD.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char increasebutton_read();
\end_layout

\begin_layout Plain Layout

char decreasebutton_read();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	AccLCD display;
\end_layout

\begin_layout Plain Layout

	Accelerator acc;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	AccLCD_init(&display);
\end_layout

\begin_layout Plain Layout

	accelerator_init(&acc);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		char increaseButton = increasebutton_read();
\end_layout

\begin_layout Plain Layout

		char decreaseButton = decreasebutton_read();
\end_layout

\begin_layout Plain Layout

		switch(countingState)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			case IDLE:
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				accelerator_idle(&acc, increaseButton, decreaseButton);
\end_layout

\begin_layout Plain Layout

			} break;
\end_layout

\begin_layout Plain Layout

			case INCREMENT:
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				accelerator_increment(&acc, increaseButton);
\end_layout

\begin_layout Plain Layout

			} break;
\end_layout

\begin_layout Plain Layout

			case DECREASE:
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				accelerator_decrease(&acc, decreaseButton);
\end_layout

\begin_layout Plain Layout

			} break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		AccLCD_display(&display, &acc);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char increasebutton_read()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	return (!(PINA & 0x01));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char decreasebutton_read()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	return (!(PINA & 0x02));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.6 - main.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Accelerator-struct
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef ACCELERATOR_H_
\end_layout

\begin_layout Plain Layout

#define ACCELERATOR_H_
\end_layout

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

enum Counting {
\end_layout

\begin_layout Plain Layout

	INCREMENT,
\end_layout

\begin_layout Plain Layout

	DECREASE,
\end_layout

\begin_layout Plain Layout

	IDLE
\end_layout

\begin_layout Plain Layout

} countingState;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct  
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int value;
\end_layout

\begin_layout Plain Layout

	int counter;
\end_layout

\begin_layout Plain Layout

	int accelerationStart;
\end_layout

\begin_layout Plain Layout

	unsigned char button;
\end_layout

\begin_layout Plain Layout

} Accelerator;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void accelerator_init(Accelerator*);
\end_layout

\begin_layout Plain Layout

void accelerator_increment(Accelerator*, char);
\end_layout

\begin_layout Plain Layout

void accelerator_decrease(Accelerator*, char);
\end_layout

\begin_layout Plain Layout

void accelerator_delay(Accelerator*, char);
\end_layout

\begin_layout Plain Layout

void accelerator_idle(Accelerator*, char, char);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* ACCELERATOR_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.6 - Accelerator.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include "Accelerator.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

wait_milliseconds(int);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void accelerator_init(Accelerator* acc)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DDRA = 0x00;
\end_layout

\begin_layout Plain Layout

	countingState = IDLE;
\end_layout

\begin_layout Plain Layout

	acc->value = 0;
\end_layout

\begin_layout Plain Layout

	acc->counter = 0;
\end_layout

\begin_layout Plain Layout

	acc->accelerationStart = 2;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void accelerator_increment(Accelerator* acc, char button)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	acc->value++;
\end_layout

\begin_layout Plain Layout

	accelerator_delay(acc, button);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void accelerator_decrease(Accelerator* acc, char button)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	acc->value--;
\end_layout

\begin_layout Plain Layout

	accelerator_delay(acc, button);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void accelerator_delay(Accelerator* acc, char button)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if(button && acc->counter > acc->accelerationStart)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		wait_milliseconds(100);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	else if(button && acc->counter <= acc->accelerationStart)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		wait_milliseconds(1000);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		countingState = IDLE;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	acc->counter++;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void accelerator_idle(Accelerator* acc,
\end_layout

\begin_layout Plain Layout

char increaseButton, char decreaseButton)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if(increaseButton)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		countingState = INCREMENT;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	else if(decreaseButton)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		countingState = DECREASE;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	acc->counter = 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.6 - Accelerator.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
LCD-struct
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef ACCLCD_H_
\end_layout

\begin_layout Plain Layout

#define ACCLCD_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <util/delay.h>
\end_layout

\begin_layout Plain Layout

#include "lcd4.h"
\end_layout

\begin_layout Plain Layout

#include "Accelerator.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char s[20];
\end_layout

\begin_layout Plain Layout

	lcd4 lcdDisplay;
\end_layout

\begin_layout Plain Layout

} AccLCD;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void AccLCD_init(AccLCD*);
\end_layout

\begin_layout Plain Layout

void AccLCD_display(AccLCD*, Accelerator*);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* ACCLCD_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.6 - AccLCD.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include "AccLCD.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void AccLCD_init(AccLCD* accLcd)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	lcd4_init(&accLcd->lcdDisplay, &PORTB, &DDRB, 4000, 100);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void AccLCD_display(AccLCD* accLcd, Accelerator* acc)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	sprintf(accLcd->s, "Value = %d    ", acc->value);
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row1(&accLcd->lcdDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&accLcd->lcdDisplay, accLcd->s);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.6 - AccLCD.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Morse-kodlås
\end_layout

\begin_layout Standard
I denna uppgift konstruerades en morse-kodlås som har två tillståndsmaskiner.
 Den ena sköter om inmatning och den andra sköter om kodlåset.
\end_layout

\begin_layout Subsubsection
Main-program
\end_layout

\begin_layout Standard
Ursäkta för koden i main, som inte har genomgått någon större refaktorisering.
 Ett försök att paketera in koderna i sina egna klasser gjordes men resultatet
 blev inte som förväntat.
 Eftersom det tar tid att implementera så kommer det att utföras vid ett
 senare tillfälle.
 Just nu innehåller filen båda tillståndsmaskinerna.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include "MorseLCD.h"
\end_layout

\begin_layout Plain Layout

#include "Morse.h"
\end_layout

\begin_layout Plain Layout

#include "time.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void MorseLock();
\end_layout

\begin_layout Plain Layout

void MorseInput();
\end_layout

\begin_layout Plain Layout

char MorseResetCheck(char, unsigned, const unsigned, Morse);
\end_layout

\begin_layout Plain Layout

void wait_milliseconds(int);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	MorseLCD morseLcd;
\end_layout

\begin_layout Plain Layout

	morseLCD_init(&morseLcd);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Morse morse;
\end_layout

\begin_layout Plain Layout

	morse_init(&morse);
\end_layout

\begin_layout Plain Layout

	morse_reset(&morse);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	char code_count = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	unsigned tick_counter = 0;
\end_layout

\begin_layout Plain Layout

	const unsigned tick = 10;
\end_layout

\begin_layout Plain Layout

	unsigned reset_counter = 0;
\end_layout

\begin_layout Plain Layout

	const unsigned reset_morse = 20;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	char const access_code = 5;		// Passcode
\end_layout

\begin_layout Plain Layout

	char attempted_codes[6];
\end_layout

\begin_layout Plain Layout

	const int lock_timeout = 20;
\end_layout

\begin_layout Plain Layout

	int timeout_counter = 0;
\end_layout

\begin_layout Plain Layout

	LockState = LOCKED;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		MorseInput();	
\end_layout

\begin_layout Plain Layout

		MorseLock();
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		// Resets LCD-display after 20 ticks
\end_layout

\begin_layout Plain Layout

		code_count = MorseResetCheck(code_count, reset_counter, 
\end_layout

\begin_layout Plain Layout

									 reset_morse, morse);	
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char MorseResetCheck(
\end_layout

\begin_layout Plain Layout

char code_count, 
\end_layout

\begin_layout Plain Layout

unsigned reset_counter, 
\end_layout

\begin_layout Plain Layout

const unsigned reset_morse, 
\end_layout

\begin_layout Plain Layout

Morse morse)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (code_count == 5 || reset_counter > reset_morse)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		code_count = 0;
\end_layout

\begin_layout Plain Layout

		wait_milliseconds(1000);
\end_layout

\begin_layout Plain Layout

		morse_reset(&morse);
\end_layout

\begin_layout Plain Layout

	}		return code_count;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.7 - main.c del I
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void MorseLock()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch(LockState)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case LOCKED:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			morse_value(&morse);
\end_layout

\begin_layout Plain Layout

			attempted_codes[code_count] = morse.value;
\end_layout

\begin_layout Plain Layout

			if(code_count == 5 &&
\end_layout

\begin_layout Plain Layout

			attempted_codes[code_count] == access_code)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				LockState = UNLOCKED;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			morseLCD_displaylock(&morseLcd, &morse, 0);
\end_layout

\begin_layout Plain Layout

		} break;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		case UNLOCKED:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			if(timeout_counter > lock_timeout)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				LockState = LOCKED;
\end_layout

\begin_layout Plain Layout

				timeout_counter = 0;
\end_layout

\begin_layout Plain Layout

				code_count = 0;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			timeout_counter++;
\end_layout

\begin_layout Plain Layout

			morseLCD_displaylock(&morseLcd, &morse, 1);
\end_layout

\begin_layout Plain Layout

		} break;
\end_layout

\begin_layout Plain Layout

	} //switch(LockState)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void MorseInput()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char button = (!(PINA & 0x01));
\end_layout

\begin_layout Plain Layout

	switch ( ButtonState )
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case IDLE:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			tick_counter = 0;
\end_layout

\begin_layout Plain Layout

			reset_counter++;
\end_layout

\begin_layout Plain Layout

			if(button)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				ButtonState = PUSHED;
\end_layout

\begin_layout Plain Layout

				reset_counter = 0;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} break;
\end_layout

\begin_layout Plain Layout

		case PUSHED:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			tick_counter++;
\end_layout

\begin_layout Plain Layout

			if(!button)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				if(tick_counter < tick)
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					morse_short(&morse, code_count);
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

				if(tick_counter > tick)
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					morse_long(&morse, code_count);
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

				code_count++;
\end_layout

\begin_layout Plain Layout

				ButtonState = IDLE;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} break;
\end_layout

\begin_layout Plain Layout

	} // switch(ButtonState)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.7 - main.c del II
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Morse-struct
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef MORSE_H_
\end_layout

\begin_layout Plain Layout

#define MORSE_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

enum
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	IDLE,
\end_layout

\begin_layout Plain Layout

	PUSHED
\end_layout

\begin_layout Plain Layout

} ButtonState;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

enum
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	UNLOCKED,
\end_layout

\begin_layout Plain Layout

	LOCKED
\end_layout

\begin_layout Plain Layout

} LockState;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef	struct  
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int value;
\end_layout

\begin_layout Plain Layout

	char code[6];
\end_layout

\begin_layout Plain Layout

} Morse;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void morse_init(Morse* m);
\end_layout

\begin_layout Plain Layout

void morse_reset(Morse* m);
\end_layout

\begin_layout Plain Layout

void morse_long(Morse* m, int);
\end_layout

\begin_layout Plain Layout

void morse_short(Morse* m, int);
\end_layout

\begin_layout Plain Layout

void morse_value(Morse* m);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* MORSE_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.7 - Morse.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include "Morse.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const char morse_codes[10][6] =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	"_____", //0
\end_layout

\begin_layout Plain Layout

	".____", //1
\end_layout

\begin_layout Plain Layout

	"..___", //2
\end_layout

\begin_layout Plain Layout

	"...__", //3
\end_layout

\begin_layout Plain Layout

	"...._", //4
\end_layout

\begin_layout Plain Layout

	".....", //5
\end_layout

\begin_layout Plain Layout

	"_....", //6
\end_layout

\begin_layout Plain Layout

	"__...", //7
\end_layout

\begin_layout Plain Layout

	"___..", //8
\end_layout

\begin_layout Plain Layout

	"____."  //9
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

morse_init(Morse* m)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	m->value = 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void morse_reset(Morse* m)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	for (int i=0; i<7; i++)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		m->code[i]=' ';
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void morse_long(Morse* m, int code_count)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	m->code[code_count]='_';
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void morse_short(Morse* m, int code_count)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	m->code[code_count]='.';
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void morse_value(Morse* m)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	volatile int index = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for (int i = 0; i <= 10; i++)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		m->code[5]=0;
\end_layout

\begin_layout Plain Layout

		if(strcmp(morse_codes[i], m->code) == 0)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			m->value = i; break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.7 - Morse.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
LCD-struct
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#ifndef MORSELCD_H_
\end_layout

\begin_layout Plain Layout

#define MORSELCD_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <util/delay.h>
\end_layout

\begin_layout Plain Layout

#include "lcd4.h"
\end_layout

\begin_layout Plain Layout

#include "Morse.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char s[20];
\end_layout

\begin_layout Plain Layout

	lcd4 lcdDisplay;
\end_layout

\begin_layout Plain Layout

} MorseLCD;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void morseLCD_init(MorseLCD*);
\end_layout

\begin_layout Plain Layout

void morseLCD_display(MorseLCD*, Morse* m);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* MORSELCD_H_ */
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.7 - MorseLCD.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#include "MorseLCD.h"
\end_layout

\begin_layout Plain Layout

#include "Morse.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void morseLCD_init(MorseLCD* mlcd)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	lcd4_init(&mlcd->lcdDisplay, &PORTB, &DDRB, 700, 50);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void morseLCD_display(MorseLCD* mlcd, Morse* m)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	m->code[7] = 0;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	sprintf(mlcd->s, "Morse: %s", m->code);
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row1(&mlcd->lcdDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&mlcd->lcdDisplay, mlcd->s);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	sprintf(mlcd->s, "Value: %d", m->value);
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row2(&mlcd->lcdDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&mlcd->lcdDisplay, mlcd->s);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void morseLCD_displaylock(MorseLCD* mlcd, Morse* m, int locked)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	m->code[7] = 0;
\end_layout

\begin_layout Plain Layout

	sprintf(mlcd->s, "Morse: %s", m->code);
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row1(&mlcd->lcdDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&mlcd->lcdDisplay, mlcd->s);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	char *s;
\end_layout

\begin_layout Plain Layout

	if(locked)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		s = "UNLOCKED";
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		s = "LOCKED  ";
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	char buf[1024];
\end_layout

\begin_layout Plain Layout

	memset(buf,0,sizeof buf);
\end_layout

\begin_layout Plain Layout

	strncpy(buf,s,(sizeof buf)-1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	sprintf(mlcd->s, "%s", s);
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row2(&mlcd->lcdDisplay);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&mlcd->lcdDisplay, s);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
4.7 - MorseLCD.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Laboration 5: Objektorienterad modellering och avbrottshantering
\end_layout

\begin_layout Standard
Denna labb är skriven i C++ jämfört med alla andra labbar innan denna som
 blev skriven i mestadels C och assembler.
\end_layout

\begin_layout Subsection
Räkning av pulser med en avbrottsrutin
\end_layout

\begin_layout Standard
Detta program räknar upp ett värde till 10 och slår sedan om igen till 0.
 Ökning av värdet kan 
\end_layout

\begin_layout Standard
MCUCR-registret programmeras enligt följande aktivera INT0: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

GICR = 1<<INT0;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Och för att avbrott ska genereras på positiv flank:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MCUCR = 1<<ISC01 | 1<<ISC00;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Funktionen som initierar avbrotts-möjlighet ges utav:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sei();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
För att säkerställa att main-funktionen inte kan bli avbruten vid ett visst
 tillfälle skriver vi in: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

asm("CLI"); /* Atomär kodrad */ asm("SEI");
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Detta säkerställer att läsningen av värdet inte kan bli avbruten.
\end_layout

\begin_layout Subsubsection
main-program
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={C++}"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include <avr/interrupt.h>
\end_layout

\begin_layout Plain Layout

#include <util/delay.h>
\end_layout

\begin_layout Plain Layout

#include "lcd4.h"
\end_layout

\begin_layout Plain Layout

#include "Counter.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Counter counter(0, 10);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ISR(INT0_vect)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	counter.Increment();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	GICR = 1<<INT0;
\end_layout

\begin_layout Plain Layout

	MCUCR = 1<<ISC01 | 1<<ISC00;
\end_layout

\begin_layout Plain Layout

	sei();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		asm("CLI");
\end_layout

\begin_layout Plain Layout

		counter.DisplayLCD();
\end_layout

\begin_layout Plain Layout

		asm("SEI");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		_delay_ms(2000);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
5.1 - main.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Counter-klass
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={C++}"
inline false
status open

\begin_layout Plain Layout

#pragma once
\end_layout

\begin_layout Plain Layout

#include "lcd4.h"
\end_layout

\begin_layout Plain Layout

#include "stdio.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Counter
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int min, max;
\end_layout

\begin_layout Plain Layout

	int value;
\end_layout

\begin_layout Plain Layout

	lcd4 lcd;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

	Counter();
\end_layout

\begin_layout Plain Layout

	Counter(int min, int max);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	int Increment();
\end_layout

\begin_layout Plain Layout

	int Decrement();
\end_layout

\begin_layout Plain Layout

	int GetValue();
\end_layout

\begin_layout Plain Layout

	void DisplayLCD();
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
5.1 - Counter.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={C++}"
inline false
status open

\begin_layout Plain Layout

#pragma once
\end_layout

\begin_layout Plain Layout

#include "Counter.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Counter::Counter(){}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Counter::Counter(int min, int max)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	this->max = max;
\end_layout

\begin_layout Plain Layout

	this->min = min;
\end_layout

\begin_layout Plain Layout

	value = 0;
\end_layout

\begin_layout Plain Layout

	lcd4_init(&this->lcd, &PORTB, &DDRB, 700, 50);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int Counter::Increment()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if(value > max)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		value = min;
\end_layout

\begin_layout Plain Layout

		return 1;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		value++;
\end_layout

\begin_layout Plain Layout

		return 0;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int Counter::Decrement()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	value--;
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int Counter::GetValue()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	return value;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void Counter::DisplayLCD()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char s[20];
\end_layout

\begin_layout Plain Layout

	sprintf(s, "Value: %d    ", this->value);
\end_layout

\begin_layout Plain Layout

	lcd4_cup_row1(&this->lcd);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&this->lcd, s);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
5.1 - Counter.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Elektronisk klocka
\end_layout

\begin_layout Standard
I denna uppgift skulle en elektronisk klocka realiseras genom avbrott.
 Problemet löstes genom att skapa en Clock-klass som innehåller 3 Counter-klasse
r.
 En ClockLCD-klass som visar värden av Clock på en LCD-display som visar
 klockan i formatet - hh:mm:ss.
\end_layout

\begin_layout Subsubsection
main-program
\end_layout

\begin_layout Standard
Avbrotten kollar om TIMER0 har fått en overflow, och incrementerar då en
 Counter-klass, tick, som har max-värdet 30 som är antalet overflows som
 krävs för att en sekund ska passera.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={C++}"
inline false
status open

\begin_layout Plain Layout

#include <avr/io.h>
\end_layout

\begin_layout Plain Layout

#include <avr/interrupt.h>
\end_layout

\begin_layout Plain Layout

#include <util/delay.h>
\end_layout

\begin_layout Plain Layout

#include "lcd4.h"
\end_layout

\begin_layout Plain Layout

#include "Counter.h"
\end_layout

\begin_layout Plain Layout

#include "ClockLCD.h"
\end_layout

\begin_layout Plain Layout

#include "Clock.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Clock clock;
\end_layout

\begin_layout Plain Layout

Counter tick(0, 30);	// 30 Overflows ~= 1 second
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ISR(TIMER0_OVF_vect)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if(tick.Increment())
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		clock.UpdateClock();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ClockLCD lcd;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	TCCR0|=(1<<CS02)|(1<<CS00);
\end_layout

\begin_layout Plain Layout

	// 8000000/1024 = 7812.5 Hz
\end_layout

\begin_layout Plain Layout

	// Counting to 255 will take 7812.5 / 255 = 30.6...
 s
\end_layout

\begin_layout Plain Layout

	// One second will take ~30 overflows
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	TIMSK|=(1<<TOIE0);	//Enable Overflow Interrupt
\end_layout

\begin_layout Plain Layout

	TCNT0=0;			//Initialize Counter
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	sei();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		asm("CLI");
\end_layout

\begin_layout Plain Layout

		lcd.DisplayClock(
\end_layout

\begin_layout Plain Layout

		clock.hours.GetValue(),
\end_layout

\begin_layout Plain Layout

		clock.minutes.GetValue(),
\end_layout

\begin_layout Plain Layout

		clock.seconds.GetValue()
\end_layout

\begin_layout Plain Layout

		);
\end_layout

\begin_layout Plain Layout

		asm("SEI");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
5.2 - main.c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Clock-klass
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={C++}"
inline false
status open

\begin_layout Plain Layout

#include "Counter.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Clock 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

	Counter hours, minutes, seconds;
\end_layout

\begin_layout Plain Layout

	Clock();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	void UpdateClock();
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
5.2 - Clock.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={C++}"
inline false
status open

\begin_layout Plain Layout

#include "Clock.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Clock::Clock()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	this->hours = Counter(0, 23);
\end_layout

\begin_layout Plain Layout

	this->minutes = Counter(0, 59);
\end_layout

\begin_layout Plain Layout

	this->seconds = Counter(0, 59);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void Clock::UpdateClock()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

		if(this->seconds.GetValue() < this->seconds.GetMax())
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			this->seconds.Increment();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else if (this->minutes.GetValue() < this->minutes.GetMax())
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			this->seconds.Increment();	// reset
\end_layout

\begin_layout Plain Layout

			this->minutes.Increment();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else if(this->hours.GetValue() <= this->hours.GetMax())
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			this->seconds.Increment();	// reset
\end_layout

\begin_layout Plain Layout

			this->minutes.Increment();	// reset
\end_layout

\begin_layout Plain Layout

			this->hours.Increment();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
5.2 - Clock.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
ClockLCD-klass
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={C++}"
inline false
status open

\begin_layout Plain Layout

#pragma once
\end_layout

\begin_layout Plain Layout

#include "lcd4.h"
\end_layout

\begin_layout Plain Layout

#include "stdio.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class ClockLCD
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	lcd4 lcd;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public:
\end_layout

\begin_layout Plain Layout

	ClockLCD();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	void DisplayClock(int hours, int minutes, int seconds);
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
5.2 - ClockLCD.h
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={C++}"
inline false
status open

\begin_layout Plain Layout

#include "ClockLCD.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ClockLCD::ClockLCD() 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	lcd4_init(&this->lcd, &PORTB, &DDRB, 700, 50);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ClockLCD::DisplayClock(int hours, int minutes, int seconds)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char s[20];
\end_layout

\begin_layout Plain Layout

	sprintf(s, "%d:%d:%d   ", hours, minutes, seconds);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	lcd4_cup_row1(&this->lcd);
\end_layout

\begin_layout Plain Layout

	lcd4_write_string(&this->lcd, s);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
5.2 - Clock.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
