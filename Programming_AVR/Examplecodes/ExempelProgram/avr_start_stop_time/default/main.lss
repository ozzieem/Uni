
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001a0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000085  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  0000034d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000008e  00000000  00000000  00000361  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  8a:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sw7run>:
		.global	sw7run

sw7run:
		;; R20 new sw7 value
		;; R21 old sw7 value
		LDI		R20,0
  92:	40 e0       	ldi	r20, 0x00	; 0
		SBIC	PINA,7	;OBS 7
  94:	cf 99       	sbic	0x19, 7	; 25
		LDI		R20,1
  96:	41 e0       	ldi	r20, 0x01	; 1
			
		LDS		R21,oldSw7
  98:	50 91 60 00 	lds	r21, 0x0060
		STS		oldSw7,R20
  9c:	40 93 60 00 	sts	0x0060, r20

		LDI		R22,0b00000001 ;Negative flanc
  a0:	61 e0       	ldi	r22, 0x01	; 1
		EOR		R20,R22
  a2:	46 27       	eor	r20, r22

		AND		R20,R21
  a4:	45 23       	and	r20, r21
		BREQ	sw7runEnd				;Hopp om Z=1
  a6:	19 f0       	breq	.+6      	; 0xae <sw7runEnd>

		;; flagCount=0;
		CLR		R20
  a8:	44 27       	eor	r20, r20
		STS		flagCount, R20
  aa:	40 93 62 00 	sts	0x0062, r20

000000ae <sw7runEnd>:
sw7runEnd:				
		RET
  ae:	08 95       	ret

000000b0 <sw0run>:
		.global	sw7run

sw0run:
		;; R20 new sw0 value
		;; R21 old sw0 value
		LDI		R20,0
  b0:	40 e0       	ldi	r20, 0x00	; 0
		SBIC	PINA,0		;OBS 0
  b2:	c8 99       	sbic	0x19, 0	; 25
		LDI		R20,1
  b4:	41 e0       	ldi	r20, 0x01	; 1
			
		LDS		R21,oldSw0
  b6:	50 91 61 00 	lds	r21, 0x0061
		STS		oldSw0,R20
  ba:	40 93 61 00 	sts	0x0061, r20

		LDI		R22,0b00000001 ;Negative flanc
  be:	61 e0       	ldi	r22, 0x01	; 1
		EOR		R20,R22
  c0:	46 27       	eor	r20, r22

		AND		R20,R21
  c2:	45 23       	and	r20, r21
		BREQ	sw0runEnd				;Hopp om Z=1
  c4:	41 f0       	breq	.+16     	; 0xd6 <sw0runEnd>

		;; flagCount=1;
		LDI		R20,1
  c6:	41 e0       	ldi	r20, 0x01	; 1
		STS		flagCount, R20
  c8:	40 93 62 00 	sts	0x0062, r20

		;; counter= 0;
		CLR		R20
  cc:	44 27       	eor	r20, r20
		STS		counter,R20
  ce:	40 93 63 00 	sts	0x0063, r20
		STS		counter+1,R20
  d2:	40 93 64 00 	sts	0x0064, r20

000000d6 <sw0runEnd>:

sw0runEnd:				
		RET
  d6:	08 95       	ret

000000d8 <resetRun>:

;;;===VARIANT 2===
		.text
		.global resetRun
resetRun: //Positve flanc
		LDS			R21,oldSw7	
  d8:	50 91 60 00 	lds	r21, 0x0060
		IN			R20,PINA
  dc:	49 b3       	in	r20, 0x19	; 25
		ANDI		R20,0b10000000	;SW7
  de:	40 78       	andi	r20, 0x80	; 128
		STS			oldSw7,R20
  e0:	40 93 60 00 	sts	0x0060, r20

		LDI			R22, 0b10000000
  e4:	60 e8       	ldi	r22, 0x80	; 128
		EOR			R21,R22
  e6:	56 27       	eor	r21, r22

		AND			R20,R21
  e8:	45 23       	and	r20, r21

		BREQ		resetRunEnd
  ea:	29 f0       	breq	.+10     	; 0xf6 <resetRunEnd>

		CLR		R20
  ec:	44 27       	eor	r20, r20
		STS			counter,R20
  ee:	40 93 63 00 	sts	0x0063, r20
		STS			counter+1,R20
  f2:	40 93 64 00 	sts	0x0064, r20

000000f6 <resetRunEnd>:

resetRunEnd:
		RET
  f6:	08 95       	ret

000000f8 <startStopRun>:
		;;
		;; R20 new sw0 value
		;; R21 old sw0 value

startStopRun_IfTest:
		LDI		R20,0
  f8:	40 e0       	ldi	r20, 0x00	; 0
		SBIC	PINA,0		;OBS 0
  fa:	c8 99       	sbic	0x19, 0	; 25
		LDI		R20,1
  fc:	41 e0       	ldi	r20, 0x01	; 1
			
		LDS		R21,oldSw0
  fe:	50 91 61 00 	lds	r21, 0x0061
		STS		oldSw0,R20
 102:	40 93 61 00 	sts	0x0061, r20

		LDI		R22,0b00000001 ;Negative flanc
 106:	61 e0       	ldi	r22, 0x01	; 1
		EOR		R20,R22
 108:	46 27       	eor	r20, r22

		AND		R20,R21
 10a:	45 23       	and	r20, r21
		BREQ	startStopRun_IfElse				;Hopp om Z=1
 10c:	31 f0       	breq	.+12     	; 0x11a <startStopRun_IfElse>

0000010e <startStopRun_If>:
startStopRun_If:
		;; flagCount=!flagCount;
		LDS		R20,flagCount
 10e:	40 91 62 00 	lds	r20, 0x0062
		LDI		R21,1
 112:	51 e0       	ldi	r21, 0x01	; 1
		EOR		R20,R21
 114:	45 27       	eor	r20, r21
		STS		flagCount, R20
 116:	40 93 62 00 	sts	0x0062, r20

0000011a <startStopRun_IfElse>:
		; RJMP	startStopRun_IfEnd
startStopRun_IfElse:
startStopRun_IfEnd:
		RET
 11a:	08 95       	ret

0000011c <counterRun>:



;;;===Räkning gemensamt för variant 1 och 2
counterRun:
		LDS		R20,flagCount
 11c:	40 91 62 00 	lds	r20, 0x0062
		CPI		R20,0
 120:	40 30       	cpi	r20, 0x00	; 0
		BREQ	counterRun_end
 122:	61 f0       	breq	.+24     	; 0x13c <counterRun_end>
		LDI		R20, 0b00100000
 124:	40 e2       	ldi	r20, 0x20	; 32
		CLR		R21
 126:	55 27       	eor	r21, r21
		LDS		R24,counter
 128:	80 91 63 00 	lds	r24, 0x0063
		LDS		R25,counter+1
 12c:	90 91 64 00 	lds	r25, 0x0064
		ADD		R24,R20
 130:	84 0f       	add	r24, r20
		ADC		R25,R21
 132:	95 1f       	adc	r25, r21
		STS		counter,R24
 134:	80 93 63 00 	sts	0x0063, r24
		STS		counter+1,R25
 138:	90 93 64 00 	sts	0x0064, r25

0000013c <counterRun_end>:
counterRun_end:
		RET
 13c:	08 95       	ret

0000013e <init_func>:
        .text
        .global init_func
         
init_func:
		;;DDRB=0xFF;
		LDI		R20,0xFF
 13e:	4f ef       	ldi	r20, 0xFF	; 255
		OUT		DDRB,R20
 140:	47 bb       	out	0x17, r20	; 23
        RET
 142:	08 95       	ret

00000144 <loop_func>:

loop_func:
		;CALL	sw0run		;Variant 1
		;CALL	sw7run		;Variant 2

		CALL	resetRun	;Variant 2
 144:	0e 94 6c 00 	call	0xd8	; 0xd8 <resetRun>
		CALL	startStopRun;Variant 2
 148:	0e 94 7c 00 	call	0xf8	; 0xf8 <startStopRun>
		CALL	counterRun
 14c:	0e 94 8e 00 	call	0x11c	; 0x11c <counterRun>

00000150 <loop_func_end>:

loop_func_end:
		LDS		R25,counter+1
 150:	90 91 64 00 	lds	r25, 0x0064
		COM		R25
 154:	90 95       	com	r25
		OUT		PORTB,R25
 156:	98 bb       	out	0x18, r25	; 24

        RET
 158:	08 95       	ret

0000015a <test>:
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	90 91 65 00 	lds	r25, 0x0065
 166:	80 91 66 00 	lds	r24, 0x0066
 16a:	89 17       	cp	r24, r25
 16c:	28 f4       	brcc	.+10     	; 0x178 <test+0x1e>
 16e:	80 91 65 00 	lds	r24, 0x0065
 172:	80 93 68 00 	sts	0x0068, r24
 176:	04 c0       	rjmp	.+8      	; 0x180 <test+0x26>
 178:	80 91 66 00 	lds	r24, 0x0066
 17c:	80 93 68 00 	sts	0x0068, r24
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <main>:
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	0e 94 ad 00 	call	0x15a	; 0x15a <test>
 192:	0e 94 9f 00 	call	0x13e	; 0x13e <init_func>
 196:	0e 94 a2 00 	call	0x144	; 0x144 <loop_func>
 19a:	fd cf       	rjmp	.-6      	; 0x196 <main+0x10>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
