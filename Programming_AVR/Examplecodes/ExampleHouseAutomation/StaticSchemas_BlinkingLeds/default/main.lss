
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001a3c  00001ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a5  00800090  00800090  00001b00  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  00002784  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002982  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000518  00000000  00000000  000029b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005c01  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002662  00000000  00000000  00008ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001c75  00000000  00000000  0000b133  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b54  00000000  00000000  0000cda8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e3c  00000000  00000000  0000d8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003474  00000000  00000000  0000e738  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c0  00000000  00000000  00011bac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
;;;   C-prototype:  void wait_milliseconds(int milliseconds);
;;;                 Parameter 1 is passed in registerpair R24:R25
        .global wait_milliseconds				
wait_milliseconds:
wait_milliseconds_loop:
        RCALL   wait1ms
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
        SBIW    R24,1           ;Subtract R25:R24=R25:R24-1
        BRNE    wait_milliseconds_loop
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
;;;===Subroutine wait1ms===================================
;;;   C-prototype:  void wait1ms(void);
        .global wait1ms				
wait1ms:

        RCALL    wait500microseconds
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
        RCALL    wait500microseconds
        RET
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
        ;; due to the GNU C calling conventions.
				
        
        
wait_loop:
        LD       R19,X
      10:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_4>
        LD       R19,X
        LD       R19,X
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
        LD       R19,X
        LD       R19,X
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
        LD       R19,X
        LD       R19,X
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
        LD       R19,X
        DEC     R18
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
        BRNE    wait_loop
        
        RET
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
     \param clockFrequency The frequency of the clock source for the processor.
 */
void delay_loop_init(delay_loop *this, unsigned long value, int clockFrequency )
{ 
  this->micros=value-8;
  switch ( clockFrequency )
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
    {
    case DELAY_LOOP_32MHZ:
      this->micros = this->micros*2;
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      break;
    case DELAY_LOOP_8MHZ:
      this->micros = this->micros/2;
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      break;
    case DELAY_LOOP_4MHZ:
      this->micros = this->micros/4;
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      break;
    case DELAY_LOOP_2MHZ:
      this->micros = this->micros/8;
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      break;
    case DELAY_LOOP_1MHZ:
      this->micros = this->micros/16;
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 33       	cpi	r26, 0x35	; 53
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c6 04 	call	0x98c	; 0x98c <main>
      8a:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_fpadd_parts>:
      92:	a4 e0       	ldi	r26, 0x04	; 4
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <__prologue_saves__+0x4>
      9e:	7c 01       	movw	r14, r24
      a0:	6a 01       	movw	r12, r20
      a2:	fc 01       	movw	r30, r24
      a4:	80 81       	ld	r24, Z
      a6:	82 30       	cpi	r24, 0x02	; 2
      a8:	08 f4       	brcc	.+2      	; 0xac <_fpadd_parts+0x1a>
      aa:	4a c1       	rjmp	.+660    	; 0x340 <_fpadd_parts+0x2ae>
      ac:	fb 01       	movw	r30, r22
      ae:	90 81       	ld	r25, Z
      b0:	92 30       	cpi	r25, 0x02	; 2
      b2:	08 f4       	brcc	.+2      	; 0xb6 <_fpadd_parts+0x24>
      b4:	42 c1       	rjmp	.+644    	; 0x33a <_fpadd_parts+0x2a8>
      b6:	84 30       	cpi	r24, 0x04	; 4
      b8:	79 f4       	brne	.+30     	; 0xd8 <_fpadd_parts+0x46>
      ba:	94 30       	cpi	r25, 0x04	; 4
      bc:	09 f0       	breq	.+2      	; 0xc0 <_fpadd_parts+0x2e>
      be:	40 c1       	rjmp	.+640    	; 0x340 <_fpadd_parts+0x2ae>
      c0:	f7 01       	movw	r30, r14
      c2:	91 81       	ldd	r25, Z+1	; 0x01
      c4:	fb 01       	movw	r30, r22
      c6:	81 81       	ldd	r24, Z+1	; 0x01
      c8:	98 17       	cp	r25, r24
      ca:	09 f4       	brne	.+2      	; 0xce <_fpadd_parts+0x3c>
      cc:	39 c1       	rjmp	.+626    	; 0x340 <_fpadd_parts+0x2ae>
      ce:	a0 e6       	ldi	r26, 0x60	; 96
      d0:	ea 2e       	mov	r14, r26
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	fa 2e       	mov	r15, r26
      d6:	34 c1       	rjmp	.+616    	; 0x340 <_fpadd_parts+0x2ae>
      d8:	94 30       	cpi	r25, 0x04	; 4
      da:	09 f4       	brne	.+2      	; 0xde <_fpadd_parts+0x4c>
      dc:	2e c1       	rjmp	.+604    	; 0x33a <_fpadd_parts+0x2a8>
      de:	92 30       	cpi	r25, 0x02	; 2
      e0:	91 f4       	brne	.+36     	; 0x106 <_fpadd_parts+0x74>
      e2:	82 30       	cpi	r24, 0x02	; 2
      e4:	09 f0       	breq	.+2      	; 0xe8 <_fpadd_parts+0x56>
      e6:	2c c1       	rjmp	.+600    	; 0x340 <_fpadd_parts+0x2ae>
      e8:	88 e0       	ldi	r24, 0x08	; 8
      ea:	f7 01       	movw	r30, r14
      ec:	da 01       	movw	r26, r20
      ee:	01 90       	ld	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	8a 95       	dec	r24
      f4:	e1 f7       	brne	.-8      	; 0xee <_fpadd_parts+0x5c>
      f6:	fb 01       	movw	r30, r22
      f8:	81 81       	ldd	r24, Z+1	; 0x01
      fa:	f7 01       	movw	r30, r14
      fc:	91 81       	ldd	r25, Z+1	; 0x01
      fe:	89 23       	and	r24, r25
     100:	fa 01       	movw	r30, r20
     102:	81 83       	std	Z+1, r24	; 0x01
     104:	1c c1       	rjmp	.+568    	; 0x33e <_fpadd_parts+0x2ac>
     106:	82 30       	cpi	r24, 0x02	; 2
     108:	09 f4       	brne	.+2      	; 0x10c <_fpadd_parts+0x7a>
     10a:	17 c1       	rjmp	.+558    	; 0x33a <_fpadd_parts+0x2a8>
     10c:	f7 01       	movw	r30, r14
     10e:	82 81       	ldd	r24, Z+2	; 0x02
     110:	93 81       	ldd	r25, Z+3	; 0x03
     112:	fb 01       	movw	r30, r22
     114:	a2 81       	ldd	r26, Z+2	; 0x02
     116:	b3 81       	ldd	r27, Z+3	; 0x03
     118:	f7 01       	movw	r30, r14
     11a:	04 81       	ldd	r16, Z+4	; 0x04
     11c:	15 81       	ldd	r17, Z+5	; 0x05
     11e:	26 81       	ldd	r18, Z+6	; 0x06
     120:	37 81       	ldd	r19, Z+7	; 0x07
     122:	fb 01       	movw	r30, r22
     124:	84 80       	ldd	r8, Z+4	; 0x04
     126:	95 80       	ldd	r9, Z+5	; 0x05
     128:	a6 80       	ldd	r10, Z+6	; 0x06
     12a:	b7 80       	ldd	r11, Z+7	; 0x07
     12c:	fc 01       	movw	r30, r24
     12e:	ea 1b       	sub	r30, r26
     130:	fb 0b       	sbc	r31, r27
     132:	af 01       	movw	r20, r30
     134:	f7 ff       	sbrs	r31, 7
     136:	04 c0       	rjmp	.+8      	; 0x140 <_fpadd_parts+0xae>
     138:	44 27       	eor	r20, r20
     13a:	55 27       	eor	r21, r21
     13c:	4e 1b       	sub	r20, r30
     13e:	5f 0b       	sbc	r21, r31
     140:	40 32       	cpi	r20, 0x20	; 32
     142:	51 05       	cpc	r21, r1
     144:	0c f0       	brlt	.+2      	; 0x148 <_fpadd_parts+0xb6>
     146:	74 c0       	rjmp	.+232    	; 0x230 <_fpadd_parts+0x19e>
     148:	1e 16       	cp	r1, r30
     14a:	1f 06       	cpc	r1, r31
     14c:	b4 f5       	brge	.+108    	; 0x1ba <_fpadd_parts+0x128>
     14e:	24 01       	movw	r4, r8
     150:	35 01       	movw	r6, r10
     152:	04 2e       	mov	r0, r20
     154:	04 c0       	rjmp	.+8      	; 0x15e <_fpadd_parts+0xcc>
     156:	76 94       	lsr	r7
     158:	67 94       	ror	r6
     15a:	57 94       	ror	r5
     15c:	47 94       	ror	r4
     15e:	0a 94       	dec	r0
     160:	d2 f7       	brpl	.-12     	; 0x156 <_fpadd_parts+0xc4>
     162:	49 82       	std	Y+1, r4	; 0x01
     164:	5a 82       	std	Y+2, r5	; 0x02
     166:	6b 82       	std	Y+3, r6	; 0x03
     168:	7c 82       	std	Y+4, r7	; 0x04
     16a:	41 2c       	mov	r4, r1
     16c:	51 2c       	mov	r5, r1
     16e:	32 01       	movw	r6, r4
     170:	43 94       	inc	r4
     172:	04 c0       	rjmp	.+8      	; 0x17c <_fpadd_parts+0xea>
     174:	44 0c       	add	r4, r4
     176:	55 1c       	adc	r5, r5
     178:	66 1c       	adc	r6, r6
     17a:	77 1c       	adc	r7, r7
     17c:	4a 95       	dec	r20
     17e:	d2 f7       	brpl	.-12     	; 0x174 <_fpadd_parts+0xe2>
     180:	41 e0       	ldi	r20, 0x01	; 1
     182:	44 1a       	sub	r4, r20
     184:	51 08       	sbc	r5, r1
     186:	61 08       	sbc	r6, r1
     188:	71 08       	sbc	r7, r1
     18a:	48 20       	and	r4, r8
     18c:	59 20       	and	r5, r9
     18e:	6a 20       	and	r6, r10
     190:	7b 20       	and	r7, r11
     192:	81 2c       	mov	r8, r1
     194:	91 2c       	mov	r9, r1
     196:	54 01       	movw	r10, r8
     198:	83 94       	inc	r8
     19a:	45 28       	or	r4, r5
     19c:	46 28       	or	r4, r6
     19e:	47 28       	or	r4, r7
     1a0:	19 f4       	brne	.+6      	; 0x1a8 <_fpadd_parts+0x116>
     1a2:	81 2c       	mov	r8, r1
     1a4:	91 2c       	mov	r9, r1
     1a6:	54 01       	movw	r10, r8
     1a8:	49 80       	ldd	r4, Y+1	; 0x01
     1aa:	5a 80       	ldd	r5, Y+2	; 0x02
     1ac:	6b 80       	ldd	r6, Y+3	; 0x03
     1ae:	7c 80       	ldd	r7, Y+4	; 0x04
     1b0:	84 28       	or	r8, r4
     1b2:	95 28       	or	r9, r5
     1b4:	a6 28       	or	r10, r6
     1b6:	b7 28       	or	r11, r7
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <_fpadd_parts+0x1b4>
     1ba:	ef 2b       	or	r30, r31
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <_fpadd_parts+0x12e>
     1be:	43 c0       	rjmp	.+134    	; 0x246 <_fpadd_parts+0x1b4>
     1c0:	84 0f       	add	r24, r20
     1c2:	95 1f       	adc	r25, r21
     1c4:	28 01       	movw	r4, r16
     1c6:	39 01       	movw	r6, r18
     1c8:	04 2e       	mov	r0, r20
     1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <_fpadd_parts+0x142>
     1cc:	76 94       	lsr	r7
     1ce:	67 94       	ror	r6
     1d0:	57 94       	ror	r5
     1d2:	47 94       	ror	r4
     1d4:	0a 94       	dec	r0
     1d6:	d2 f7       	brpl	.-12     	; 0x1cc <_fpadd_parts+0x13a>
     1d8:	49 82       	std	Y+1, r4	; 0x01
     1da:	5a 82       	std	Y+2, r5	; 0x02
     1dc:	6b 82       	std	Y+3, r6	; 0x03
     1de:	7c 82       	std	Y+4, r7	; 0x04
     1e0:	41 2c       	mov	r4, r1
     1e2:	51 2c       	mov	r5, r1
     1e4:	32 01       	movw	r6, r4
     1e6:	43 94       	inc	r4
     1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <_fpadd_parts+0x160>
     1ea:	44 0c       	add	r4, r4
     1ec:	55 1c       	adc	r5, r5
     1ee:	66 1c       	adc	r6, r6
     1f0:	77 1c       	adc	r7, r7
     1f2:	4a 95       	dec	r20
     1f4:	d2 f7       	brpl	.-12     	; 0x1ea <_fpadd_parts+0x158>
     1f6:	41 e0       	ldi	r20, 0x01	; 1
     1f8:	44 1a       	sub	r4, r20
     1fa:	51 08       	sbc	r5, r1
     1fc:	61 08       	sbc	r6, r1
     1fe:	71 08       	sbc	r7, r1
     200:	40 22       	and	r4, r16
     202:	51 22       	and	r5, r17
     204:	62 22       	and	r6, r18
     206:	73 22       	and	r7, r19
     208:	01 e0       	ldi	r16, 0x01	; 1
     20a:	10 e0       	ldi	r17, 0x00	; 0
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	45 28       	or	r4, r5
     212:	46 28       	or	r4, r6
     214:	47 28       	or	r4, r7
     216:	19 f4       	brne	.+6      	; 0x21e <_fpadd_parts+0x18c>
     218:	00 e0       	ldi	r16, 0x00	; 0
     21a:	10 e0       	ldi	r17, 0x00	; 0
     21c:	98 01       	movw	r18, r16
     21e:	49 80       	ldd	r4, Y+1	; 0x01
     220:	5a 80       	ldd	r5, Y+2	; 0x02
     222:	6b 80       	ldd	r6, Y+3	; 0x03
     224:	7c 80       	ldd	r7, Y+4	; 0x04
     226:	04 29       	or	r16, r4
     228:	15 29       	or	r17, r5
     22a:	26 29       	or	r18, r6
     22c:	37 29       	or	r19, r7
     22e:	0b c0       	rjmp	.+22     	; 0x246 <_fpadd_parts+0x1b4>
     230:	a8 17       	cp	r26, r24
     232:	b9 07       	cpc	r27, r25
     234:	24 f4       	brge	.+8      	; 0x23e <_fpadd_parts+0x1ac>
     236:	81 2c       	mov	r8, r1
     238:	91 2c       	mov	r9, r1
     23a:	54 01       	movw	r10, r8
     23c:	04 c0       	rjmp	.+8      	; 0x246 <_fpadd_parts+0x1b4>
     23e:	cd 01       	movw	r24, r26
     240:	00 e0       	ldi	r16, 0x00	; 0
     242:	10 e0       	ldi	r17, 0x00	; 0
     244:	98 01       	movw	r18, r16
     246:	f7 01       	movw	r30, r14
     248:	41 81       	ldd	r20, Z+1	; 0x01
     24a:	fb 01       	movw	r30, r22
     24c:	51 81       	ldd	r21, Z+1	; 0x01
     24e:	45 17       	cp	r20, r21
     250:	09 f4       	brne	.+2      	; 0x254 <_fpadd_parts+0x1c2>
     252:	46 c0       	rjmp	.+140    	; 0x2e0 <_fpadd_parts+0x24e>
     254:	44 23       	and	r20, r20
     256:	49 f0       	breq	.+18     	; 0x26a <_fpadd_parts+0x1d8>
     258:	24 01       	movw	r4, r8
     25a:	35 01       	movw	r6, r10
     25c:	40 1a       	sub	r4, r16
     25e:	51 0a       	sbc	r5, r17
     260:	62 0a       	sbc	r6, r18
     262:	73 0a       	sbc	r7, r19
     264:	93 01       	movw	r18, r6
     266:	82 01       	movw	r16, r4
     268:	04 c0       	rjmp	.+8      	; 0x272 <_fpadd_parts+0x1e0>
     26a:	08 19       	sub	r16, r8
     26c:	19 09       	sbc	r17, r9
     26e:	2a 09       	sbc	r18, r10
     270:	3b 09       	sbc	r19, r11
     272:	37 fd       	sbrc	r19, 7
     274:	05 c0       	rjmp	.+10     	; 0x280 <_fpadd_parts+0x1ee>
     276:	f6 01       	movw	r30, r12
     278:	11 82       	std	Z+1, r1	; 0x01
     27a:	93 83       	std	Z+3, r25	; 0x03
     27c:	82 83       	std	Z+2, r24	; 0x02
     27e:	0c c0       	rjmp	.+24     	; 0x298 <_fpadd_parts+0x206>
     280:	41 e0       	ldi	r20, 0x01	; 1
     282:	f6 01       	movw	r30, r12
     284:	41 83       	std	Z+1, r20	; 0x01
     286:	93 83       	std	Z+3, r25	; 0x03
     288:	82 83       	std	Z+2, r24	; 0x02
     28a:	30 95       	com	r19
     28c:	20 95       	com	r18
     28e:	10 95       	com	r17
     290:	01 95       	neg	r16
     292:	1f 4f       	sbci	r17, 0xFF	; 255
     294:	2f 4f       	sbci	r18, 0xFF	; 255
     296:	3f 4f       	sbci	r19, 0xFF	; 255
     298:	04 83       	std	Z+4, r16	; 0x04
     29a:	15 83       	std	Z+5, r17	; 0x05
     29c:	26 83       	std	Z+6, r18	; 0x06
     29e:	37 83       	std	Z+7, r19	; 0x07
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <_fpadd_parts+0x22c>
     2a2:	88 0f       	add	r24, r24
     2a4:	99 1f       	adc	r25, r25
     2a6:	aa 1f       	adc	r26, r26
     2a8:	bb 1f       	adc	r27, r27
     2aa:	f6 01       	movw	r30, r12
     2ac:	84 83       	std	Z+4, r24	; 0x04
     2ae:	95 83       	std	Z+5, r25	; 0x05
     2b0:	a6 83       	std	Z+6, r26	; 0x06
     2b2:	b7 83       	std	Z+7, r27	; 0x07
     2b4:	82 81       	ldd	r24, Z+2	; 0x02
     2b6:	93 81       	ldd	r25, Z+3	; 0x03
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	93 83       	std	Z+3, r25	; 0x03
     2bc:	82 83       	std	Z+2, r24	; 0x02
     2be:	f6 01       	movw	r30, r12
     2c0:	84 81       	ldd	r24, Z+4	; 0x04
     2c2:	95 81       	ldd	r25, Z+5	; 0x05
     2c4:	a6 81       	ldd	r26, Z+6	; 0x06
     2c6:	b7 81       	ldd	r27, Z+7	; 0x07
     2c8:	ac 01       	movw	r20, r24
     2ca:	bd 01       	movw	r22, r26
     2cc:	41 50       	subi	r20, 0x01	; 1
     2ce:	51 09       	sbc	r21, r1
     2d0:	61 09       	sbc	r22, r1
     2d2:	71 09       	sbc	r23, r1
     2d4:	4f 3f       	cpi	r20, 0xFF	; 255
     2d6:	5f 4f       	sbci	r21, 0xFF	; 255
     2d8:	6f 4f       	sbci	r22, 0xFF	; 255
     2da:	7f 43       	sbci	r23, 0x3F	; 63
     2dc:	10 f3       	brcs	.-60     	; 0x2a2 <_fpadd_parts+0x210>
     2de:	0c c0       	rjmp	.+24     	; 0x2f8 <_fpadd_parts+0x266>
     2e0:	f6 01       	movw	r30, r12
     2e2:	41 83       	std	Z+1, r20	; 0x01
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	08 0d       	add	r16, r8
     2ea:	19 1d       	adc	r17, r9
     2ec:	2a 1d       	adc	r18, r10
     2ee:	3b 1d       	adc	r19, r11
     2f0:	04 83       	std	Z+4, r16	; 0x04
     2f2:	15 83       	std	Z+5, r17	; 0x05
     2f4:	26 83       	std	Z+6, r18	; 0x06
     2f6:	37 83       	std	Z+7, r19	; 0x07
     2f8:	83 e0       	ldi	r24, 0x03	; 3
     2fa:	f6 01       	movw	r30, r12
     2fc:	80 83       	st	Z, r24
     2fe:	44 81       	ldd	r20, Z+4	; 0x04
     300:	55 81       	ldd	r21, Z+5	; 0x05
     302:	66 81       	ldd	r22, Z+6	; 0x06
     304:	77 81       	ldd	r23, Z+7	; 0x07
     306:	77 ff       	sbrs	r23, 7
     308:	1a c0       	rjmp	.+52     	; 0x33e <_fpadd_parts+0x2ac>
     30a:	db 01       	movw	r26, r22
     30c:	ca 01       	movw	r24, r20
     30e:	81 70       	andi	r24, 0x01	; 1
     310:	99 27       	eor	r25, r25
     312:	aa 27       	eor	r26, r26
     314:	bb 27       	eor	r27, r27
     316:	76 95       	lsr	r23
     318:	67 95       	ror	r22
     31a:	57 95       	ror	r21
     31c:	47 95       	ror	r20
     31e:	84 2b       	or	r24, r20
     320:	95 2b       	or	r25, r21
     322:	a6 2b       	or	r26, r22
     324:	b7 2b       	or	r27, r23
     326:	84 83       	std	Z+4, r24	; 0x04
     328:	95 83       	std	Z+5, r25	; 0x05
     32a:	a6 83       	std	Z+6, r26	; 0x06
     32c:	b7 83       	std	Z+7, r27	; 0x07
     32e:	82 81       	ldd	r24, Z+2	; 0x02
     330:	93 81       	ldd	r25, Z+3	; 0x03
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	93 83       	std	Z+3, r25	; 0x03
     336:	82 83       	std	Z+2, r24	; 0x02
     338:	02 c0       	rjmp	.+4      	; 0x33e <_fpadd_parts+0x2ac>
     33a:	7b 01       	movw	r14, r22
     33c:	01 c0       	rjmp	.+2      	; 0x340 <_fpadd_parts+0x2ae>
     33e:	76 01       	movw	r14, r12
     340:	c7 01       	movw	r24, r14
     342:	24 96       	adiw	r28, 0x04	; 4
     344:	e0 e1       	ldi	r30, 0x10	; 16
     346:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__epilogue_restores__+0x4>

0000034a <__addsf3>:
     34a:	a0 e2       	ldi	r26, 0x20	; 32
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	eb ea       	ldi	r30, 0xAB	; 171
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__prologue_saves__+0x20>
     356:	6d 8f       	std	Y+29, r22	; 0x1d
     358:	7e 8f       	std	Y+30, r23	; 0x1e
     35a:	8f 8f       	std	Y+31, r24	; 0x1f
     35c:	98 a3       	std	Y+32, r25	; 0x20
     35e:	29 8f       	std	Y+25, r18	; 0x19
     360:	3a 8f       	std	Y+26, r19	; 0x1a
     362:	4b 8f       	std	Y+27, r20	; 0x1b
     364:	5c 8f       	std	Y+28, r21	; 0x1c
     366:	be 01       	movw	r22, r28
     368:	6f 5e       	subi	r22, 0xEF	; 239
     36a:	7f 4f       	sbci	r23, 0xFF	; 255
     36c:	ce 01       	movw	r24, r28
     36e:	4d 96       	adiw	r24, 0x1d	; 29
     370:	0e 94 33 04 	call	0x866	; 0x866 <__unpack_f>
     374:	be 01       	movw	r22, r28
     376:	67 5f       	subi	r22, 0xF7	; 247
     378:	7f 4f       	sbci	r23, 0xFF	; 255
     37a:	ce 01       	movw	r24, r28
     37c:	49 96       	adiw	r24, 0x19	; 25
     37e:	0e 94 33 04 	call	0x866	; 0x866 <__unpack_f>
     382:	ae 01       	movw	r20, r28
     384:	4f 5f       	subi	r20, 0xFF	; 255
     386:	5f 4f       	sbci	r21, 0xFF	; 255
     388:	be 01       	movw	r22, r28
     38a:	67 5f       	subi	r22, 0xF7	; 247
     38c:	7f 4f       	sbci	r23, 0xFF	; 255
     38e:	ce 01       	movw	r24, r28
     390:	41 96       	adiw	r24, 0x11	; 17
     392:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     396:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__pack_f>
     39a:	a0 96       	adiw	r28, 0x20	; 32
     39c:	e2 e0       	ldi	r30, 0x02	; 2
     39e:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__epilogue_restores__+0x20>

000003a2 <__subsf3>:
     3a2:	a0 e2       	ldi	r26, 0x20	; 32
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	e7 ed       	ldi	r30, 0xD7	; 215
     3a8:	f1 e0       	ldi	r31, 0x01	; 1
     3aa:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__prologue_saves__+0x20>
     3ae:	6d 8f       	std	Y+29, r22	; 0x1d
     3b0:	7e 8f       	std	Y+30, r23	; 0x1e
     3b2:	8f 8f       	std	Y+31, r24	; 0x1f
     3b4:	98 a3       	std	Y+32, r25	; 0x20
     3b6:	29 8f       	std	Y+25, r18	; 0x19
     3b8:	3a 8f       	std	Y+26, r19	; 0x1a
     3ba:	4b 8f       	std	Y+27, r20	; 0x1b
     3bc:	5c 8f       	std	Y+28, r21	; 0x1c
     3be:	be 01       	movw	r22, r28
     3c0:	6f 5e       	subi	r22, 0xEF	; 239
     3c2:	7f 4f       	sbci	r23, 0xFF	; 255
     3c4:	ce 01       	movw	r24, r28
     3c6:	4d 96       	adiw	r24, 0x1d	; 29
     3c8:	0e 94 33 04 	call	0x866	; 0x866 <__unpack_f>
     3cc:	be 01       	movw	r22, r28
     3ce:	67 5f       	subi	r22, 0xF7	; 247
     3d0:	7f 4f       	sbci	r23, 0xFF	; 255
     3d2:	ce 01       	movw	r24, r28
     3d4:	49 96       	adiw	r24, 0x19	; 25
     3d6:	0e 94 33 04 	call	0x866	; 0x866 <__unpack_f>
     3da:	8a 85       	ldd	r24, Y+10	; 0x0a
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	89 27       	eor	r24, r25
     3e0:	8a 87       	std	Y+10, r24	; 0x0a
     3e2:	ae 01       	movw	r20, r28
     3e4:	4f 5f       	subi	r20, 0xFF	; 255
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	be 01       	movw	r22, r28
     3ea:	67 5f       	subi	r22, 0xF7	; 247
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
     3ee:	ce 01       	movw	r24, r28
     3f0:	41 96       	adiw	r24, 0x11	; 17
     3f2:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     3f6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__pack_f>
     3fa:	a0 96       	adiw	r28, 0x20	; 32
     3fc:	e2 e0       	ldi	r30, 0x02	; 2
     3fe:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__epilogue_restores__+0x20>

00000402 <__divsf3>:
     402:	a8 e1       	ldi	r26, 0x18	; 24
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	e7 e0       	ldi	r30, 0x07	; 7
     408:	f2 e0       	ldi	r31, 0x02	; 2
     40a:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__prologue_saves__+0x14>
     40e:	6d 8b       	std	Y+21, r22	; 0x15
     410:	7e 8b       	std	Y+22, r23	; 0x16
     412:	8f 8b       	std	Y+23, r24	; 0x17
     414:	98 8f       	std	Y+24, r25	; 0x18
     416:	29 8b       	std	Y+17, r18	; 0x11
     418:	3a 8b       	std	Y+18, r19	; 0x12
     41a:	4b 8b       	std	Y+19, r20	; 0x13
     41c:	5c 8b       	std	Y+20, r21	; 0x14
     41e:	be 01       	movw	r22, r28
     420:	67 5f       	subi	r22, 0xF7	; 247
     422:	7f 4f       	sbci	r23, 0xFF	; 255
     424:	ce 01       	movw	r24, r28
     426:	45 96       	adiw	r24, 0x15	; 21
     428:	0e 94 33 04 	call	0x866	; 0x866 <__unpack_f>
     42c:	be 01       	movw	r22, r28
     42e:	6f 5f       	subi	r22, 0xFF	; 255
     430:	7f 4f       	sbci	r23, 0xFF	; 255
     432:	ce 01       	movw	r24, r28
     434:	41 96       	adiw	r24, 0x11	; 17
     436:	0e 94 33 04 	call	0x866	; 0x866 <__unpack_f>
     43a:	99 85       	ldd	r25, Y+9	; 0x09
     43c:	92 30       	cpi	r25, 0x02	; 2
     43e:	08 f4       	brcc	.+2      	; 0x442 <__divsf3+0x40>
     440:	75 c0       	rjmp	.+234    	; 0x52c <__divsf3+0x12a>
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	82 30       	cpi	r24, 0x02	; 2
     446:	08 f4       	brcc	.+2      	; 0x44a <__divsf3+0x48>
     448:	74 c0       	rjmp	.+232    	; 0x532 <__divsf3+0x130>
     44a:	2a 85       	ldd	r18, Y+10	; 0x0a
     44c:	3a 81       	ldd	r19, Y+2	; 0x02
     44e:	23 27       	eor	r18, r19
     450:	2a 87       	std	Y+10, r18	; 0x0a
     452:	94 30       	cpi	r25, 0x04	; 4
     454:	11 f0       	breq	.+4      	; 0x45a <__divsf3+0x58>
     456:	92 30       	cpi	r25, 0x02	; 2
     458:	19 f4       	brne	.+6      	; 0x460 <__divsf3+0x5e>
     45a:	98 13       	cpse	r25, r24
     45c:	67 c0       	rjmp	.+206    	; 0x52c <__divsf3+0x12a>
     45e:	6c c0       	rjmp	.+216    	; 0x538 <__divsf3+0x136>
     460:	84 30       	cpi	r24, 0x04	; 4
     462:	39 f4       	brne	.+14     	; 0x472 <__divsf3+0x70>
     464:	1d 86       	std	Y+13, r1	; 0x0d
     466:	1e 86       	std	Y+14, r1	; 0x0e
     468:	1f 86       	std	Y+15, r1	; 0x0f
     46a:	18 8a       	std	Y+16, r1	; 0x10
     46c:	1c 86       	std	Y+12, r1	; 0x0c
     46e:	1b 86       	std	Y+11, r1	; 0x0b
     470:	04 c0       	rjmp	.+8      	; 0x47a <__divsf3+0x78>
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	29 f4       	brne	.+10     	; 0x480 <__divsf3+0x7e>
     476:	84 e0       	ldi	r24, 0x04	; 4
     478:	89 87       	std	Y+9, r24	; 0x09
     47a:	ce 01       	movw	r24, r28
     47c:	09 96       	adiw	r24, 0x09	; 9
     47e:	5e c0       	rjmp	.+188    	; 0x53c <__divsf3+0x13a>
     480:	8b 85       	ldd	r24, Y+11	; 0x0b
     482:	9c 85       	ldd	r25, Y+12	; 0x0c
     484:	2b 81       	ldd	r18, Y+3	; 0x03
     486:	3c 81       	ldd	r19, Y+4	; 0x04
     488:	82 1b       	sub	r24, r18
     48a:	93 0b       	sbc	r25, r19
     48c:	9c 87       	std	Y+12, r25	; 0x0c
     48e:	8b 87       	std	Y+11, r24	; 0x0b
     490:	4d 85       	ldd	r20, Y+13	; 0x0d
     492:	5e 85       	ldd	r21, Y+14	; 0x0e
     494:	6f 85       	ldd	r22, Y+15	; 0x0f
     496:	78 89       	ldd	r23, Y+16	; 0x10
     498:	cd 80       	ldd	r12, Y+5	; 0x05
     49a:	de 80       	ldd	r13, Y+6	; 0x06
     49c:	ef 80       	ldd	r14, Y+7	; 0x07
     49e:	f8 84       	ldd	r15, Y+8	; 0x08
     4a0:	4c 15       	cp	r20, r12
     4a2:	5d 05       	cpc	r21, r13
     4a4:	6e 05       	cpc	r22, r14
     4a6:	7f 05       	cpc	r23, r15
     4a8:	38 f4       	brcc	.+14     	; 0x4b8 <__divsf3+0xb6>
     4aa:	44 0f       	add	r20, r20
     4ac:	55 1f       	adc	r21, r21
     4ae:	66 1f       	adc	r22, r22
     4b0:	77 1f       	adc	r23, r23
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	9c 87       	std	Y+12, r25	; 0x0c
     4b6:	8b 87       	std	Y+11, r24	; 0x0b
     4b8:	ef e1       	ldi	r30, 0x1F	; 31
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	10 e0       	ldi	r17, 0x00	; 0
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	30 e4       	ldi	r19, 0x40	; 64
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	dc 01       	movw	r26, r24
     4ca:	4c 15       	cp	r20, r12
     4cc:	5d 05       	cpc	r21, r13
     4ce:	6e 05       	cpc	r22, r14
     4d0:	7f 05       	cpc	r23, r15
     4d2:	40 f0       	brcs	.+16     	; 0x4e4 <__divsf3+0xe2>
     4d4:	80 2b       	or	r24, r16
     4d6:	91 2b       	or	r25, r17
     4d8:	a2 2b       	or	r26, r18
     4da:	b3 2b       	or	r27, r19
     4dc:	4c 19       	sub	r20, r12
     4de:	5d 09       	sbc	r21, r13
     4e0:	6e 09       	sbc	r22, r14
     4e2:	7f 09       	sbc	r23, r15
     4e4:	36 95       	lsr	r19
     4e6:	27 95       	ror	r18
     4e8:	17 95       	ror	r17
     4ea:	07 95       	ror	r16
     4ec:	44 0f       	add	r20, r20
     4ee:	55 1f       	adc	r21, r21
     4f0:	66 1f       	adc	r22, r22
     4f2:	77 1f       	adc	r23, r23
     4f4:	31 97       	sbiw	r30, 0x01	; 1
     4f6:	49 f7       	brne	.-46     	; 0x4ca <__divsf3+0xc8>
     4f8:	8c 01       	movw	r16, r24
     4fa:	9d 01       	movw	r18, r26
     4fc:	0f 77       	andi	r16, 0x7F	; 127
     4fe:	11 27       	eor	r17, r17
     500:	22 27       	eor	r18, r18
     502:	33 27       	eor	r19, r19
     504:	00 34       	cpi	r16, 0x40	; 64
     506:	11 05       	cpc	r17, r1
     508:	21 05       	cpc	r18, r1
     50a:	31 05       	cpc	r19, r1
     50c:	59 f4       	brne	.+22     	; 0x524 <__divsf3+0x122>
     50e:	87 fd       	sbrc	r24, 7
     510:	09 c0       	rjmp	.+18     	; 0x524 <__divsf3+0x122>
     512:	45 2b       	or	r20, r21
     514:	46 2b       	or	r20, r22
     516:	47 2b       	or	r20, r23
     518:	29 f0       	breq	.+10     	; 0x524 <__divsf3+0x122>
     51a:	80 5c       	subi	r24, 0xC0	; 192
     51c:	9f 4f       	sbci	r25, 0xFF	; 255
     51e:	af 4f       	sbci	r26, 0xFF	; 255
     520:	bf 4f       	sbci	r27, 0xFF	; 255
     522:	80 78       	andi	r24, 0x80	; 128
     524:	8d 87       	std	Y+13, r24	; 0x0d
     526:	9e 87       	std	Y+14, r25	; 0x0e
     528:	af 87       	std	Y+15, r26	; 0x0f
     52a:	b8 8b       	std	Y+16, r27	; 0x10
     52c:	ce 01       	movw	r24, r28
     52e:	09 96       	adiw	r24, 0x09	; 9
     530:	05 c0       	rjmp	.+10     	; 0x53c <__divsf3+0x13a>
     532:	ce 01       	movw	r24, r28
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	02 c0       	rjmp	.+4      	; 0x53c <__divsf3+0x13a>
     538:	80 e6       	ldi	r24, 0x60	; 96
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__pack_f>
     540:	68 96       	adiw	r28, 0x18	; 24
     542:	e8 e0       	ldi	r30, 0x08	; 8
     544:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__epilogue_restores__+0x14>

00000548 <__fixsfsi>:
     548:	ac e0       	ldi	r26, 0x0C	; 12
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	ea ea       	ldi	r30, 0xAA	; 170
     54e:	f2 e0       	ldi	r31, 0x02	; 2
     550:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__prologue_saves__+0x1c>
     554:	69 87       	std	Y+9, r22	; 0x09
     556:	7a 87       	std	Y+10, r23	; 0x0a
     558:	8b 87       	std	Y+11, r24	; 0x0b
     55a:	9c 87       	std	Y+12, r25	; 0x0c
     55c:	be 01       	movw	r22, r28
     55e:	6f 5f       	subi	r22, 0xFF	; 255
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	ce 01       	movw	r24, r28
     564:	09 96       	adiw	r24, 0x09	; 9
     566:	0e 94 33 04 	call	0x866	; 0x866 <__unpack_f>
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	82 30       	cpi	r24, 0x02	; 2
     56e:	91 f1       	breq	.+100    	; 0x5d4 <__fixsfsi+0x8c>
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	80 f1       	brcs	.+96     	; 0x5d4 <__fixsfsi+0x8c>
     574:	84 30       	cpi	r24, 0x04	; 4
     576:	41 f4       	brne	.+16     	; 0x588 <__fixsfsi+0x40>
     578:	8a 81       	ldd	r24, Y+2	; 0x02
     57a:	88 23       	and	r24, r24
     57c:	31 f1       	breq	.+76     	; 0x5ca <__fixsfsi+0x82>
     57e:	00 e0       	ldi	r16, 0x00	; 0
     580:	10 e0       	ldi	r17, 0x00	; 0
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e8       	ldi	r19, 0x80	; 128
     586:	29 c0       	rjmp	.+82     	; 0x5da <__fixsfsi+0x92>
     588:	2b 81       	ldd	r18, Y+3	; 0x03
     58a:	3c 81       	ldd	r19, Y+4	; 0x04
     58c:	37 fd       	sbrc	r19, 7
     58e:	22 c0       	rjmp	.+68     	; 0x5d4 <__fixsfsi+0x8c>
     590:	2f 31       	cpi	r18, 0x1F	; 31
     592:	31 05       	cpc	r19, r1
     594:	8c f7       	brge	.-30     	; 0x578 <__fixsfsi+0x30>
     596:	8e e1       	ldi	r24, 0x1E	; 30
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	82 1b       	sub	r24, r18
     59c:	93 0b       	sbc	r25, r19
     59e:	0d 81       	ldd	r16, Y+5	; 0x05
     5a0:	1e 81       	ldd	r17, Y+6	; 0x06
     5a2:	2f 81       	ldd	r18, Y+7	; 0x07
     5a4:	38 85       	ldd	r19, Y+8	; 0x08
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <__fixsfsi+0x68>
     5a8:	36 95       	lsr	r19
     5aa:	27 95       	ror	r18
     5ac:	17 95       	ror	r17
     5ae:	07 95       	ror	r16
     5b0:	8a 95       	dec	r24
     5b2:	d2 f7       	brpl	.-12     	; 0x5a8 <__fixsfsi+0x60>
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	88 23       	and	r24, r24
     5b8:	81 f0       	breq	.+32     	; 0x5da <__fixsfsi+0x92>
     5ba:	30 95       	com	r19
     5bc:	20 95       	com	r18
     5be:	10 95       	com	r17
     5c0:	01 95       	neg	r16
     5c2:	1f 4f       	sbci	r17, 0xFF	; 255
     5c4:	2f 4f       	sbci	r18, 0xFF	; 255
     5c6:	3f 4f       	sbci	r19, 0xFF	; 255
     5c8:	08 c0       	rjmp	.+16     	; 0x5da <__fixsfsi+0x92>
     5ca:	0f ef       	ldi	r16, 0xFF	; 255
     5cc:	1f ef       	ldi	r17, 0xFF	; 255
     5ce:	2f ef       	ldi	r18, 0xFF	; 255
     5d0:	3f e7       	ldi	r19, 0x7F	; 127
     5d2:	03 c0       	rjmp	.+6      	; 0x5da <__fixsfsi+0x92>
     5d4:	00 e0       	ldi	r16, 0x00	; 0
     5d6:	10 e0       	ldi	r17, 0x00	; 0
     5d8:	98 01       	movw	r18, r16
     5da:	b8 01       	movw	r22, r16
     5dc:	c9 01       	movw	r24, r18
     5de:	2c 96       	adiw	r28, 0x0c	; 12
     5e0:	e4 e0       	ldi	r30, 0x04	; 4
     5e2:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__epilogue_restores__+0x1c>

000005e6 <__floatunsisf>:
     5e6:	a8 e0       	ldi	r26, 0x08	; 8
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	e9 ef       	ldi	r30, 0xF9	; 249
     5ec:	f2 e0       	ldi	r31, 0x02	; 2
     5ee:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__prologue_saves__+0x14>
     5f2:	8b 01       	movw	r16, r22
     5f4:	9c 01       	movw	r18, r24
     5f6:	1a 82       	std	Y+2, r1	; 0x02
     5f8:	61 15       	cp	r22, r1
     5fa:	71 05       	cpc	r23, r1
     5fc:	81 05       	cpc	r24, r1
     5fe:	91 05       	cpc	r25, r1
     600:	19 f4       	brne	.+6      	; 0x608 <__floatunsisf+0x22>
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	89 83       	std	Y+1, r24	; 0x01
     606:	5d c0       	rjmp	.+186    	; 0x6c2 <__floatunsisf+0xdc>
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	4e e1       	ldi	r20, 0x1E	; 30
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	5c 83       	std	Y+4, r21	; 0x04
     612:	4b 83       	std	Y+3, r20	; 0x03
     614:	c9 01       	movw	r24, r18
     616:	b8 01       	movw	r22, r16
     618:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__clzsi2>
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	97 ff       	sbrs	r25, 7
     620:	39 c0       	rjmp	.+114    	; 0x694 <__floatunsisf+0xae>
     622:	ee 27       	eor	r30, r30
     624:	ff 27       	eor	r31, r31
     626:	e8 1b       	sub	r30, r24
     628:	f9 0b       	sbc	r31, r25
     62a:	41 e0       	ldi	r20, 0x01	; 1
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	0e 2e       	mov	r0, r30
     634:	04 c0       	rjmp	.+8      	; 0x63e <__floatunsisf+0x58>
     636:	44 0f       	add	r20, r20
     638:	55 1f       	adc	r21, r21
     63a:	66 1f       	adc	r22, r22
     63c:	77 1f       	adc	r23, r23
     63e:	0a 94       	dec	r0
     640:	d2 f7       	brpl	.-12     	; 0x636 <__floatunsisf+0x50>
     642:	41 50       	subi	r20, 0x01	; 1
     644:	51 09       	sbc	r21, r1
     646:	61 09       	sbc	r22, r1
     648:	71 09       	sbc	r23, r1
     64a:	40 23       	and	r20, r16
     64c:	51 23       	and	r21, r17
     64e:	62 23       	and	r22, r18
     650:	73 23       	and	r23, r19
     652:	c1 2c       	mov	r12, r1
     654:	d1 2c       	mov	r13, r1
     656:	76 01       	movw	r14, r12
     658:	c3 94       	inc	r12
     65a:	45 2b       	or	r20, r21
     65c:	46 2b       	or	r20, r22
     65e:	47 2b       	or	r20, r23
     660:	19 f4       	brne	.+6      	; 0x668 <__floatunsisf+0x82>
     662:	c1 2c       	mov	r12, r1
     664:	d1 2c       	mov	r13, r1
     666:	76 01       	movw	r14, r12
     668:	04 c0       	rjmp	.+8      	; 0x672 <__floatunsisf+0x8c>
     66a:	36 95       	lsr	r19
     66c:	27 95       	ror	r18
     66e:	17 95       	ror	r17
     670:	07 95       	ror	r16
     672:	ea 95       	dec	r30
     674:	d2 f7       	brpl	.-12     	; 0x66a <__floatunsisf+0x84>
     676:	0c 29       	or	r16, r12
     678:	1d 29       	or	r17, r13
     67a:	2e 29       	or	r18, r14
     67c:	3f 29       	or	r19, r15
     67e:	0d 83       	std	Y+5, r16	; 0x05
     680:	1e 83       	std	Y+6, r17	; 0x06
     682:	2f 83       	std	Y+7, r18	; 0x07
     684:	38 87       	std	Y+8, r19	; 0x08
     686:	2e e1       	ldi	r18, 0x1E	; 30
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	28 1b       	sub	r18, r24
     68c:	39 0b       	sbc	r19, r25
     68e:	3c 83       	std	Y+4, r19	; 0x04
     690:	2b 83       	std	Y+3, r18	; 0x03
     692:	17 c0       	rjmp	.+46     	; 0x6c2 <__floatunsisf+0xdc>
     694:	00 97       	sbiw	r24, 0x00	; 0
     696:	29 f4       	brne	.+10     	; 0x6a2 <__floatunsisf+0xbc>
     698:	0d 83       	std	Y+5, r16	; 0x05
     69a:	1e 83       	std	Y+6, r17	; 0x06
     69c:	2f 83       	std	Y+7, r18	; 0x07
     69e:	38 87       	std	Y+8, r19	; 0x08
     6a0:	10 c0       	rjmp	.+32     	; 0x6c2 <__floatunsisf+0xdc>
     6a2:	08 2e       	mov	r0, r24
     6a4:	04 c0       	rjmp	.+8      	; 0x6ae <__floatunsisf+0xc8>
     6a6:	00 0f       	add	r16, r16
     6a8:	11 1f       	adc	r17, r17
     6aa:	22 1f       	adc	r18, r18
     6ac:	33 1f       	adc	r19, r19
     6ae:	0a 94       	dec	r0
     6b0:	d2 f7       	brpl	.-12     	; 0x6a6 <__floatunsisf+0xc0>
     6b2:	0d 83       	std	Y+5, r16	; 0x05
     6b4:	1e 83       	std	Y+6, r17	; 0x06
     6b6:	2f 83       	std	Y+7, r18	; 0x07
     6b8:	38 87       	std	Y+8, r19	; 0x08
     6ba:	48 1b       	sub	r20, r24
     6bc:	59 0b       	sbc	r21, r25
     6be:	5c 83       	std	Y+4, r21	; 0x04
     6c0:	4b 83       	std	Y+3, r20	; 0x03
     6c2:	ce 01       	movw	r24, r28
     6c4:	01 96       	adiw	r24, 0x01	; 1
     6c6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__pack_f>
     6ca:	28 96       	adiw	r28, 0x08	; 8
     6cc:	e8 e0       	ldi	r30, 0x08	; 8
     6ce:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__epilogue_restores__+0x14>

000006d2 <__pack_f>:
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	dc 01       	movw	r26, r24
     6dc:	14 96       	adiw	r26, 0x04	; 4
     6de:	4d 91       	ld	r20, X+
     6e0:	5d 91       	ld	r21, X+
     6e2:	6d 91       	ld	r22, X+
     6e4:	7c 91       	ld	r23, X
     6e6:	17 97       	sbiw	r26, 0x07	; 7
     6e8:	11 96       	adiw	r26, 0x01	; 1
     6ea:	ec 91       	ld	r30, X
     6ec:	11 97       	sbiw	r26, 0x01	; 1
     6ee:	8c 91       	ld	r24, X
     6f0:	82 30       	cpi	r24, 0x02	; 2
     6f2:	20 f4       	brcc	.+8      	; 0x6fc <__pack_f+0x2a>
     6f4:	60 61       	ori	r22, 0x10	; 16
     6f6:	8f ef       	ldi	r24, 0xFF	; 255
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	a6 c0       	rjmp	.+332    	; 0x848 <__pack_f+0x176>
     6fc:	84 30       	cpi	r24, 0x04	; 4
     6fe:	09 f4       	brne	.+2      	; 0x702 <__pack_f+0x30>
     700:	9e c0       	rjmp	.+316    	; 0x83e <__pack_f+0x16c>
     702:	82 30       	cpi	r24, 0x02	; 2
     704:	09 f4       	brne	.+2      	; 0x708 <__pack_f+0x36>
     706:	95 c0       	rjmp	.+298    	; 0x832 <__pack_f+0x160>
     708:	41 15       	cp	r20, r1
     70a:	51 05       	cpc	r21, r1
     70c:	61 05       	cpc	r22, r1
     70e:	71 05       	cpc	r23, r1
     710:	09 f4       	brne	.+2      	; 0x714 <__pack_f+0x42>
     712:	92 c0       	rjmp	.+292    	; 0x838 <__pack_f+0x166>
     714:	12 96       	adiw	r26, 0x02	; 2
     716:	2d 91       	ld	r18, X+
     718:	3c 91       	ld	r19, X
     71a:	13 97       	sbiw	r26, 0x03	; 3
     71c:	22 38       	cpi	r18, 0x82	; 130
     71e:	8f ef       	ldi	r24, 0xFF	; 255
     720:	38 07       	cpc	r19, r24
     722:	0c f0       	brlt	.+2      	; 0x726 <__pack_f+0x54>
     724:	58 c0       	rjmp	.+176    	; 0x7d6 <__pack_f+0x104>
     726:	c2 e8       	ldi	r28, 0x82	; 130
     728:	df ef       	ldi	r29, 0xFF	; 255
     72a:	c2 1b       	sub	r28, r18
     72c:	d3 0b       	sbc	r29, r19
     72e:	ca 31       	cpi	r28, 0x1A	; 26
     730:	d1 05       	cpc	r29, r1
     732:	6c f5       	brge	.+90     	; 0x78e <__pack_f+0xbc>
     734:	8a 01       	movw	r16, r20
     736:	9b 01       	movw	r18, r22
     738:	0c 2e       	mov	r0, r28
     73a:	04 c0       	rjmp	.+8      	; 0x744 <__pack_f+0x72>
     73c:	36 95       	lsr	r19
     73e:	27 95       	ror	r18
     740:	17 95       	ror	r17
     742:	07 95       	ror	r16
     744:	0a 94       	dec	r0
     746:	d2 f7       	brpl	.-12     	; 0x73c <__pack_f+0x6a>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	a0 e0       	ldi	r26, 0x00	; 0
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	0c 2e       	mov	r0, r28
     752:	04 c0       	rjmp	.+8      	; 0x75c <__pack_f+0x8a>
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	aa 1f       	adc	r26, r26
     75a:	bb 1f       	adc	r27, r27
     75c:	0a 94       	dec	r0
     75e:	d2 f7       	brpl	.-12     	; 0x754 <__pack_f+0x82>
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	a1 09       	sbc	r26, r1
     764:	b1 09       	sbc	r27, r1
     766:	84 23       	and	r24, r20
     768:	95 23       	and	r25, r21
     76a:	a6 23       	and	r26, r22
     76c:	b7 23       	and	r27, r23
     76e:	41 e0       	ldi	r20, 0x01	; 1
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	89 2b       	or	r24, r25
     778:	8a 2b       	or	r24, r26
     77a:	8b 2b       	or	r24, r27
     77c:	19 f4       	brne	.+6      	; 0x784 <__pack_f+0xb2>
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	ba 01       	movw	r22, r20
     784:	40 2b       	or	r20, r16
     786:	51 2b       	or	r21, r17
     788:	62 2b       	or	r22, r18
     78a:	73 2b       	or	r23, r19
     78c:	03 c0       	rjmp	.+6      	; 0x794 <__pack_f+0xc2>
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	ba 01       	movw	r22, r20
     794:	db 01       	movw	r26, r22
     796:	ca 01       	movw	r24, r20
     798:	8f 77       	andi	r24, 0x7F	; 127
     79a:	99 27       	eor	r25, r25
     79c:	aa 27       	eor	r26, r26
     79e:	bb 27       	eor	r27, r27
     7a0:	80 34       	cpi	r24, 0x40	; 64
     7a2:	91 05       	cpc	r25, r1
     7a4:	a1 05       	cpc	r26, r1
     7a6:	b1 05       	cpc	r27, r1
     7a8:	39 f4       	brne	.+14     	; 0x7b8 <__pack_f+0xe6>
     7aa:	47 ff       	sbrs	r20, 7
     7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <__pack_f+0xee>
     7ae:	40 5c       	subi	r20, 0xC0	; 192
     7b0:	5f 4f       	sbci	r21, 0xFF	; 255
     7b2:	6f 4f       	sbci	r22, 0xFF	; 255
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <__pack_f+0xee>
     7b8:	41 5c       	subi	r20, 0xC1	; 193
     7ba:	5f 4f       	sbci	r21, 0xFF	; 255
     7bc:	6f 4f       	sbci	r22, 0xFF	; 255
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	41 15       	cp	r20, r1
     7c6:	51 05       	cpc	r21, r1
     7c8:	61 05       	cpc	r22, r1
     7ca:	20 e4       	ldi	r18, 0x40	; 64
     7cc:	72 07       	cpc	r23, r18
     7ce:	48 f5       	brcc	.+82     	; 0x822 <__pack_f+0x150>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	26 c0       	rjmp	.+76     	; 0x822 <__pack_f+0x150>
     7d6:	20 38       	cpi	r18, 0x80	; 128
     7d8:	31 05       	cpc	r19, r1
     7da:	8c f5       	brge	.+98     	; 0x83e <__pack_f+0x16c>
     7dc:	db 01       	movw	r26, r22
     7de:	ca 01       	movw	r24, r20
     7e0:	8f 77       	andi	r24, 0x7F	; 127
     7e2:	99 27       	eor	r25, r25
     7e4:	aa 27       	eor	r26, r26
     7e6:	bb 27       	eor	r27, r27
     7e8:	80 34       	cpi	r24, 0x40	; 64
     7ea:	91 05       	cpc	r25, r1
     7ec:	a1 05       	cpc	r26, r1
     7ee:	b1 05       	cpc	r27, r1
     7f0:	39 f4       	brne	.+14     	; 0x800 <__pack_f+0x12e>
     7f2:	47 ff       	sbrs	r20, 7
     7f4:	09 c0       	rjmp	.+18     	; 0x808 <__pack_f+0x136>
     7f6:	40 5c       	subi	r20, 0xC0	; 192
     7f8:	5f 4f       	sbci	r21, 0xFF	; 255
     7fa:	6f 4f       	sbci	r22, 0xFF	; 255
     7fc:	7f 4f       	sbci	r23, 0xFF	; 255
     7fe:	04 c0       	rjmp	.+8      	; 0x808 <__pack_f+0x136>
     800:	41 5c       	subi	r20, 0xC1	; 193
     802:	5f 4f       	sbci	r21, 0xFF	; 255
     804:	6f 4f       	sbci	r22, 0xFF	; 255
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	77 fd       	sbrc	r23, 7
     80a:	04 c0       	rjmp	.+8      	; 0x814 <__pack_f+0x142>
     80c:	c9 01       	movw	r24, r18
     80e:	81 58       	subi	r24, 0x81	; 129
     810:	9f 4f       	sbci	r25, 0xFF	; 255
     812:	07 c0       	rjmp	.+14     	; 0x822 <__pack_f+0x150>
     814:	76 95       	lsr	r23
     816:	67 95       	ror	r22
     818:	57 95       	ror	r21
     81a:	47 95       	ror	r20
     81c:	c9 01       	movw	r24, r18
     81e:	80 58       	subi	r24, 0x80	; 128
     820:	9f 4f       	sbci	r25, 0xFF	; 255
     822:	97 e0       	ldi	r25, 0x07	; 7
     824:	76 95       	lsr	r23
     826:	67 95       	ror	r22
     828:	57 95       	ror	r21
     82a:	47 95       	ror	r20
     82c:	9a 95       	dec	r25
     82e:	d1 f7       	brne	.-12     	; 0x824 <__pack_f+0x152>
     830:	0b c0       	rjmp	.+22     	; 0x848 <__pack_f+0x176>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	05 c0       	rjmp	.+10     	; 0x842 <__pack_f+0x170>
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	05 c0       	rjmp	.+10     	; 0x848 <__pack_f+0x176>
     83e:	8f ef       	ldi	r24, 0xFF	; 255
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	ba 01       	movw	r22, r20
     848:	98 2f       	mov	r25, r24
     84a:	96 95       	lsr	r25
     84c:	e0 fb       	bst	r30, 0
     84e:	97 f9       	bld	r25, 7
     850:	36 2f       	mov	r19, r22
     852:	80 fb       	bst	r24, 0
     854:	37 f9       	bld	r19, 7
     856:	64 2f       	mov	r22, r20
     858:	75 2f       	mov	r23, r21
     85a:	83 2f       	mov	r24, r19
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	08 95       	ret

00000866 <__unpack_f>:
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	dc 01       	movw	r26, r24
     86e:	fb 01       	movw	r30, r22
     870:	cc 90       	ld	r12, X
     872:	11 96       	adiw	r26, 0x01	; 1
     874:	dc 90       	ld	r13, X
     876:	11 97       	sbiw	r26, 0x01	; 1
     878:	12 96       	adiw	r26, 0x02	; 2
     87a:	8c 91       	ld	r24, X
     87c:	12 97       	sbiw	r26, 0x02	; 2
     87e:	3f e7       	ldi	r19, 0x7F	; 127
     880:	e3 2e       	mov	r14, r19
     882:	e8 22       	and	r14, r24
     884:	6e 2d       	mov	r22, r14
     886:	a6 01       	movw	r20, r12
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	98 2f       	mov	r25, r24
     88c:	99 1f       	adc	r25, r25
     88e:	99 27       	eor	r25, r25
     890:	99 1f       	adc	r25, r25
     892:	13 96       	adiw	r26, 0x03	; 3
     894:	2c 91       	ld	r18, X
     896:	82 2f       	mov	r24, r18
     898:	88 0f       	add	r24, r24
     89a:	89 2b       	or	r24, r25
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	27 fb       	bst	r18, 7
     8a0:	22 27       	eor	r18, r18
     8a2:	20 f9       	bld	r18, 0
     8a4:	21 83       	std	Z+1, r18	; 0x01
     8a6:	00 97       	sbiw	r24, 0x00	; 0
     8a8:	29 f5       	brne	.+74     	; 0x8f4 <__unpack_f+0x8e>
     8aa:	41 15       	cp	r20, r1
     8ac:	51 05       	cpc	r21, r1
     8ae:	61 05       	cpc	r22, r1
     8b0:	71 05       	cpc	r23, r1
     8b2:	11 f4       	brne	.+4      	; 0x8b8 <__unpack_f+0x52>
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	27 c0       	rjmp	.+78     	; 0x906 <__unpack_f+0xa0>
     8b8:	82 e8       	ldi	r24, 0x82	; 130
     8ba:	9f ef       	ldi	r25, 0xFF	; 255
     8bc:	93 83       	std	Z+3, r25	; 0x03
     8be:	82 83       	std	Z+2, r24	; 0x02
     8c0:	27 e0       	ldi	r18, 0x07	; 7
     8c2:	44 0f       	add	r20, r20
     8c4:	55 1f       	adc	r21, r21
     8c6:	66 1f       	adc	r22, r22
     8c8:	77 1f       	adc	r23, r23
     8ca:	2a 95       	dec	r18
     8cc:	d1 f7       	brne	.-12     	; 0x8c2 <__unpack_f+0x5c>
     8ce:	83 e0       	ldi	r24, 0x03	; 3
     8d0:	80 83       	st	Z, r24
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__unpack_f+0x80>
     8d4:	44 0f       	add	r20, r20
     8d6:	55 1f       	adc	r21, r21
     8d8:	66 1f       	adc	r22, r22
     8da:	77 1f       	adc	r23, r23
     8dc:	82 81       	ldd	r24, Z+2	; 0x02
     8de:	93 81       	ldd	r25, Z+3	; 0x03
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	93 83       	std	Z+3, r25	; 0x03
     8e4:	82 83       	std	Z+2, r24	; 0x02
     8e6:	41 15       	cp	r20, r1
     8e8:	51 05       	cpc	r21, r1
     8ea:	61 05       	cpc	r22, r1
     8ec:	80 e4       	ldi	r24, 0x40	; 64
     8ee:	78 07       	cpc	r23, r24
     8f0:	88 f3       	brcs	.-30     	; 0x8d4 <__unpack_f+0x6e>
     8f2:	20 c0       	rjmp	.+64     	; 0x934 <__unpack_f+0xce>
     8f4:	8f 3f       	cpi	r24, 0xFF	; 255
     8f6:	91 05       	cpc	r25, r1
     8f8:	79 f4       	brne	.+30     	; 0x918 <__unpack_f+0xb2>
     8fa:	41 15       	cp	r20, r1
     8fc:	51 05       	cpc	r21, r1
     8fe:	61 05       	cpc	r22, r1
     900:	71 05       	cpc	r23, r1
     902:	19 f4       	brne	.+6      	; 0x90a <__unpack_f+0xa4>
     904:	84 e0       	ldi	r24, 0x04	; 4
     906:	80 83       	st	Z, r24
     908:	19 c0       	rjmp	.+50     	; 0x93c <__unpack_f+0xd6>
     90a:	e4 fe       	sbrs	r14, 4
     90c:	03 c0       	rjmp	.+6      	; 0x914 <__unpack_f+0xae>
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 83       	st	Z, r24
     912:	10 c0       	rjmp	.+32     	; 0x934 <__unpack_f+0xce>
     914:	10 82       	st	Z, r1
     916:	0e c0       	rjmp	.+28     	; 0x934 <__unpack_f+0xce>
     918:	8f 57       	subi	r24, 0x7F	; 127
     91a:	91 09       	sbc	r25, r1
     91c:	93 83       	std	Z+3, r25	; 0x03
     91e:	82 83       	std	Z+2, r24	; 0x02
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	80 83       	st	Z, r24
     924:	87 e0       	ldi	r24, 0x07	; 7
     926:	44 0f       	add	r20, r20
     928:	55 1f       	adc	r21, r21
     92a:	66 1f       	adc	r22, r22
     92c:	77 1f       	adc	r23, r23
     92e:	8a 95       	dec	r24
     930:	d1 f7       	brne	.-12     	; 0x926 <__unpack_f+0xc0>
     932:	70 64       	ori	r23, 0x40	; 64
     934:	44 83       	std	Z+4, r20	; 0x04
     936:	55 83       	std	Z+5, r21	; 0x05
     938:	66 83       	std	Z+6, r22	; 0x06
     93a:	77 83       	std	Z+7, r23	; 0x07
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	cf 90       	pop	r12
     942:	08 95       	ret

00000944 <__vector_4>:

//=== Interrupt handler for OutputCompare2 match (OC2) interrupt

//SIGNAL(SIG_OUTPUT_COMPARE2)
ISR(TIMER2_COMP_vect)
{
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	2f 93       	push	r18
     950:	3f 93       	push	r19
     952:	4f 93       	push	r20
     954:	5f 93       	push	r21
     956:	6f 93       	push	r22
     958:	7f 93       	push	r23
     95a:	8f 93       	push	r24
     95c:	9f 93       	push	r25
     95e:	af 93       	push	r26
     960:	bf 93       	push	r27
     962:	ef 93       	push	r30
     964:	ff 93       	push	r31
  time_update();
     966:	0e 94 22 07 	call	0xe44	; 0xe44 <time_update>
}
     96a:	ff 91       	pop	r31
     96c:	ef 91       	pop	r30
     96e:	bf 91       	pop	r27
     970:	af 91       	pop	r26
     972:	9f 91       	pop	r25
     974:	8f 91       	pop	r24
     976:	7f 91       	pop	r23
     978:	6f 91       	pop	r22
     97a:	5f 91       	pop	r21
     97c:	4f 91       	pop	r20
     97e:	3f 91       	pop	r19
     980:	2f 91       	pop	r18
     982:	0f 90       	pop	r0
     984:	0f be       	out	0x3f, r0	; 63
     986:	0f 90       	pop	r0
     988:	1f 90       	pop	r1
     98a:	18 95       	reti

0000098c <main>:
int main(void)
{
  int i_minor=0;
  int i_ring;
  
  time_init( 2, TIME_8MHZ);
     98c:	40 e4       	ldi	r20, 0x40	; 64
     98e:	5f e1       	ldi	r21, 0x1F	; 31
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	0e 94 f4 06 	call	0xde8	; 0xde8 <time_init>
  time_init_ocie2();
     99a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <time_init_ocie2>

  io_usart_init(9600,IO_USART_8MHZ);
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	52 e1       	ldi	r21, 0x12	; 18
     9a2:	6a e7       	ldi	r22, 0x7A	; 122
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	80 e8       	ldi	r24, 0x80	; 128
     9a8:	95 e2       	ldi	r25, 0x25	; 37
     9aa:	0e 94 b7 07 	call	0xf6e	; 0xf6e <io_usart_init>
  
  //--- Init of objects ---
  task_tc_init(&t_temp, 
     9ae:	80 e1       	ldi	r24, 0x10	; 16
     9b0:	e8 2e       	mov	r14, r24
     9b2:	00 e2       	ldi	r16, 0x20	; 32
     9b4:	20 e4       	ldi	r18, 0x40	; 64
     9b6:	40 e8       	ldi	r20, 0x80	; 128
     9b8:	6b e3       	ldi	r22, 0x3B	; 59
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	8d ea       	ldi	r24, 0xAD	; 173
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 17 08 	call	0x102e	; 0x102e <task_tc_init>
               SENSOR_SMT160_D7,
               TASK_TC_D6,
               TASK_TC_D5,
               TASK_TC_D4
              );
  task_dice_init(&t_dice,&PORTA,0x01);
     9c4:	41 e0       	ldi	r20, 0x01	; 1
     9c6:	6b e3       	ldi	r22, 0x3B	; 59
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	88 e9       	ldi	r24, 0x98	; 152
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 3e 09 	call	0x127c	; 0x127c <task_dice_init>
  task_ring_init(&t_ring,&PORTB);
     9d2:	68 e3       	ldi	r22, 0x38	; 56
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	88 ea       	ldi	r24, 0xA8	; 168
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 78 09 	call	0x12f0	; 0x12f0 <task_ring_init>

  task_ring_main(&t_ring);
     9de:	88 ea       	ldi	r24, 0xA8	; 168
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 84 09 	call	0x1308	; 0x1308 <task_ring_main>
  task_ring_main(&t_ring);
     9e6:	88 ea       	ldi	r24, 0xA8	; 168
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 84 09 	call	0x1308	; 0x1308 <task_ring_main>
  task_ring_main(&t_ring);
     9ee:	88 ea       	ldi	r24, 0xA8	; 168
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 84 09 	call	0x1308	; 0x1308 <task_ring_main>
  task_ring_main(&t_ring);
     9f6:	88 ea       	ldi	r24, 0xA8	; 168
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 84 09 	call	0x1308	; 0x1308 <task_ring_main>
  task_ring_main(&t_ring);
     9fe:	88 ea       	ldi	r24, 0xA8	; 168
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 84 09 	call	0x1308	; 0x1308 <task_ring_main>
  task_ring_main(&t_ring);
     a06:	88 ea       	ldi	r24, 0xA8	; 168
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 84 09 	call	0x1308	; 0x1308 <task_ring_main>
  task_ring_main(&t_ring);
     a0e:	88 ea       	ldi	r24, 0xA8	; 168
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 84 09 	call	0x1308	; 0x1308 <task_ring_main>
  task_ring_main(&t_ring);
     a16:	88 ea       	ldi	r24, 0xA8	; 168
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 84 09 	call	0x1308	; 0x1308 <task_ring_main>
  
  time_get(&t);
     a1e:	80 e9       	ldi	r24, 0x90	; 144
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 50 07 	call	0xea0	; 0xea0 <time_get>

  sei();
     a26:	78 94       	sei
  
  while ( 1 )
    { 
      i_ring = 2; //Minor cycle 2
     a28:	02 e0       	ldi	r16, 0x02	; 2
     a2a:	10 e0       	ldi	r17, 0x00	; 0
      for (i_minor=0; i_minor < 420; i_minor++)
     a2c:	c0 e0       	ldi	r28, 0x00	; 0
     a2e:	d0 e0       	ldi	r29, 0x00	; 0
        {
          task_dice_main(&t_dice); //Every minor cycle
     a30:	88 e9       	ldi	r24, 0x98	; 152
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 43 09 	call	0x1286	; 0x1286 <task_dice_main>
          
          if ( i_minor == i_ring ) //Every 6th minor cycle
     a38:	c0 17       	cp	r28, r16
     a3a:	d1 07       	cpc	r29, r17
     a3c:	39 f4       	brne	.+14     	; 0xa4c <main+0xc0>
            {
              task_ring_main(&t_ring);
     a3e:	88 ea       	ldi	r24, 0xA8	; 168
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 84 09 	call	0x1308	; 0x1308 <task_ring_main>
              i_ring +=6;
     a46:	8e 01       	movw	r16, r28
     a48:	0a 5f       	subi	r16, 0xFA	; 250
     a4a:	1f 4f       	sbci	r17, 0xFF	; 255
            }
          if ( i_minor == 1 )
     a4c:	c1 30       	cpi	r28, 0x01	; 1
     a4e:	d1 05       	cpc	r29, r1
     a50:	21 f4       	brne	.+8      	; 0xa5a <main+0xce>
            task_tc_main(&t_temp);   //Every major cycle
     a52:	8d ea       	ldi	r24, 0xAD	; 173
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <task_tc_main>
          
          t=t+Tminor; 
     a5a:	20 91 90 00 	lds	r18, 0x0090
     a5e:	30 91 91 00 	lds	r19, 0x0091
     a62:	40 91 92 00 	lds	r20, 0x0092
     a66:	50 91 93 00 	lds	r21, 0x0093
     a6a:	60 91 94 00 	lds	r22, 0x0094
     a6e:	70 91 95 00 	lds	r23, 0x0095
     a72:	80 91 96 00 	lds	r24, 0x0096
     a76:	90 91 97 00 	lds	r25, 0x0097
     a7a:	a2 e3       	ldi	r26, 0x32	; 50
     a7c:	0e 94 17 0a 	call	0x142e	; 0x142e <__adddi3_s8>
     a80:	20 93 90 00 	sts	0x0090, r18
     a84:	30 93 91 00 	sts	0x0091, r19
     a88:	40 93 92 00 	sts	0x0092, r20
     a8c:	50 93 93 00 	sts	0x0093, r21
     a90:	60 93 94 00 	sts	0x0094, r22
     a94:	70 93 95 00 	sts	0x0095, r23
     a98:	80 93 96 00 	sts	0x0096, r24
     a9c:	90 93 97 00 	sts	0x0097, r25
          time_wait_until(&t);
     aa0:	80 e9       	ldi	r24, 0x90	; 144
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 76 07 	call	0xeec	; 0xeec <time_wait_until>
  sei();
  
  while ( 1 )
    { 
      i_ring = 2; //Minor cycle 2
      for (i_minor=0; i_minor < 420; i_minor++)
     aa8:	21 96       	adiw	r28, 0x01	; 1
     aaa:	c4 3a       	cpi	r28, 0xA4	; 164
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	d8 07       	cpc	r29, r24
     ab0:	0c f4       	brge	.+2      	; 0xab4 <main+0x128>
     ab2:	be cf       	rjmp	.-132    	; 0xa30 <main+0xa4>
     ab4:	b9 cf       	rjmp	.-142    	; 0xa28 <main+0x9c>

00000ab6 <lcd4_delay>:
/**  \ingroup lcd4
    Private method to do an internal delay when accessing the LCD.
    \param this Pointer to an lcd4 object/variable.
 */
void lcd4_delay(lcd4 *this)
{
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	00 d0       	rcall	.+0      	; 0xabc <lcd4_delay+0x6>
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
  volatile int i;
  for (i=0; i<this->del; i++)
     ac0:	1a 82       	std	Y+2, r1	; 0x02
     ac2:	19 82       	std	Y+1, r1	; 0x01
     ac4:	fc 01       	movw	r30, r24
     ac6:	24 81       	ldd	r18, Z+4	; 0x04
     ac8:	35 81       	ldd	r19, Z+5	; 0x05
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <lcd4_delay+0x20>
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	9a 81       	ldd	r25, Y+2	; 0x02
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	9a 83       	std	Y+2, r25	; 0x02
     ad4:	89 83       	std	Y+1, r24	; 0x01
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	82 17       	cp	r24, r18
     adc:	93 07       	cpc	r25, r19
     ade:	b4 f3       	brlt	.-20     	; 0xacc <lcd4_delay+0x16>
    ;
}
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <lcd4_delaye>:
/** \ingroup lcd4
    Private method to do an internal delay when accessing the LCD.
    \param this Pointer to an lcd4 object/variable.
 */
void lcd4_delaye(lcd4 *this)
{
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <lcd4_delaye+0x6>
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
  volatile int i;
  for (i=0; i<this->delE; i++)
     af4:	1a 82       	std	Y+2, r1	; 0x02
     af6:	19 82       	std	Y+1, r1	; 0x01
     af8:	fc 01       	movw	r30, r24
     afa:	26 81       	ldd	r18, Z+6	; 0x06
     afc:	37 81       	ldd	r19, Z+7	; 0x07
     afe:	05 c0       	rjmp	.+10     	; 0xb0a <lcd4_delaye+0x20>
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	9a 81       	ldd	r25, Y+2	; 0x02
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	9a 83       	std	Y+2, r25	; 0x02
     b08:	89 83       	std	Y+1, r24	; 0x01
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	9a 81       	ldd	r25, Y+2	; 0x02
     b0e:	82 17       	cp	r24, r18
     b10:	93 07       	cpc	r25, r19
     b12:	b4 f3       	brlt	.-20     	; 0xb00 <lcd4_delaye+0x16>
    ;
}
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	08 95       	ret

00000b1e <lcd4_command>:
    \param this Pointer to an lcd4 object/variable.
    \param c Command to the LCD.
    
 */
void lcd4_command(lcd4 *this, char c)
{
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	ec 01       	movw	r28, r24
     b28:	16 2f       	mov	r17, r22
  char t;
 
  // Bits D7-D4
  t=c >> 4;
  t=t & 0x0F;
     b2a:	06 2f       	mov	r16, r22
     b2c:	02 95       	swap	r16
     b2e:	0f 70       	andi	r16, 0x0F	; 15
  *this->port = (*this->port & 0xC0) | t; lcd4_delaye(this);   
     b30:	e8 81       	ld	r30, Y
     b32:	f9 81       	ldd	r31, Y+1	; 0x01
     b34:	80 81       	ld	r24, Z
     b36:	80 7c       	andi	r24, 0xC0	; 192
     b38:	80 2b       	or	r24, r16
     b3a:	80 83       	st	Z, r24
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  t = t | MASK_E;      // E=High
  *this->port = (*this->port & 0xC0) | t; lcd4_delaye(this);
     b42:	e8 81       	ld	r30, Y
     b44:	f9 81       	ldd	r31, Y+1	; 0x01
     b46:	80 81       	ld	r24, Z
     b48:	80 7c       	andi	r24, 0xC0	; 192
 
  // Bits D7-D4
  t=c >> 4;
  t=t & 0x0F;
  *this->port = (*this->port & 0xC0) | t; lcd4_delaye(this);   
  t = t | MASK_E;      // E=High
     b4a:	80 61       	ori	r24, 0x10	; 16
  *this->port = (*this->port & 0xC0) | t; lcd4_delaye(this);
     b4c:	80 2b       	or	r24, r16
     b4e:	80 83       	st	Z, r24
     b50:	ce 01       	movw	r24, r28
     b52:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  t = t & (~MASK_E);   // E=Low
  *this->port = (*this->port & 0xC0) | t;
     b56:	e8 81       	ld	r30, Y
     b58:	f9 81       	ldd	r31, Y+1	; 0x01
     b5a:	80 81       	ld	r24, Z
     b5c:	80 7c       	andi	r24, 0xC0	; 192
     b5e:	80 2b       	or	r24, r16
     b60:	80 83       	st	Z, r24
  lcd4_delay(this);
     b62:	ce 01       	movw	r24, r28
     b64:	0e 94 5b 05 	call	0xab6	; 0xab6 <lcd4_delay>

  // Bits D3-D0
  t = c;
  t=t & 0x0F;
     b68:	1f 70       	andi	r17, 0x0F	; 15
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
     b6a:	e8 81       	ld	r30, Y
     b6c:	f9 81       	ldd	r31, Y+1	; 0x01
     b6e:	80 81       	ld	r24, Z
     b70:	80 7c       	andi	r24, 0xC0	; 192
     b72:	81 2b       	or	r24, r17
     b74:	80 83       	st	Z, r24
     b76:	ce 01       	movw	r24, r28
     b78:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  t = t | MASK_E;      // E=High
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
     b7c:	e8 81       	ld	r30, Y
     b7e:	f9 81       	ldd	r31, Y+1	; 0x01
     b80:	80 81       	ld	r24, Z
     b82:	80 7c       	andi	r24, 0xC0	; 192

  // Bits D3-D0
  t = c;
  t=t & 0x0F;
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
  t = t | MASK_E;      // E=High
     b84:	80 61       	ori	r24, 0x10	; 16
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
     b86:	81 2b       	or	r24, r17
     b88:	80 83       	st	Z, r24
     b8a:	ce 01       	movw	r24, r28
     b8c:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  t = t & (~MASK_E);   // E=Low
  *this->port =  (*this->port & 0xC0) | t;
     b90:	e8 81       	ld	r30, Y
     b92:	f9 81       	ldd	r31, Y+1	; 0x01
     b94:	80 81       	ld	r24, Z
     b96:	80 7c       	andi	r24, 0xC0	; 192
     b98:	81 2b       	or	r24, r17
     b9a:	80 83       	st	Z, r24
  lcd4_delay(this);
     b9c:	ce 01       	movw	r24, r28
  
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
  t = t | MASK_E;      // E=High
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
  t = t & (~MASK_E);   // E=Low
  *this->port =  (*this->port & 0xC0) | t;
  lcd4_delay(this);
     ba6:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <lcd4_delay>

00000baa <lcd4_init>:
    \param ddr  Address to the data direction register associated with the port.
    \param del  Delay parameter, should be tuned, start with 2000.
    \param delE Delay parameter, should be tuned, start with 20.
 */
void lcd4_init(lcd4 *this, volatile unsigned char *port, volatile unsigned char *ddr, int del, int delE)
{
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	7c 01       	movw	r14, r24
     bb8:	eb 01       	movw	r28, r22
  this->port=port;
     bba:	fc 01       	movw	r30, r24
     bbc:	71 83       	std	Z+1, r23	; 0x01
     bbe:	60 83       	st	Z, r22
  this->ddr =ddr;
     bc0:	53 83       	std	Z+3, r21	; 0x03
     bc2:	42 83       	std	Z+2, r20	; 0x02
  this->del =del;
     bc4:	35 83       	std	Z+5, r19	; 0x05
     bc6:	24 83       	std	Z+4, r18	; 0x04
  this->delE=delE;
     bc8:	17 83       	std	Z+7, r17	; 0x07
     bca:	06 83       	std	Z+6, r16	; 0x06

  *ddr = *ddr | 0x3F;
     bcc:	fa 01       	movw	r30, r20
     bce:	80 81       	ld	r24, Z
     bd0:	8f 63       	ori	r24, 0x3F	; 63
     bd2:	80 83       	st	Z, r24
  *port= *port & 0xC0;
     bd4:	88 81       	ld	r24, Y
     bd6:	80 7c       	andi	r24, 0xC0	; 192
     bd8:	88 83       	st	Y, r24
  lcd4_delay(this);
     bda:	c7 01       	movw	r24, r14
     bdc:	0e 94 5b 05 	call	0xab6	; 0xab6 <lcd4_delay>

  *port=(*port & 0xC0) | 0x03; lcd4_delaye(this);
     be0:	88 81       	ld	r24, Y
     be2:	80 7c       	andi	r24, 0xC0	; 192
     be4:	83 60       	ori	r24, 0x03	; 3
     be6:	88 83       	st	Y, r24
     be8:	c7 01       	movw	r24, r14
     bea:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  *port=(*port & 0xC0) | 0x03 |  MASK_E; lcd4_delaye(this);
     bee:	88 81       	ld	r24, Y
     bf0:	80 7c       	andi	r24, 0xC0	; 192
     bf2:	83 61       	ori	r24, 0x13	; 19
     bf4:	88 83       	st	Y, r24
     bf6:	c7 01       	movw	r24, r14
     bf8:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  *port=(*port & 0xC0) | 0x03; 
     bfc:	88 81       	ld	r24, Y
     bfe:	80 7c       	andi	r24, 0xC0	; 192
     c00:	83 60       	ori	r24, 0x03	; 3
     c02:	88 83       	st	Y, r24
  lcd4_delay(this);
     c04:	c7 01       	movw	r24, r14
     c06:	0e 94 5b 05 	call	0xab6	; 0xab6 <lcd4_delay>

  *port=(*port & 0xC0) | 0x03; lcd4_delaye(this);
     c0a:	88 81       	ld	r24, Y
     c0c:	80 7c       	andi	r24, 0xC0	; 192
     c0e:	83 60       	ori	r24, 0x03	; 3
     c10:	88 83       	st	Y, r24
     c12:	c7 01       	movw	r24, r14
     c14:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  *port=(*port & 0xC0) | 0x03 |  MASK_E; lcd4_delaye(this);
     c18:	88 81       	ld	r24, Y
     c1a:	80 7c       	andi	r24, 0xC0	; 192
     c1c:	83 61       	ori	r24, 0x13	; 19
     c1e:	88 83       	st	Y, r24
     c20:	c7 01       	movw	r24, r14
     c22:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  *port=(*port & 0xC0) | 0x03;
     c26:	88 81       	ld	r24, Y
     c28:	80 7c       	andi	r24, 0xC0	; 192
     c2a:	83 60       	ori	r24, 0x03	; 3
     c2c:	88 83       	st	Y, r24
  lcd4_delay(this);
     c2e:	c7 01       	movw	r24, r14
     c30:	0e 94 5b 05 	call	0xab6	; 0xab6 <lcd4_delay>

  *port=(*port & 0xC0) | 0x03; lcd4_delaye(this);
     c34:	88 81       	ld	r24, Y
     c36:	80 7c       	andi	r24, 0xC0	; 192
     c38:	83 60       	ori	r24, 0x03	; 3
     c3a:	88 83       	st	Y, r24
     c3c:	c7 01       	movw	r24, r14
     c3e:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  *port=(*port & 0xC0) | 0x03 |  MASK_E; lcd4_delaye(this);
     c42:	88 81       	ld	r24, Y
     c44:	80 7c       	andi	r24, 0xC0	; 192
     c46:	83 61       	ori	r24, 0x13	; 19
     c48:	88 83       	st	Y, r24
     c4a:	c7 01       	movw	r24, r14
     c4c:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  *port=(*port & 0xC0) | 0x03;
     c50:	88 81       	ld	r24, Y
     c52:	80 7c       	andi	r24, 0xC0	; 192
     c54:	83 60       	ori	r24, 0x03	; 3
     c56:	88 83       	st	Y, r24
  lcd4_delay(this);
     c58:	c7 01       	movw	r24, r14
     c5a:	0e 94 5b 05 	call	0xab6	; 0xab6 <lcd4_delay>


  *port=(*port & 0xC0) | 0x02; lcd4_delaye(this);
     c5e:	88 81       	ld	r24, Y
     c60:	80 7c       	andi	r24, 0xC0	; 192
     c62:	82 60       	ori	r24, 0x02	; 2
     c64:	88 83       	st	Y, r24
     c66:	c7 01       	movw	r24, r14
     c68:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  *port=(*port & 0xC0) | 0x02 |  MASK_E; lcd4_delaye(this);
     c6c:	88 81       	ld	r24, Y
     c6e:	80 7c       	andi	r24, 0xC0	; 192
     c70:	82 61       	ori	r24, 0x12	; 18
     c72:	88 83       	st	Y, r24
     c74:	c7 01       	movw	r24, r14
     c76:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  *port=(*port & 0xC0) | 0x02 ;
     c7a:	88 81       	ld	r24, Y
     c7c:	80 7c       	andi	r24, 0xC0	; 192
     c7e:	82 60       	ori	r24, 0x02	; 2
     c80:	88 83       	st	Y, r24
  lcd4_delay(this);
     c82:	c7 01       	movw	r24, r14
     c84:	0e 94 5b 05 	call	0xab6	; 0xab6 <lcd4_delay>

  lcd4_command(this, 0x28);
     c88:	68 e2       	ldi	r22, 0x28	; 40
     c8a:	c7 01       	movw	r24, r14
     c8c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <lcd4_command>
  lcd4_command(this, 0x0C);
     c90:	6c e0       	ldi	r22, 0x0C	; 12
     c92:	c7 01       	movw	r24, r14
     c94:	0e 94 8f 05 	call	0xb1e	; 0xb1e <lcd4_command>
  lcd4_command(this, 0x01);
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	c7 01       	movw	r24, r14
     c9c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <lcd4_command>
  lcd4_command(this, 0x06);
     ca0:	66 e0       	ldi	r22, 0x06	; 6
     ca2:	c7 01       	movw	r24, r14

}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
  lcd4_delay(this);

  lcd4_command(this, 0x28);
  lcd4_command(this, 0x0C);
  lcd4_command(this, 0x01);
  lcd4_command(this, 0x06);
     cb0:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <lcd4_command>

00000cb4 <lcd4_write_char>:
    \param this Pointer to an lcd4 object/variable.
    \param c Character to be written at actual cursor position on the LCD.
    
 */
void lcd4_write_char(lcd4 *this, char c)
{
     cb4:	ff 92       	push	r15
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
     cc0:	06 2f       	mov	r16, r22
  char t;
 
  // Bits D7-D4
  t=c >> 4;
  t=(t & 0x0F) | MASK_RS;
     cc2:	f6 2e       	mov	r15, r22
     cc4:	f2 94       	swap	r15
     cc6:	8f e0       	ldi	r24, 0x0F	; 15
     cc8:	f8 22       	and	r15, r24
     cca:	1f 2d       	mov	r17, r15
     ccc:	10 62       	ori	r17, 0x20	; 32
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
     cce:	e8 81       	ld	r30, Y
     cd0:	f9 81       	ldd	r31, Y+1	; 0x01
     cd2:	80 81       	ld	r24, Z
     cd4:	80 7c       	andi	r24, 0xC0	; 192
     cd6:	81 2b       	or	r24, r17
     cd8:	80 83       	st	Z, r24
     cda:	ce 01       	movw	r24, r28
     cdc:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  t = t | MASK_E;      // E=High
  *this->port =  (*this->port & 0xC0) | t;           lcd4_delaye(this);
     ce0:	e8 81       	ld	r30, Y
     ce2:	f9 81       	ldd	r31, Y+1	; 0x01
     ce4:	80 81       	ld	r24, Z
     ce6:	80 7c       	andi	r24, 0xC0	; 192
 
  // Bits D7-D4
  t=c >> 4;
  t=(t & 0x0F) | MASK_RS;
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
  t = t | MASK_E;      // E=High
     ce8:	80 63       	ori	r24, 0x30	; 48
  *this->port =  (*this->port & 0xC0) | t;           lcd4_delaye(this);
     cea:	8f 29       	or	r24, r15
     cec:	80 83       	st	Z, r24
     cee:	ce 01       	movw	r24, r28
     cf0:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  t = t & (~MASK_E);   // E=Low
  *this->port =  (*this->port & 0xC0) | t;
     cf4:	e8 81       	ld	r30, Y
     cf6:	f9 81       	ldd	r31, Y+1	; 0x01
     cf8:	80 81       	ld	r24, Z
     cfa:	80 7c       	andi	r24, 0xC0	; 192
     cfc:	81 2b       	or	r24, r17
     cfe:	80 83       	st	Z, r24
  lcd4_delay(this);
     d00:	ce 01       	movw	r24, r28
     d02:	0e 94 5b 05 	call	0xab6	; 0xab6 <lcd4_delay>

  // Bits D3-D0
  t = c ;
  t=(t & 0x0F) | MASK_RS;
     d06:	0f 70       	andi	r16, 0x0F	; 15
     d08:	10 2f       	mov	r17, r16
     d0a:	10 62       	ori	r17, 0x20	; 32
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
     d0c:	e8 81       	ld	r30, Y
     d0e:	f9 81       	ldd	r31, Y+1	; 0x01
     d10:	80 81       	ld	r24, Z
     d12:	80 7c       	andi	r24, 0xC0	; 192
     d14:	81 2b       	or	r24, r17
     d16:	80 83       	st	Z, r24
     d18:	ce 01       	movw	r24, r28
     d1a:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  t = t | MASK_E;      // E=High
  *this->port =  (*this->port & 0xC0) | t;           lcd4_delaye(this);
     d1e:	e8 81       	ld	r30, Y
     d20:	f9 81       	ldd	r31, Y+1	; 0x01
     d22:	80 81       	ld	r24, Z
     d24:	80 7c       	andi	r24, 0xC0	; 192

  // Bits D3-D0
  t = c ;
  t=(t & 0x0F) | MASK_RS;
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
  t = t | MASK_E;      // E=High
     d26:	80 63       	ori	r24, 0x30	; 48
  *this->port =  (*this->port & 0xC0) | t;           lcd4_delaye(this);
     d28:	80 2b       	or	r24, r16
     d2a:	80 83       	st	Z, r24
     d2c:	ce 01       	movw	r24, r28
     d2e:	0e 94 75 05 	call	0xaea	; 0xaea <lcd4_delaye>
  t = t & (~MASK_E);   // E=Low
  *this->port =  (*this->port & 0xC0) | t;
     d32:	e8 81       	ld	r30, Y
     d34:	f9 81       	ldd	r31, Y+1	; 0x01
     d36:	80 81       	ld	r24, Z
     d38:	80 7c       	andi	r24, 0xC0	; 192
     d3a:	81 2b       	or	r24, r17
     d3c:	80 83       	st	Z, r24
  lcd4_delay(this);
     d3e:	ce 01       	movw	r24, r28
}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
  t = t | MASK_E;      // E=High
  *this->port =  (*this->port & 0xC0) | t;           lcd4_delaye(this);
  t = t & (~MASK_E);   // E=Low
  *this->port =  (*this->port & 0xC0) | t;
  lcd4_delay(this);
     d4a:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <lcd4_delay>

00000d4e <lcd4_write_string>:
    Write of a string with start from the current cursor position on the LCD.
    \param this Pointer to an lcd4 object/variable.
    \param s Pointer to the start of the string that shall be written on the LCD.
 */
void lcd4_write_string(lcd4 *this, char *s)
{
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	8c 01       	movw	r16, r24
     d58:	eb 01       	movw	r28, r22
  int i=0;
  
  while ( s[i] != '\0' )
     d5a:	03 c0       	rjmp	.+6      	; 0xd62 <lcd4_write_string+0x14>
    {
        lcd4_write_char(this, s[i]);
     d5c:	c8 01       	movw	r24, r16
     d5e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <lcd4_write_char>
 */
void lcd4_write_string(lcd4 *this, char *s)
{
  int i=0;
  
  while ( s[i] != '\0' )
     d62:	69 91       	ld	r22, Y+
     d64:	61 11       	cpse	r22, r1
     d66:	fa cf       	rjmp	.-12     	; 0xd5c <lcd4_write_string+0xe>
    {
        lcd4_write_char(this, s[i]);
        i++;
    }
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	08 95       	ret

00000d72 <lcd4_cup_row1>:
/** \ingroup lcd4
    Position of the cursor to row 1 and column 1.
    \param this Pointer to an lcd4 object/variable.
 */
void lcd4_cup_row1(lcd4 *this)
{ lcd4_command(this, CmdCUP+0); }
     d72:	60 e8       	ldi	r22, 0x80	; 128
     d74:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <lcd4_command>

00000d78 <counter_init>:
#include "counter.h"

/**  counter_init
  */
void counter_init(counter *this,int max, int min)
{
     d78:	fc 01       	movw	r30, r24
  this->max=max;
     d7a:	71 83       	std	Z+1, r23	; 0x01
     d7c:	60 83       	st	Z, r22
  this->min=min;
     d7e:	53 83       	std	Z+3, r21	; 0x03
     d80:	42 83       	std	Z+2, r20	; 0x02
  this->value=min;
     d82:	55 83       	std	Z+5, r21	; 0x05
     d84:	44 83       	std	Z+4, r20	; 0x04
     d86:	08 95       	ret

00000d88 <counter_inc>:
}

/** counter_inc
  */
int counter_inc(counter *this)
{
     d88:	fc 01       	movw	r30, r24
  int carry=0;
  
  this->value++;
     d8a:	84 81       	ldd	r24, Z+4	; 0x04
     d8c:	95 81       	ldd	r25, Z+5	; 0x05
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	95 83       	std	Z+5, r25	; 0x05
     d92:	84 83       	std	Z+4, r24	; 0x04
  
  if ( this->value > this->max )
     d94:	20 81       	ld	r18, Z
     d96:	31 81       	ldd	r19, Z+1	; 0x01
     d98:	28 17       	cp	r18, r24
     d9a:	39 07       	cpc	r19, r25
     d9c:	3c f4       	brge	.+14     	; 0xdac <counter_inc+0x24>
    {
      this->value=this->min;
     d9e:	82 81       	ldd	r24, Z+2	; 0x02
     da0:	93 81       	ldd	r25, Z+3	; 0x03
     da2:	95 83       	std	Z+5, r25	; 0x05
     da4:	84 83       	std	Z+4, r24	; 0x04
      carry=1;
     da6:	21 e0       	ldi	r18, 0x01	; 1
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <counter_inc+0x28>

/** counter_inc
  */
int counter_inc(counter *this)
{
  int carry=0;
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
    {
      this->value=this->min;
      carry=1;
    }
  return carry;
}
     db0:	c9 01       	movw	r24, r18
     db2:	08 95       	ret

00000db4 <counter_dec>:

/** counter_dec
  */
int counter_dec(counter *this)
{
     db4:	fc 01       	movw	r30, r24
  int carry=0;
  
  this->value--;
     db6:	84 81       	ldd	r24, Z+4	; 0x04
     db8:	95 81       	ldd	r25, Z+5	; 0x05
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	95 83       	std	Z+5, r25	; 0x05
     dbe:	84 83       	std	Z+4, r24	; 0x04
  
  if ( this->value < this->min )
     dc0:	22 81       	ldd	r18, Z+2	; 0x02
     dc2:	33 81       	ldd	r19, Z+3	; 0x03
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	3c f4       	brge	.+14     	; 0xdd8 <counter_dec+0x24>
    {
      this->value=this->max;
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	95 83       	std	Z+5, r25	; 0x05
     dd0:	84 83       	std	Z+4, r24	; 0x04
      carry=1;
     dd2:	21 e0       	ldi	r18, 0x01	; 1
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <counter_dec+0x28>

/** counter_dec
  */
int counter_dec(counter *this)
{
  int carry=0;
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
    {
      this->value=this->max;
      carry=1;
    }
  return carry;
}
     ddc:	c9 01       	movw	r24, r18
     dde:	08 95       	ret

00000de0 <counter_read>:

/** counter_read
  */
int counter_read(counter *this)
{
     de0:	fc 01       	movw	r30, r24
  return this->value;
}
     de2:	84 81       	ldd	r24, Z+4	; 0x04
     de4:	95 81       	ldd	r25, Z+5	; 0x05
     de6:	08 95       	ret

00000de8 <time_init>:
/** \ingroup time
    Init of the time measurement singleton object.
    \param ms Each clock tick interrupt should time counter ms be updated with inc_ms
  */
void time_init(unsigned char ms, long mhz)
{
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
  _gTime.khz = mhz;
     dec:	8a 01       	movw	r16, r20
     dee:	9b 01       	movw	r18, r22
     df0:	00 93 2d 01 	sts	0x012D, r16
     df4:	10 93 2e 01 	sts	0x012E, r17
     df8:	20 93 2f 01 	sts	0x012F, r18
     dfc:	30 93 30 01 	sts	0x0130, r19
  _gTime.inc_ms = ms;
     e00:	80 93 31 01 	sts	0x0131, r24
  _gTime.ms = 0;
     e04:	e5 e2       	ldi	r30, 0x25	; 37
     e06:	f1 e0       	ldi	r31, 0x01	; 1
     e08:	10 82       	st	Z, r1
     e0a:	11 82       	std	Z+1, r1	; 0x01
     e0c:	12 82       	std	Z+2, r1	; 0x02
     e0e:	13 82       	std	Z+3, r1	; 0x03
     e10:	14 82       	std	Z+4, r1	; 0x04
     e12:	15 82       	std	Z+5, r1	; 0x05
     e14:	16 82       	std	Z+6, r1	; 0x06
     e16:	17 82       	std	Z+7, r1	; 0x07
}
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	08 95       	ret

00000e1e <time_init_ocie2>:
      time_update();
    }
  */
void time_init_ocie2(void)
{
  bTCCR2.cs2   =4;//Clock prescaler CK/64
     e1e:	85 b5       	in	r24, 0x25	; 37
     e20:	88 7f       	andi	r24, 0xF8	; 248
     e22:	84 60       	ori	r24, 0x04	; 4
     e24:	85 bd       	out	0x25, r24	; 37
  bTCCR2.wgm21 =1;
     e26:	85 b5       	in	r24, 0x25	; 37
     e28:	88 60       	ori	r24, 0x08	; 8
     e2a:	85 bd       	out	0x25, r24	; 37
  bTIMSK.ocie2 =1;
     e2c:	89 b7       	in	r24, 0x39	; 57
     e2e:	80 68       	ori	r24, 0x80	; 128
     e30:	89 bf       	out	0x39, r24	; 57
    if (_gTime.inc_ms==2)
     e32:	80 91 31 01 	lds	r24, 0x0131
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	11 f4       	brne	.+4      	; 0xe3e <time_init_ocie2+0x20>
    OCR2= (unsigned char) 250;
     e3a:	8a ef       	ldi	r24, 0xFA	; 250
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <time_init_ocie2+0x22>
  else
    OCR2= (unsigned char) 125; 
     e3e:	8d e7       	ldi	r24, 0x7D	; 125
     e40:	83 bd       	out	0x23, r24	; 35
     e42:	08 95       	ret

00000e44 <time_update>:

/** \ingroup time
    This function should be called in an interrupt service routine.
  */
void time_update(void)
{
     e44:	af 92       	push	r10
     e46:	bf 92       	push	r11
     e48:	cf 92       	push	r12
     e4a:	df 92       	push	r13
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
  _gTime.ms = _gTime.ms + _gTime.inc_ms;
     e54:	e5 e2       	ldi	r30, 0x25	; 37
     e56:	f1 e0       	ldi	r31, 0x01	; 1
     e58:	a0 80       	ld	r10, Z
     e5a:	b1 80       	ldd	r11, Z+1	; 0x01
     e5c:	c2 80       	ldd	r12, Z+2	; 0x02
     e5e:	d3 80       	ldd	r13, Z+3	; 0x03
     e60:	e4 80       	ldd	r14, Z+4	; 0x04
     e62:	f5 80       	ldd	r15, Z+5	; 0x05
     e64:	06 81       	ldd	r16, Z+6	; 0x06
     e66:	17 81       	ldd	r17, Z+7	; 0x07
     e68:	20 91 31 01 	lds	r18, 0x0131
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 0e 0a 	call	0x141c	; 0x141c <__adddi3>
     e7e:	20 83       	st	Z, r18
     e80:	31 83       	std	Z+1, r19	; 0x01
     e82:	42 83       	std	Z+2, r20	; 0x02
     e84:	53 83       	std	Z+3, r21	; 0x03
     e86:	64 83       	std	Z+4, r22	; 0x04
     e88:	75 83       	std	Z+5, r23	; 0x05
     e8a:	86 83       	std	Z+6, r24	; 0x06
     e8c:	97 83       	std	Z+7, r25	; 0x07
}
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	08 95       	ret

00000ea0 <time_get>:
    Read of the clocks actual time.
    \param p_ms Pointer to the variable which should be assigned the actual time value.
  */
  
void time_get(unsigned long long *p_ms)
{
     ea0:	cf 93       	push	r28
     ea2:	fc 01       	movw	r30, r24
  unsigned char sreg;
  sreg = SREG;
     ea4:	8f b7       	in	r24, 0x3f	; 63
  cli();
     ea6:	f8 94       	cli
  *p_ms = _gTime.ms;
     ea8:	a5 e2       	ldi	r26, 0x25	; 37
     eaa:	b1 e0       	ldi	r27, 0x01	; 1
     eac:	cc 91       	ld	r28, X
     eae:	11 96       	adiw	r26, 0x01	; 1
     eb0:	7c 91       	ld	r23, X
     eb2:	11 97       	sbiw	r26, 0x01	; 1
     eb4:	12 96       	adiw	r26, 0x02	; 2
     eb6:	6c 91       	ld	r22, X
     eb8:	12 97       	sbiw	r26, 0x02	; 2
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	5c 91       	ld	r21, X
     ebe:	13 97       	sbiw	r26, 0x03	; 3
     ec0:	14 96       	adiw	r26, 0x04	; 4
     ec2:	4c 91       	ld	r20, X
     ec4:	14 97       	sbiw	r26, 0x04	; 4
     ec6:	15 96       	adiw	r26, 0x05	; 5
     ec8:	3c 91       	ld	r19, X
     eca:	15 97       	sbiw	r26, 0x05	; 5
     ecc:	16 96       	adiw	r26, 0x06	; 6
     ece:	2c 91       	ld	r18, X
     ed0:	16 97       	sbiw	r26, 0x06	; 6
     ed2:	17 96       	adiw	r26, 0x07	; 7
     ed4:	9c 91       	ld	r25, X
     ed6:	c0 83       	st	Z, r28
     ed8:	71 83       	std	Z+1, r23	; 0x01
     eda:	62 83       	std	Z+2, r22	; 0x02
     edc:	53 83       	std	Z+3, r21	; 0x03
     ede:	44 83       	std	Z+4, r20	; 0x04
     ee0:	35 83       	std	Z+5, r19	; 0x05
     ee2:	26 83       	std	Z+6, r18	; 0x06
     ee4:	97 83       	std	Z+7, r25	; 0x07
  SREG = sreg;
     ee6:	8f bf       	out	0x3f, r24	; 63
}
     ee8:	cf 91       	pop	r28
     eea:	08 95       	ret

00000eec <time_wait_until>:
    Looping until the clock time is *tWait.
    \param tWait Pointer to the variable which holds the time we are waiting until.
  */

void time_wait_until( unsigned long long *tWait)
{
     eec:	8f 92       	push	r8
     eee:	9f 92       	push	r9
     ef0:	af 92       	push	r10
     ef2:	bf 92       	push	r11
     ef4:	cf 92       	push	r12
     ef6:	df 92       	push	r13
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	28 97       	sbiw	r28, 0x08	; 8
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	4c 01       	movw	r8, r24
  unsigned long long t;
  
  do
    {
      time_get(&t);
     f16:	ce 01       	movw	r24, r28
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	0e 94 50 07 	call	0xea0	; 0xea0 <time_get>
      //_time_string(); //test
    }
  while ( *tWait >  t );
     f1e:	f4 01       	movw	r30, r8
     f20:	20 81       	ld	r18, Z
     f22:	31 81       	ldd	r19, Z+1	; 0x01
     f24:	42 81       	ldd	r20, Z+2	; 0x02
     f26:	53 81       	ldd	r21, Z+3	; 0x03
     f28:	64 81       	ldd	r22, Z+4	; 0x04
     f2a:	75 81       	ldd	r23, Z+5	; 0x05
     f2c:	a9 80       	ldd	r10, Y+1	; 0x01
     f2e:	ba 80       	ldd	r11, Y+2	; 0x02
     f30:	cb 80       	ldd	r12, Y+3	; 0x03
     f32:	dc 80       	ldd	r13, Y+4	; 0x04
     f34:	ed 80       	ldd	r14, Y+5	; 0x05
     f36:	fe 80       	ldd	r15, Y+6	; 0x06
     f38:	0f 81       	ldd	r16, Y+7	; 0x07
     f3a:	18 85       	ldd	r17, Y+8	; 0x08
     f3c:	86 81       	ldd	r24, Z+6	; 0x06
     f3e:	97 81       	ldd	r25, Z+7	; 0x07
     f40:	0e 94 23 0a 	call	0x1446	; 0x1446 <__cmpdi2>
     f44:	09 f0       	breq	.+2      	; 0xf48 <time_wait_until+0x5c>
     f46:	38 f7       	brcc	.-50     	; 0xf16 <time_wait_until+0x2a>
}
     f48:	28 96       	adiw	r28, 0x08	; 8
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	df 90       	pop	r13
     f62:	cf 90       	pop	r12
     f64:	bf 90       	pop	r11
     f66:	af 90       	pop	r10
     f68:	9f 90       	pop	r9
     f6a:	8f 90       	pop	r8
     f6c:	08 95       	ret

00000f6e <io_usart_init>:
    \param baud Selected baud rate for example 9600.
    \param megahertz CPU clock frequency (IO_USART_16MHZ, .. ,IO_USART_1MHZ ).
  */
	
void io_usart_init( unsigned int baud, unsigned long megahertz)
{
     f6e:	9c 01       	movw	r18, r24
     f70:	cb 01       	movw	r24, r22
     f72:	ba 01       	movw	r22, r20
  unsigned int baudreg = (megahertz/(baud*16l)-1);
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	e4 e0       	ldi	r30, 0x04	; 4
     f7a:	22 0f       	add	r18, r18
     f7c:	33 1f       	adc	r19, r19
     f7e:	44 1f       	adc	r20, r20
     f80:	55 1f       	adc	r21, r21
     f82:	ea 95       	dec	r30
     f84:	d1 f7       	brne	.-12     	; 0xf7a <io_usart_init+0xc>
     f86:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__udivmodsi4>
     f8a:	21 50       	subi	r18, 0x01	; 1
     f8c:	31 09       	sbc	r19, r1
  //...Set baud rate...
  UBRRH = (unsigned char)(baudreg>>8);
     f8e:	30 bd       	out	0x20, r19	; 32
  UBRRL = (unsigned char)baudreg;
     f90:	29 b9       	out	0x09, r18	; 9
  //...Enable receiver and transmitter...
  UCSRB = (1<<RXEN)|(1<<TXEN);
     f92:	88 e1       	ldi	r24, 0x18	; 24
     f94:	8a b9       	out	0x0a, r24	; 10
  //...Set frame format: 1 start, 8 data, 2 stop bits...
  UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     f96:	8e e8       	ldi	r24, 0x8E	; 142
     f98:	80 bd       	out	0x20, r24	; 32
     f9a:	08 95       	ret

00000f9c <io_usart_write_char>:

  */
int io_usart_write_char( char data )
{
  //...Wait for empty transmit buffer...
  while ( !( UCSRA & (1<<UDRE)) )
     f9c:	5d 9b       	sbis	0x0b, 5	; 11
     f9e:	fe cf       	rjmp	.-4      	; 0xf9c <io_usart_write_char>
        ; //empty loop
                          
  //...Put data into buffer, sends the data...
  UDR = data;
     fa0:	8c b9       	out	0x0c, r24	; 12

  return 1;
}
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	08 95       	ret

00000fa8 <io_usart_write_string>:
/** \ingroup io_usart
    Write of a null terminated string.
    \param s Null terminated string to be written to the transmitter unit.
  */
void io_usart_write_string(char *s)
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	ec 01       	movw	r28, r24
  while (*s)
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <io_usart_write_string+0xc>
    io_usart_write_char(*s++);
     fb0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <io_usart_write_char>
    Write of a null terminated string.
    \param s Null terminated string to be written to the transmitter unit.
  */
void io_usart_write_string(char *s)
{
  while (*s)
     fb4:	89 91       	ld	r24, Y+
     fb6:	81 11       	cpse	r24, r1
     fb8:	fb cf       	rjmp	.-10     	; 0xfb0 <io_usart_write_string+0x8>
    io_usart_write_char(*s++);
}
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <io_usart_cup>:
    Cursor positioning in a terminal window with ESCape sequences.
    \param x Column position.
    \param y Row position.
  */
void io_usart_cup(int x, int y)
{
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	66 97       	sbiw	r28, 0x16	; 22
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	18 2f       	mov	r17, r24
     fda:	09 2f       	mov	r16, r25
  char s[20];

  io_usart_write_char(0x1B); //ESCape
     fdc:	8b e1       	ldi	r24, 0x1B	; 27
     fde:	6d 8b       	std	Y+21, r22	; 0x15
     fe0:	7e 8b       	std	Y+22, r23	; 0x16
     fe2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <io_usart_write_char>
  sprintf(s,"[%d;%dH",y,x);
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	7e 89       	ldd	r23, Y+22	; 0x16
     fec:	7f 93       	push	r23
     fee:	6d 89       	ldd	r22, Y+21	; 0x15
     ff0:	6f 93       	push	r22
     ff2:	8f e6       	ldi	r24, 0x6F	; 111
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	9f 93       	push	r25
     ff8:	8f 93       	push	r24
     ffa:	8e 01       	movw	r16, r28
     ffc:	0f 5f       	subi	r16, 0xFF	; 255
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	1f 93       	push	r17
    1002:	0f 93       	push	r16
    1004:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <sprintf>
  io_usart_write_string(s);
    1008:	c8 01       	movw	r24, r16
    100a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <io_usart_write_string>
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
}
    1018:	66 96       	adiw	r28, 0x16	; 22
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	08 95       	ret

0000102e <task_tc_init>:
                  unsigned char bit_mask_sensor,
                  unsigned char bit_mask_actuator,
                  unsigned char bit_mask_incr,
                  unsigned char bit_mask_decr
                  )
{
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	1f 92       	push	r1
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	5c 01       	movw	r10, r24
    104a:	6b 01       	movw	r12, r22
    104c:	f0 2e       	mov	r15, r16
  sensor_smt160_init(&this->y_temp, port, bit_mask_sensor);
    104e:	80 5c       	subi	r24, 0xC0	; 192
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	29 83       	std	Y+1, r18	; 0x01
    1054:	0e 94 0d 09 	call	0x121a	; 0x121a <sensor_smt160_init>
  io_do_init(&this->u_heater,port,bit_mask_actuator);
    1058:	29 81       	ldd	r18, Y+1	; 0x01
    105a:	42 2f       	mov	r20, r18
    105c:	b6 01       	movw	r22, r12
    105e:	c5 01       	movw	r24, r10
    1060:	82 5a       	subi	r24, 0xA2	; 162
    1062:	9f 4f       	sbci	r25, 0xFF	; 255
    1064:	0e 94 b3 09 	call	0x1366	; 0x1366 <io_do_init>
  lcd4_init(&this->display, &PORTC, &DDRC, 4000, 50);
    1068:	02 e3       	ldi	r16, 0x32	; 50
    106a:	10 e0       	ldi	r17, 0x00	; 0
    106c:	20 ea       	ldi	r18, 0xA0	; 160
    106e:	3f e0       	ldi	r19, 0x0F	; 15
    1070:	44 e3       	ldi	r20, 0x34	; 52
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	65 e3       	ldi	r22, 0x35	; 53
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	c5 01       	movw	r24, r10
    107a:	8a 59       	subi	r24, 0x9A	; 154
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <lcd4_init>
  io_di_init(&this->r_inc, port, bit_mask_incr);
    1082:	4f 2d       	mov	r20, r15
    1084:	b6 01       	movw	r22, r12
    1086:	c5 01       	movw	r24, r10
    1088:	88 5b       	subi	r24, 0xB8	; 184
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	0e 94 92 09 	call	0x1324	; 0x1324 <io_di_init>
  io_di_init(&this->r_dec, port, bit_mask_decr);
    1090:	4e 2d       	mov	r20, r14
    1092:	b6 01       	movw	r22, r12
    1094:	c5 01       	movw	r24, r10
    1096:	80 5b       	subi	r24, 0xB0	; 176
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	0e 94 92 09 	call	0x1324	; 0x1324 <io_di_init>
  counter_init(&this->r_temp,50,10);
    109e:	4a e0       	ldi	r20, 0x0A	; 10
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	62 e3       	ldi	r22, 0x32	; 50
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	c5 01       	movw	r24, r10
    10a8:	88 5a       	subi	r24, 0xA8	; 168
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	0e 94 bc 06 	call	0xd78	; 0xd78 <counter_init>
  relay_init(&this->controller,1);;
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	c5 01       	movw	r24, r10
    10b6:	82 59       	subi	r24, 0x92	; 146
    10b8:	9f 4f       	sbci	r25, 0xFF	; 255
}
    10ba:	0f 90       	pop	r0
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	bf 90       	pop	r11
    10ce:	af 90       	pop	r10
  io_do_init(&this->u_heater,port,bit_mask_actuator);
  lcd4_init(&this->display, &PORTC, &DDRC, 4000, 50);
  io_di_init(&this->r_inc, port, bit_mask_incr);
  io_di_init(&this->r_dec, port, bit_mask_decr);
  counter_init(&this->r_temp,50,10);
  relay_init(&this->controller,1);;
    10d0:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <relay_init>

000010d4 <task_tc_main>:
    The main function for the task.
    \param this Pointer to a task_tc object/variable.
  */

void task_tc_main( task_tc *this )
{ 
    10d4:	ef 92       	push	r14
    10d6:	ff 92       	push	r15
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	ec 01       	movw	r28, r24
  if ( io_di_read(&this->r_inc) )
    10e2:	88 5b       	subi	r24, 0xB8	; 184
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	0e 94 a3 09 	call	0x1346	; 0x1346 <io_di_read>
    10ea:	89 2b       	or	r24, r25
    10ec:	29 f0       	breq	.+10     	; 0x10f8 <task_tc_main+0x24>
    counter_inc(&this->r_temp);
    10ee:	ce 01       	movw	r24, r28
    10f0:	88 5a       	subi	r24, 0xA8	; 168
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	0e 94 c4 06 	call	0xd88	; 0xd88 <counter_inc>
  
  if ( io_di_read(&this->r_dec) )
    10f8:	ce 01       	movw	r24, r28
    10fa:	80 5b       	subi	r24, 0xB0	; 176
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	0e 94 a3 09 	call	0x1346	; 0x1346 <io_di_read>
    1102:	8e 01       	movw	r16, r28
    1104:	08 5a       	subi	r16, 0xA8	; 168
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	89 2b       	or	r24, r25
    110a:	19 f0       	breq	.+6      	; 0x1112 <task_tc_main+0x3e>
    counter_dec(&this->r_temp);
    110c:	c8 01       	movw	r24, r16
    110e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <counter_dec>
  
  this->r = counter_read(&this->r_temp);
    1112:	c8 01       	movw	r24, r16
    1114:	0e 94 f0 06 	call	0xde0	; 0xde0 <counter_read>
    1118:	8e 01       	movw	r16, r28
    111a:	0e 58       	subi	r16, 0x8E	; 142
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
    111e:	f8 01       	movw	r30, r16
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
  
  this->y = (int) (sensor_smt160_read(&this->y_temp)+0.5);
    1124:	ce 01       	movw	r24, r28
    1126:	80 5c       	subi	r24, 0xC0	; 192
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	0e 94 1e 09 	call	0x123c	; 0x123c <sensor_smt160_read>
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	5f e3       	ldi	r21, 0x3F	; 63
    1136:	0e 94 a5 01 	call	0x34a	; 0x34a <__addsf3>
    113a:	0e 94 a4 02 	call	0x548	; 0x548 <__fixsfsi>
    113e:	9b 01       	movw	r18, r22
    1140:	7e 01       	movw	r14, r28
    1142:	f0 e7       	ldi	r31, 0x70	; 112
    1144:	ef 0e       	add	r14, r31
    1146:	f1 1c       	adc	r15, r1
    1148:	f7 01       	movw	r30, r14
    114a:	71 83       	std	Z+1, r23	; 0x01
    114c:	60 83       	st	Z, r22
  
  this->e = this->r - this->y;
    114e:	f8 01       	movw	r30, r16
    1150:	60 81       	ld	r22, Z
    1152:	71 81       	ldd	r23, Z+1	; 0x01
    1154:	62 1b       	sub	r22, r18
    1156:	73 0b       	sbc	r23, r19
    1158:	fe 01       	movw	r30, r28
    115a:	ec 58       	subi	r30, 0x8C	; 140
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	71 83       	std	Z+1, r23	; 0x01
    1160:	60 83       	st	Z, r22
  
  this->u =  relay_run(&this->controller,this->e);
    1162:	ce 01       	movw	r24, r28
    1164:	82 59       	subi	r24, 0x92	; 146
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <relay_run>
    116c:	fe 01       	movw	r30, r28
    116e:	ea 58       	subi	r30, 0x8A	; 138
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	91 83       	std	Z+1, r25	; 0x01
    1174:	80 83       	st	Z, r24
  
  io_do_write(&this->u_heater, this->u);
    1176:	bc 01       	movw	r22, r24
    1178:	ce 01       	movw	r24, r28
    117a:	82 5a       	subi	r24, 0xA2	; 162
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	0e 94 c3 09 	call	0x1386	; 0x1386 <io_do_write>
  
  sprintf(this->s1, "%2d %cC (%2d %cC)    ", this->y, 0xDF, this->r,0xDF);
    1182:	1f 92       	push	r1
    1184:	8f ed       	ldi	r24, 0xDF	; 223
    1186:	8f 93       	push	r24
    1188:	f8 01       	movw	r30, r16
    118a:	91 81       	ldd	r25, Z+1	; 0x01
    118c:	9f 93       	push	r25
    118e:	90 81       	ld	r25, Z
    1190:	9f 93       	push	r25
    1192:	1f 92       	push	r1
    1194:	8f 93       	push	r24
    1196:	f7 01       	movw	r30, r14
    1198:	81 81       	ldd	r24, Z+1	; 0x01
    119a:	8f 93       	push	r24
    119c:	80 81       	ld	r24, Z
    119e:	8f 93       	push	r24
    11a0:	87 e7       	ldi	r24, 0x77	; 119
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9f 93       	push	r25
    11a6:	8f 93       	push	r24
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <sprintf>
  lcd4_cup_row1(&this->display);
    11b0:	8e 01       	movw	r16, r28
    11b2:	0a 59       	subi	r16, 0x9A	; 154
    11b4:	1f 4f       	sbci	r17, 0xFF	; 255
    11b6:	c8 01       	movw	r24, r16
    11b8:	0e 94 b9 06 	call	0xd72	; 0xd72 <lcd4_cup_row1>
  lcd4_write_string(&this->display, this->s1); 
    11bc:	8d b7       	in	r24, 0x3d	; 61
    11be:	9e b7       	in	r25, 0x3e	; 62
    11c0:	0c 96       	adiw	r24, 0x0c	; 12
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	9e bf       	out	0x3e, r25	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	8d bf       	out	0x3d, r24	; 61
    11cc:	be 01       	movw	r22, r28
    11ce:	c8 01       	movw	r24, r16
  
}
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
  
  io_do_write(&this->u_heater, this->u);
  
  sprintf(this->s1, "%2d %cC (%2d %cC)    ", this->y, 0xDF, this->r,0xDF);
  lcd4_cup_row1(&this->display);
  lcd4_write_string(&this->display, this->s1); 
    11dc:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <lcd4_write_string>

000011e0 <relay_init>:
    \param this Pointer to a relay object/variable.
    \param de 
    */
void relay_init(relay *this, int de )
{
  this->out=0;
    11e0:	fc 01       	movw	r30, r24
    11e2:	10 82       	st	Z, r1
  this->delta=de;
    11e4:	61 83       	std	Z+1, r22	; 0x01
    11e6:	08 95       	ret

000011e8 <relay_run>:
    \param this Pointer to a relay object/variable.
    \param e Input error signal. 
    */

int relay_run(relay *this, int e)
{
    11e8:	fc 01       	movw	r30, r24
  if ( e > this->delta )
    11ea:	81 81       	ldd	r24, Z+1	; 0x01
    11ec:	99 27       	eor	r25, r25
    11ee:	87 fd       	sbrc	r24, 7
    11f0:	90 95       	com	r25
    11f2:	86 17       	cp	r24, r22
    11f4:	97 07       	cpc	r25, r23
    11f6:	1c f4       	brge	.+6      	; 0x11fe <relay_run+0x16>
    this->out=1;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	80 83       	st	Z, r24
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <relay_run+0x24>
  else if ( e < -this->delta )
    11fe:	91 95       	neg	r25
    1200:	81 95       	neg	r24
    1202:	91 09       	sbc	r25, r1
    1204:	68 17       	cp	r22, r24
    1206:	79 07       	cpc	r23, r25
    1208:	0c f4       	brge	.+2      	; 0x120c <relay_run+0x24>
    this->out=0;
    120a:	10 82       	st	Z, r1

  return this->out;
    120c:	80 81       	ld	r24, Z
    120e:	28 2f       	mov	r18, r24
    1210:	33 27       	eor	r19, r19
    1212:	27 fd       	sbrc	r18, 7
    1214:	30 95       	com	r19
}
    1216:	93 2f       	mov	r25, r19
    1218:	08 95       	ret

0000121a <sensor_smt160_init>:
  */
void sensor_smt160_init(sensor_smt160 *this, 
                        volatile unsigned char *port,
                        unsigned char bit_mask
                       )
{
    121a:	fc 01       	movw	r30, r24
  this->port= port;
    121c:	71 83       	std	Z+1, r23	; 0x01
    121e:	60 83       	st	Z, r22
  this->ddr = port-1;
    1220:	db 01       	movw	r26, r22
    1222:	11 97       	sbiw	r26, 0x01	; 1
    1224:	b3 83       	std	Z+3, r27	; 0x03
    1226:	a2 83       	std	Z+2, r26	; 0x02
  this->pin = port-2;
    1228:	62 50       	subi	r22, 0x02	; 2
    122a:	71 09       	sbc	r23, r1
    122c:	75 83       	std	Z+5, r23	; 0x05
    122e:	64 83       	std	Z+4, r22	; 0x04
  this->bit_mask = bit_mask;
    1230:	46 83       	std	Z+6, r20	; 0x06

  //Programming of the data direction register and the selected bit.
  *this->ddr = *this->ddr & ~this->bit_mask;
    1232:	8c 91       	ld	r24, X
    1234:	40 95       	com	r20
    1236:	48 23       	and	r20, r24
    1238:	4c 93       	st	X, r20
    123a:	08 95       	ret

0000123c <sensor_smt160_read>:
    \return The temperature.
  */
float sensor_smt160_read(sensor_smt160 *this)
{
  float duty,temp;
  duty = (float) digital_sampling(this->pin, this->bit_mask, 30000 ) / 30000;
    123c:	40 e3       	ldi	r20, 0x30	; 48
    123e:	55 e7       	ldi	r21, 0x75	; 117
    1240:	fc 01       	movw	r30, r24
    1242:	66 81       	ldd	r22, Z+6	; 0x06
    1244:	84 81       	ldd	r24, Z+4	; 0x04
    1246:	95 81       	ldd	r25, Z+5	; 0x05
    1248:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digital_sampling>
    124c:	bc 01       	movw	r22, r24
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__floatunsisf>
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e6       	ldi	r19, 0x60	; 96
    125a:	4a ee       	ldi	r20, 0xEA	; 234
    125c:	56 e4       	ldi	r21, 0x46	; 70
    125e:	0e 94 01 02 	call	0x402	; 0x402 <__divsf3>
  temp = (duty-0.32)/0.00470;
    1262:	2a e0       	ldi	r18, 0x0A	; 10
    1264:	37 ed       	ldi	r19, 0xD7	; 215
    1266:	43 ea       	ldi	r20, 0xA3	; 163
    1268:	5e e3       	ldi	r21, 0x3E	; 62
    126a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__subsf3>
    126e:	25 e7       	ldi	r18, 0x75	; 117
    1270:	32 e0       	ldi	r19, 0x02	; 2
    1272:	4a e9       	ldi	r20, 0x9A	; 154
    1274:	5b e3       	ldi	r21, 0x3B	; 59
    1276:	0e 94 01 02 	call	0x402	; 0x402 <__divsf3>
  return temp;
}
    127a:	08 95       	ret

0000127c <task_dice_init>:
void task_dice_init(task_dice *this, 
                    volatile unsigned char *port,
                    unsigned char bit_mask
                    )
{
  this->value=1;
    127c:	21 e0       	ldi	r18, 0x01	; 1
    127e:	fc 01       	movw	r30, r24
    1280:	20 87       	std	Z+8, r18	; 0x08
  io_di_init(&this->throwButton, port, bit_mask);
    1282:	0c 94 92 09 	jmp	0x1324	; 0x1324 <io_di_init>

00001286 <task_dice_main>:
    The main function for the task.
    \param this Pointer to a task_dice object/variable.
  */

void task_dice_main( task_dice *this )
{ 
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	ec 01       	movw	r28, r24
   if ( io_di_read(&this->throwButton) )
    1290:	0e 94 a3 09 	call	0x1346	; 0x1346 <io_di_read>
    1294:	89 2b       	or	r24, r25
    1296:	39 f0       	breq	.+14     	; 0x12a6 <task_dice_main+0x20>
    {
      this->value++;
    1298:	88 85       	ldd	r24, Y+8	; 0x08
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	88 87       	std	Y+8, r24	; 0x08
      if (this->value > 6)
    129e:	87 30       	cpi	r24, 0x07	; 7
    12a0:	14 f0       	brlt	.+4      	; 0x12a6 <task_dice_main+0x20>
        this->value=1;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	88 87       	std	Y+8, r24	; 0x08
    }
  
    sprintf(this->s,"%d",this->value);
    12a6:	8e 01       	movw	r16, r28
    12a8:	07 5f       	subi	r16, 0xF7	; 247
    12aa:	1f 4f       	sbci	r17, 0xFF	; 255
    12ac:	28 85       	ldd	r18, Y+8	; 0x08
    12ae:	82 2f       	mov	r24, r18
    12b0:	99 27       	eor	r25, r25
    12b2:	87 fd       	sbrc	r24, 7
    12b4:	90 95       	com	r25
    12b6:	9f 93       	push	r25
    12b8:	2f 93       	push	r18
    12ba:	8d e8       	ldi	r24, 0x8D	; 141
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9f 93       	push	r25
    12c0:	8f 93       	push	r24
    12c2:	1f 93       	push	r17
    12c4:	0f 93       	push	r16
    12c6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <sprintf>
    io_usart_cup(20,20);
    12ca:	64 e1       	ldi	r22, 0x14	; 20
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	84 e1       	ldi	r24, 0x14	; 20
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <io_usart_cup>
    io_usart_write_string(this->s);
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	c8 01       	movw	r24, r16
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
        this->value=1;
    }
  
    sprintf(this->s,"%d",this->value);
    io_usart_cup(20,20);
    io_usart_write_string(this->s);
    12ec:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <io_usart_write_string>

000012f0 <task_ring_init>:
  */

void task_ring_init(task_ring *this, 
                    volatile unsigned char *port
                    )
{
    12f0:	fc 01       	movw	r30, r24
  this->value=0x01;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	80 83       	st	Z, r24
  this->port = port;
    12f6:	72 83       	std	Z+2, r23	; 0x02
    12f8:	61 83       	std	Z+1, r22	; 0x01
  this->ddr = port-1;
    12fa:	db 01       	movw	r26, r22
    12fc:	11 97       	sbiw	r26, 0x01	; 1
    12fe:	b4 83       	std	Z+4, r27	; 0x04
    1300:	a3 83       	std	Z+3, r26	; 0x03
  *(this->ddr)=0xFF; //Px7-Px0 are outputs
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	8c 93       	st	X, r24
    1306:	08 95       	ret

00001308 <task_ring_main>:
    The main function for the task.
    \param this Pointer to a task_ring object/variable.
  */

void task_ring_main( task_ring *this )
{ 
    1308:	fc 01       	movw	r30, r24
 
  this->value = this->value << 1;
    130a:	80 81       	ld	r24, Z
    130c:	88 0f       	add	r24, r24
    130e:	99 0b       	sbc	r25, r25
  if ( this->value == 0 )
    1310:	81 11       	cpse	r24, r1
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <task_ring_main+0xe>
    this->value=0x01;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	80 83       	st	Z, r24
  *this->port = ~this->value;
    1318:	a1 81       	ldd	r26, Z+1	; 0x01
    131a:	b2 81       	ldd	r27, Z+2	; 0x02
    131c:	80 81       	ld	r24, Z
    131e:	80 95       	com	r24
    1320:	8c 93       	st	X, r24
    1322:	08 95       	ret

00001324 <io_di_init>:
  */
void io_di_init(io_di *this, 
                volatile unsigned char *port,
                unsigned char bit_mask
		)
{
    1324:	fc 01       	movw	r30, r24
  this->port= port;
    1326:	71 83       	std	Z+1, r23	; 0x01
    1328:	60 83       	st	Z, r22
  this->ddr = port-1;
    132a:	db 01       	movw	r26, r22
    132c:	11 97       	sbiw	r26, 0x01	; 1
    132e:	b3 83       	std	Z+3, r27	; 0x03
    1330:	a2 83       	std	Z+2, r26	; 0x02
  this->pin = port-2;
    1332:	62 50       	subi	r22, 0x02	; 2
    1334:	71 09       	sbc	r23, r1
    1336:	75 83       	std	Z+5, r23	; 0x05
    1338:	64 83       	std	Z+4, r22	; 0x04
  this->bit_mask = bit_mask;
    133a:	46 83       	std	Z+6, r20	; 0x06

  //Programming of the data direction register and the selected bit.
  *this->ddr = *this->ddr & ~this->bit_mask;
    133c:	8c 91       	ld	r24, X
    133e:	40 95       	com	r20
    1340:	48 23       	and	r20, r24
    1342:	4c 93       	st	X, r20
    1344:	08 95       	ret

00001346 <io_di_read>:
    Read of the digital input port bit.
    \param this Pointer to a io_di object/variable.
  */
int io_di_read(io_di *this)
{
  return (*this->pin & this->bit_mask) != 0; 
    1346:	dc 01       	movw	r26, r24
    1348:	14 96       	adiw	r26, 0x04	; 4
    134a:	ed 91       	ld	r30, X+
    134c:	fc 91       	ld	r31, X
    134e:	15 97       	sbiw	r26, 0x05	; 5
    1350:	40 81       	ld	r20, Z
    1352:	16 96       	adiw	r26, 0x06	; 6
    1354:	8c 91       	ld	r24, X
    1356:	48 23       	and	r20, r24
    1358:	21 e0       	ldi	r18, 0x01	; 1
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	11 f4       	brne	.+4      	; 0x1362 <io_di_read+0x1c>
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
}
    1362:	c9 01       	movw	r24, r18
    1364:	08 95       	ret

00001366 <io_do_init>:

void io_do_init(io_do *this, 
                volatile unsigned char *port,
                unsigned char bit_mask
		)
{
    1366:	fc 01       	movw	r30, r24
  this->port           = port;
    1368:	71 83       	std	Z+1, r23	; 0x01
    136a:	60 83       	st	Z, r22
  this->ddr = port-1;
    136c:	db 01       	movw	r26, r22
    136e:	11 97       	sbiw	r26, 0x01	; 1
    1370:	b3 83       	std	Z+3, r27	; 0x03
    1372:	a2 83       	std	Z+2, r26	; 0x02
  this->pin              = port-2;
    1374:	62 50       	subi	r22, 0x02	; 2
    1376:	71 09       	sbc	r23, r1
    1378:	75 83       	std	Z+5, r23	; 0x05
    137a:	64 83       	std	Z+4, r22	; 0x04
  this->bit_mask                 = bit_mask;
    137c:	46 83       	std	Z+6, r20	; 0x06

  //Programming of the data direction register and the selected bit.
  *this->ddr = *this->ddr | this->bit_mask;
    137e:	8c 91       	ld	r24, X
    1380:	84 2b       	or	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	08 95       	ret

00001386 <io_do_write>:
    \param this Pointer to a io_do object/variable.
    \param value Value 0/1 to be written on the output port.
  */
  
void io_do_write(io_do *this, int value )
{
    1386:	dc 01       	movw	r26, r24
    1388:	ed 91       	ld	r30, X+
    138a:	fc 91       	ld	r31, X
    138c:	11 97       	sbiw	r26, 0x01	; 1
    138e:	16 96       	adiw	r26, 0x06	; 6
    1390:	8c 91       	ld	r24, X
  if ( value )
    *this->port = *this->port  | this->bit_mask;
    1392:	90 81       	ld	r25, Z
    \param value Value 0/1 to be written on the output port.
  */
  
void io_do_write(io_do *this, int value )
{
  if ( value )
    1394:	67 2b       	or	r22, r23
    1396:	19 f0       	breq	.+6      	; 0x139e <io_do_write+0x18>
    *this->port = *this->port  | this->bit_mask;
    1398:	98 2b       	or	r25, r24
    139a:	90 83       	st	Z, r25
    139c:	08 95       	ret
  else
     *this->port = *this->port  & ~this->bit_mask;
    139e:	80 95       	com	r24
    13a0:	89 23       	and	r24, r25
    13a2:	80 83       	st	Z, r24
    13a4:	08 95       	ret

000013a6 <digital_sampling>:
   // Parameter port is in register pair R25:R24
   // Parameter bit_mask is in register pair R23:R22, only R22 is used because of char data.
   // Parameter n is in register pair R21:R20
   // Local variable i is in register pair R19:R20
   // Local variable ones is in register pair R31:R30
   asm volatile (
    13a6:	dc 01       	movw	r26, r24
    13a8:	e0 e0       	ldi	r30, 0x00	; 0
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	9f 01       	movw	r18, r30
    13ae:	e4 17       	cp	r30, r20
    13b0:	f5 07       	cpc	r31, r21
    13b2:	68 f4       	brcc	.+26     	; 0x13ce <digital_sampling+0x28>
    13b4:	7c 91       	ld	r23, X
    13b6:	76 23       	and	r23, r22
    13b8:	11 f0       	breq	.+4      	; 0x13be <digital_sampling+0x18>
    13ba:	31 96       	adiw	r30, 0x01	; 1
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <digital_sampling+0x1e>
    13be:	00 00       	nop
    13c0:	00 00       	nop
    13c2:	00 00       	nop
    13c4:	2f 5f       	subi	r18, 0xFF	; 255
    13c6:	3f 4f       	sbci	r19, 0xFF	; 255
    13c8:	24 17       	cp	r18, r20
    13ca:	35 07       	cpc	r19, r21
    13cc:	98 f3       	brcs	.-26     	; 0x13b4 <digital_sampling+0xe>
    13ce:	cf 01       	movw	r24, r30
    13d0:	08 95       	ret
               "3:                        " "\n\t"
               "        movw	r24, r30  " "\n\t"
               "        ret               " "\n\t"
                );
  return 0; //Dummy return 
}
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	08 95       	ret

000013d8 <__udivmodsi4>:
    13d8:	a1 e2       	ldi	r26, 0x21	; 33
    13da:	1a 2e       	mov	r1, r26
    13dc:	aa 1b       	sub	r26, r26
    13de:	bb 1b       	sub	r27, r27
    13e0:	fd 01       	movw	r30, r26
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <__udivmodsi4_ep>

000013e4 <__udivmodsi4_loop>:
    13e4:	aa 1f       	adc	r26, r26
    13e6:	bb 1f       	adc	r27, r27
    13e8:	ee 1f       	adc	r30, r30
    13ea:	ff 1f       	adc	r31, r31
    13ec:	a2 17       	cp	r26, r18
    13ee:	b3 07       	cpc	r27, r19
    13f0:	e4 07       	cpc	r30, r20
    13f2:	f5 07       	cpc	r31, r21
    13f4:	20 f0       	brcs	.+8      	; 0x13fe <__udivmodsi4_ep>
    13f6:	a2 1b       	sub	r26, r18
    13f8:	b3 0b       	sbc	r27, r19
    13fa:	e4 0b       	sbc	r30, r20
    13fc:	f5 0b       	sbc	r31, r21

000013fe <__udivmodsi4_ep>:
    13fe:	66 1f       	adc	r22, r22
    1400:	77 1f       	adc	r23, r23
    1402:	88 1f       	adc	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	1a 94       	dec	r1
    1408:	69 f7       	brne	.-38     	; 0x13e4 <__udivmodsi4_loop>
    140a:	60 95       	com	r22
    140c:	70 95       	com	r23
    140e:	80 95       	com	r24
    1410:	90 95       	com	r25
    1412:	9b 01       	movw	r18, r22
    1414:	ac 01       	movw	r20, r24
    1416:	bd 01       	movw	r22, r26
    1418:	cf 01       	movw	r24, r30
    141a:	08 95       	ret

0000141c <__adddi3>:
    141c:	2a 0d       	add	r18, r10
    141e:	3b 1d       	adc	r19, r11
    1420:	4c 1d       	adc	r20, r12
    1422:	5d 1d       	adc	r21, r13
    1424:	6e 1d       	adc	r22, r14
    1426:	7f 1d       	adc	r23, r15
    1428:	80 1f       	adc	r24, r16
    142a:	91 1f       	adc	r25, r17
    142c:	08 95       	ret

0000142e <__adddi3_s8>:
    142e:	00 24       	eor	r0, r0
    1430:	a7 fd       	sbrc	r26, 7
    1432:	00 94       	com	r0
    1434:	2a 0f       	add	r18, r26
    1436:	30 1d       	adc	r19, r0
    1438:	40 1d       	adc	r20, r0
    143a:	50 1d       	adc	r21, r0
    143c:	60 1d       	adc	r22, r0
    143e:	70 1d       	adc	r23, r0
    1440:	80 1d       	adc	r24, r0
    1442:	90 1d       	adc	r25, r0
    1444:	08 95       	ret

00001446 <__cmpdi2>:
    1446:	2a 15       	cp	r18, r10
    1448:	3b 05       	cpc	r19, r11
    144a:	4c 05       	cpc	r20, r12
    144c:	5d 05       	cpc	r21, r13
    144e:	6e 05       	cpc	r22, r14
    1450:	7f 05       	cpc	r23, r15
    1452:	80 07       	cpc	r24, r16
    1454:	91 07       	cpc	r25, r17
    1456:	08 95       	ret

00001458 <__clzsi2>:
    1458:	0e 94 35 0a 	call	0x146a	; 0x146a <__clzhi2>
    145c:	84 ff       	sbrs	r24, 4
    145e:	08 95       	ret
    1460:	cb 01       	movw	r24, r22
    1462:	0e 94 35 0a 	call	0x146a	; 0x146a <__clzhi2>
    1466:	80 5f       	subi	r24, 0xF0	; 240
    1468:	08 95       	ret

0000146a <__clzhi2>:
    146a:	aa 27       	eor	r26, r26
    146c:	99 23       	and	r25, r25
    146e:	29 f4       	brne	.+10     	; 0x147a <__clzhi2+0x10>
    1470:	a8 5f       	subi	r26, 0xF8	; 248
    1472:	98 2b       	or	r25, r24
    1474:	11 f4       	brne	.+4      	; 0x147a <__clzhi2+0x10>
    1476:	80 e1       	ldi	r24, 0x10	; 16
    1478:	08 95       	ret
    147a:	90 31       	cpi	r25, 0x10	; 16
    147c:	18 f4       	brcc	.+6      	; 0x1484 <__clzhi2+0x1a>
    147e:	ad 5f       	subi	r26, 0xFD	; 253
    1480:	92 95       	swap	r25
    1482:	a3 95       	inc	r26
    1484:	99 0f       	add	r25, r25
    1486:	e8 f7       	brcc	.-6      	; 0x1482 <__clzhi2+0x18>
    1488:	8a 2f       	mov	r24, r26
    148a:	99 27       	eor	r25, r25
    148c:	08 95       	ret

0000148e <__prologue_saves__>:
    148e:	2f 92       	push	r2
    1490:	3f 92       	push	r3
    1492:	4f 92       	push	r4
    1494:	5f 92       	push	r5
    1496:	6f 92       	push	r6
    1498:	7f 92       	push	r7
    149a:	8f 92       	push	r8
    149c:	9f 92       	push	r9
    149e:	af 92       	push	r10
    14a0:	bf 92       	push	r11
    14a2:	cf 92       	push	r12
    14a4:	df 92       	push	r13
    14a6:	ef 92       	push	r14
    14a8:	ff 92       	push	r15
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	ca 1b       	sub	r28, r26
    14b8:	db 0b       	sbc	r29, r27
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	09 94       	ijmp

000014c6 <__epilogue_restores__>:
    14c6:	2a 88       	ldd	r2, Y+18	; 0x12
    14c8:	39 88       	ldd	r3, Y+17	; 0x11
    14ca:	48 88       	ldd	r4, Y+16	; 0x10
    14cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    14ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    14d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    14d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    14d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    14d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    14d8:	b9 84       	ldd	r11, Y+9	; 0x09
    14da:	c8 84       	ldd	r12, Y+8	; 0x08
    14dc:	df 80       	ldd	r13, Y+7	; 0x07
    14de:	ee 80       	ldd	r14, Y+6	; 0x06
    14e0:	fd 80       	ldd	r15, Y+5	; 0x05
    14e2:	0c 81       	ldd	r16, Y+4	; 0x04
    14e4:	1b 81       	ldd	r17, Y+3	; 0x03
    14e6:	aa 81       	ldd	r26, Y+2	; 0x02
    14e8:	b9 81       	ldd	r27, Y+1	; 0x01
    14ea:	ce 0f       	add	r28, r30
    14ec:	d1 1d       	adc	r29, r1
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	ed 01       	movw	r28, r26
    14fa:	08 95       	ret

000014fc <sprintf>:
    14fc:	ae e0       	ldi	r26, 0x0E	; 14
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e4 e8       	ldi	r30, 0x84	; 132
    1502:	fa e0       	ldi	r31, 0x0A	; 10
    1504:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__prologue_saves__+0x1c>
    1508:	0d 89       	ldd	r16, Y+21	; 0x15
    150a:	1e 89       	ldd	r17, Y+22	; 0x16
    150c:	86 e0       	ldi	r24, 0x06	; 6
    150e:	8c 83       	std	Y+4, r24	; 0x04
    1510:	1a 83       	std	Y+2, r17	; 0x02
    1512:	09 83       	std	Y+1, r16	; 0x01
    1514:	8f ef       	ldi	r24, 0xFF	; 255
    1516:	9f e7       	ldi	r25, 0x7F	; 127
    1518:	9e 83       	std	Y+6, r25	; 0x06
    151a:	8d 83       	std	Y+5, r24	; 0x05
    151c:	ce 01       	movw	r24, r28
    151e:	49 96       	adiw	r24, 0x19	; 25
    1520:	ac 01       	movw	r20, r24
    1522:	6f 89       	ldd	r22, Y+23	; 0x17
    1524:	78 8d       	ldd	r23, Y+24	; 0x18
    1526:	ce 01       	movw	r24, r28
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <vfprintf>
    152e:	ef 81       	ldd	r30, Y+7	; 0x07
    1530:	f8 85       	ldd	r31, Y+8	; 0x08
    1532:	e0 0f       	add	r30, r16
    1534:	f1 1f       	adc	r31, r17
    1536:	10 82       	st	Z, r1
    1538:	2e 96       	adiw	r28, 0x0e	; 14
    153a:	e4 e0       	ldi	r30, 0x04	; 4
    153c:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__epilogue_restores__+0x1c>

00001540 <vfprintf>:
    1540:	ac e0       	ldi	r26, 0x0C	; 12
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e6 ea       	ldi	r30, 0xA6	; 166
    1546:	fa e0       	ldi	r31, 0x0A	; 10
    1548:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__prologue_saves__>
    154c:	7c 01       	movw	r14, r24
    154e:	6b 01       	movw	r12, r22
    1550:	8a 01       	movw	r16, r20
    1552:	fc 01       	movw	r30, r24
    1554:	17 82       	std	Z+7, r1	; 0x07
    1556:	16 82       	std	Z+6, r1	; 0x06
    1558:	83 81       	ldd	r24, Z+3	; 0x03
    155a:	81 ff       	sbrs	r24, 1
    155c:	c6 c1       	rjmp	.+908    	; 0x18ea <vfprintf+0x3aa>
    155e:	88 24       	eor	r8, r8
    1560:	83 94       	inc	r8
    1562:	91 2c       	mov	r9, r1
    1564:	8c 0e       	add	r8, r28
    1566:	9d 1e       	adc	r9, r29
    1568:	f7 01       	movw	r30, r14
    156a:	93 81       	ldd	r25, Z+3	; 0x03
    156c:	f6 01       	movw	r30, r12
    156e:	93 fd       	sbrc	r25, 3
    1570:	85 91       	lpm	r24, Z+
    1572:	93 ff       	sbrs	r25, 3
    1574:	81 91       	ld	r24, Z+
    1576:	6f 01       	movw	r12, r30
    1578:	88 23       	and	r24, r24
    157a:	09 f4       	brne	.+2      	; 0x157e <vfprintf+0x3e>
    157c:	b2 c1       	rjmp	.+868    	; 0x18e2 <vfprintf+0x3a2>
    157e:	85 32       	cpi	r24, 0x25	; 37
    1580:	39 f4       	brne	.+14     	; 0x1590 <vfprintf+0x50>
    1582:	93 fd       	sbrc	r25, 3
    1584:	85 91       	lpm	r24, Z+
    1586:	93 ff       	sbrs	r25, 3
    1588:	81 91       	ld	r24, Z+
    158a:	6f 01       	movw	r12, r30
    158c:	85 32       	cpi	r24, 0x25	; 37
    158e:	29 f4       	brne	.+10     	; 0x159a <vfprintf+0x5a>
    1590:	b7 01       	movw	r22, r14
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputc>
    1598:	e7 cf       	rjmp	.-50     	; 0x1568 <vfprintf+0x28>
    159a:	51 2c       	mov	r5, r1
    159c:	31 2c       	mov	r3, r1
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	20 32       	cpi	r18, 0x20	; 32
    15a2:	a8 f4       	brcc	.+42     	; 0x15ce <vfprintf+0x8e>
    15a4:	8b 32       	cpi	r24, 0x2B	; 43
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <vfprintf+0x80>
    15a8:	28 f4       	brcc	.+10     	; 0x15b4 <vfprintf+0x74>
    15aa:	80 32       	cpi	r24, 0x20	; 32
    15ac:	51 f0       	breq	.+20     	; 0x15c2 <vfprintf+0x82>
    15ae:	83 32       	cpi	r24, 0x23	; 35
    15b0:	71 f4       	brne	.+28     	; 0x15ce <vfprintf+0x8e>
    15b2:	0b c0       	rjmp	.+22     	; 0x15ca <vfprintf+0x8a>
    15b4:	8d 32       	cpi	r24, 0x2D	; 45
    15b6:	39 f0       	breq	.+14     	; 0x15c6 <vfprintf+0x86>
    15b8:	80 33       	cpi	r24, 0x30	; 48
    15ba:	49 f4       	brne	.+18     	; 0x15ce <vfprintf+0x8e>
    15bc:	21 60       	ori	r18, 0x01	; 1
    15be:	28 c0       	rjmp	.+80     	; 0x1610 <vfprintf+0xd0>
    15c0:	22 60       	ori	r18, 0x02	; 2
    15c2:	24 60       	ori	r18, 0x04	; 4
    15c4:	25 c0       	rjmp	.+74     	; 0x1610 <vfprintf+0xd0>
    15c6:	28 60       	ori	r18, 0x08	; 8
    15c8:	23 c0       	rjmp	.+70     	; 0x1610 <vfprintf+0xd0>
    15ca:	20 61       	ori	r18, 0x10	; 16
    15cc:	21 c0       	rjmp	.+66     	; 0x1610 <vfprintf+0xd0>
    15ce:	27 fd       	sbrc	r18, 7
    15d0:	27 c0       	rjmp	.+78     	; 0x1620 <vfprintf+0xe0>
    15d2:	38 2f       	mov	r19, r24
    15d4:	30 53       	subi	r19, 0x30	; 48
    15d6:	3a 30       	cpi	r19, 0x0A	; 10
    15d8:	78 f4       	brcc	.+30     	; 0x15f8 <vfprintf+0xb8>
    15da:	26 ff       	sbrs	r18, 6
    15dc:	06 c0       	rjmp	.+12     	; 0x15ea <vfprintf+0xaa>
    15de:	fa e0       	ldi	r31, 0x0A	; 10
    15e0:	5f 9e       	mul	r5, r31
    15e2:	30 0d       	add	r19, r0
    15e4:	11 24       	eor	r1, r1
    15e6:	53 2e       	mov	r5, r19
    15e8:	13 c0       	rjmp	.+38     	; 0x1610 <vfprintf+0xd0>
    15ea:	8a e0       	ldi	r24, 0x0A	; 10
    15ec:	38 9e       	mul	r3, r24
    15ee:	30 0d       	add	r19, r0
    15f0:	11 24       	eor	r1, r1
    15f2:	33 2e       	mov	r3, r19
    15f4:	20 62       	ori	r18, 0x20	; 32
    15f6:	0c c0       	rjmp	.+24     	; 0x1610 <vfprintf+0xd0>
    15f8:	8e 32       	cpi	r24, 0x2E	; 46
    15fa:	21 f4       	brne	.+8      	; 0x1604 <vfprintf+0xc4>
    15fc:	26 fd       	sbrc	r18, 6
    15fe:	71 c1       	rjmp	.+738    	; 0x18e2 <vfprintf+0x3a2>
    1600:	20 64       	ori	r18, 0x40	; 64
    1602:	06 c0       	rjmp	.+12     	; 0x1610 <vfprintf+0xd0>
    1604:	8c 36       	cpi	r24, 0x6C	; 108
    1606:	11 f4       	brne	.+4      	; 0x160c <vfprintf+0xcc>
    1608:	20 68       	ori	r18, 0x80	; 128
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <vfprintf+0xd0>
    160c:	88 36       	cpi	r24, 0x68	; 104
    160e:	41 f4       	brne	.+16     	; 0x1620 <vfprintf+0xe0>
    1610:	f6 01       	movw	r30, r12
    1612:	93 fd       	sbrc	r25, 3
    1614:	85 91       	lpm	r24, Z+
    1616:	93 ff       	sbrs	r25, 3
    1618:	81 91       	ld	r24, Z+
    161a:	6f 01       	movw	r12, r30
    161c:	81 11       	cpse	r24, r1
    161e:	c0 cf       	rjmp	.-128    	; 0x15a0 <vfprintf+0x60>
    1620:	98 2f       	mov	r25, r24
    1622:	95 54       	subi	r25, 0x45	; 69
    1624:	93 30       	cpi	r25, 0x03	; 3
    1626:	18 f0       	brcs	.+6      	; 0x162e <vfprintf+0xee>
    1628:	90 52       	subi	r25, 0x20	; 32
    162a:	93 30       	cpi	r25, 0x03	; 3
    162c:	28 f4       	brcc	.+10     	; 0x1638 <vfprintf+0xf8>
    162e:	0c 5f       	subi	r16, 0xFC	; 252
    1630:	1f 4f       	sbci	r17, 0xFF	; 255
    1632:	ff e3       	ldi	r31, 0x3F	; 63
    1634:	f9 83       	std	Y+1, r31	; 0x01
    1636:	0d c0       	rjmp	.+26     	; 0x1652 <vfprintf+0x112>
    1638:	83 36       	cpi	r24, 0x63	; 99
    163a:	31 f0       	breq	.+12     	; 0x1648 <vfprintf+0x108>
    163c:	83 37       	cpi	r24, 0x73	; 115
    163e:	71 f0       	breq	.+28     	; 0x165c <vfprintf+0x11c>
    1640:	83 35       	cpi	r24, 0x53	; 83
    1642:	09 f0       	breq	.+2      	; 0x1646 <vfprintf+0x106>
    1644:	5e c0       	rjmp	.+188    	; 0x1702 <vfprintf+0x1c2>
    1646:	23 c0       	rjmp	.+70     	; 0x168e <vfprintf+0x14e>
    1648:	f8 01       	movw	r30, r16
    164a:	80 81       	ld	r24, Z
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	0e 5f       	subi	r16, 0xFE	; 254
    1650:	1f 4f       	sbci	r17, 0xFF	; 255
    1652:	44 24       	eor	r4, r4
    1654:	43 94       	inc	r4
    1656:	51 2c       	mov	r5, r1
    1658:	54 01       	movw	r10, r8
    165a:	15 c0       	rjmp	.+42     	; 0x1686 <vfprintf+0x146>
    165c:	38 01       	movw	r6, r16
    165e:	f2 e0       	ldi	r31, 0x02	; 2
    1660:	6f 0e       	add	r6, r31
    1662:	71 1c       	adc	r7, r1
    1664:	f8 01       	movw	r30, r16
    1666:	a0 80       	ld	r10, Z
    1668:	b1 80       	ldd	r11, Z+1	; 0x01
    166a:	26 ff       	sbrs	r18, 6
    166c:	03 c0       	rjmp	.+6      	; 0x1674 <vfprintf+0x134>
    166e:	65 2d       	mov	r22, r5
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <vfprintf+0x138>
    1674:	6f ef       	ldi	r22, 0xFF	; 255
    1676:	7f ef       	ldi	r23, 0xFF	; 255
    1678:	c5 01       	movw	r24, r10
    167a:	2c 87       	std	Y+12, r18	; 0x0c
    167c:	0e 94 87 0c 	call	0x190e	; 0x190e <strnlen>
    1680:	2c 01       	movw	r4, r24
    1682:	83 01       	movw	r16, r6
    1684:	2c 85       	ldd	r18, Y+12	; 0x0c
    1686:	6f e7       	ldi	r22, 0x7F	; 127
    1688:	26 2e       	mov	r2, r22
    168a:	22 22       	and	r2, r18
    168c:	18 c0       	rjmp	.+48     	; 0x16be <vfprintf+0x17e>
    168e:	38 01       	movw	r6, r16
    1690:	f2 e0       	ldi	r31, 0x02	; 2
    1692:	6f 0e       	add	r6, r31
    1694:	71 1c       	adc	r7, r1
    1696:	f8 01       	movw	r30, r16
    1698:	a0 80       	ld	r10, Z
    169a:	b1 80       	ldd	r11, Z+1	; 0x01
    169c:	26 ff       	sbrs	r18, 6
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <vfprintf+0x166>
    16a0:	65 2d       	mov	r22, r5
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <vfprintf+0x16a>
    16a6:	6f ef       	ldi	r22, 0xFF	; 255
    16a8:	7f ef       	ldi	r23, 0xFF	; 255
    16aa:	c5 01       	movw	r24, r10
    16ac:	2c 87       	std	Y+12, r18	; 0x0c
    16ae:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <strnlen_P>
    16b2:	2c 01       	movw	r4, r24
    16b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    16b6:	50 e8       	ldi	r21, 0x80	; 128
    16b8:	25 2e       	mov	r2, r21
    16ba:	22 2a       	or	r2, r18
    16bc:	83 01       	movw	r16, r6
    16be:	23 fc       	sbrc	r2, 3
    16c0:	1c c0       	rjmp	.+56     	; 0x16fa <vfprintf+0x1ba>
    16c2:	06 c0       	rjmp	.+12     	; 0x16d0 <vfprintf+0x190>
    16c4:	b7 01       	movw	r22, r14
    16c6:	80 e2       	ldi	r24, 0x20	; 32
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputc>
    16ce:	3a 94       	dec	r3
    16d0:	83 2d       	mov	r24, r3
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	48 16       	cp	r4, r24
    16d6:	59 06       	cpc	r5, r25
    16d8:	a8 f3       	brcs	.-22     	; 0x16c4 <vfprintf+0x184>
    16da:	0f c0       	rjmp	.+30     	; 0x16fa <vfprintf+0x1ba>
    16dc:	f5 01       	movw	r30, r10
    16de:	27 fc       	sbrc	r2, 7
    16e0:	85 91       	lpm	r24, Z+
    16e2:	27 fe       	sbrs	r2, 7
    16e4:	81 91       	ld	r24, Z+
    16e6:	5f 01       	movw	r10, r30
    16e8:	b7 01       	movw	r22, r14
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputc>
    16f0:	31 10       	cpse	r3, r1
    16f2:	3a 94       	dec	r3
    16f4:	f1 e0       	ldi	r31, 0x01	; 1
    16f6:	4f 1a       	sub	r4, r31
    16f8:	51 08       	sbc	r5, r1
    16fa:	41 14       	cp	r4, r1
    16fc:	51 04       	cpc	r5, r1
    16fe:	71 f7       	brne	.-36     	; 0x16dc <vfprintf+0x19c>
    1700:	ed c0       	rjmp	.+474    	; 0x18dc <vfprintf+0x39c>
    1702:	84 36       	cpi	r24, 0x64	; 100
    1704:	11 f0       	breq	.+4      	; 0x170a <vfprintf+0x1ca>
    1706:	89 36       	cpi	r24, 0x69	; 105
    1708:	41 f5       	brne	.+80     	; 0x175a <vfprintf+0x21a>
    170a:	f8 01       	movw	r30, r16
    170c:	27 ff       	sbrs	r18, 7
    170e:	07 c0       	rjmp	.+14     	; 0x171e <vfprintf+0x1de>
    1710:	60 81       	ld	r22, Z
    1712:	71 81       	ldd	r23, Z+1	; 0x01
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	93 81       	ldd	r25, Z+3	; 0x03
    1718:	0c 5f       	subi	r16, 0xFC	; 252
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	08 c0       	rjmp	.+16     	; 0x172e <vfprintf+0x1ee>
    171e:	60 81       	ld	r22, Z
    1720:	71 81       	ldd	r23, Z+1	; 0x01
    1722:	88 27       	eor	r24, r24
    1724:	77 fd       	sbrc	r23, 7
    1726:	80 95       	com	r24
    1728:	98 2f       	mov	r25, r24
    172a:	0e 5f       	subi	r16, 0xFE	; 254
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	4f e6       	ldi	r20, 0x6F	; 111
    1730:	b4 2e       	mov	r11, r20
    1732:	b2 22       	and	r11, r18
    1734:	97 ff       	sbrs	r25, 7
    1736:	09 c0       	rjmp	.+18     	; 0x174a <vfprintf+0x20a>
    1738:	90 95       	com	r25
    173a:	80 95       	com	r24
    173c:	70 95       	com	r23
    173e:	61 95       	neg	r22
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	8f 4f       	sbci	r24, 0xFF	; 255
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	f0 e8       	ldi	r31, 0x80	; 128
    1748:	bf 2a       	or	r11, r31
    174a:	2a e0       	ldi	r18, 0x0A	; 10
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	a4 01       	movw	r20, r8
    1750:	0e 94 be 0c 	call	0x197c	; 0x197c <__ultoa_invert>
    1754:	a8 2e       	mov	r10, r24
    1756:	a8 18       	sub	r10, r8
    1758:	43 c0       	rjmp	.+134    	; 0x17e0 <vfprintf+0x2a0>
    175a:	85 37       	cpi	r24, 0x75	; 117
    175c:	31 f4       	brne	.+12     	; 0x176a <vfprintf+0x22a>
    175e:	3f ee       	ldi	r19, 0xEF	; 239
    1760:	b3 2e       	mov	r11, r19
    1762:	b2 22       	and	r11, r18
    1764:	2a e0       	ldi	r18, 0x0A	; 10
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	24 c0       	rjmp	.+72     	; 0x17b2 <vfprintf+0x272>
    176a:	99 ef       	ldi	r25, 0xF9	; 249
    176c:	b9 2e       	mov	r11, r25
    176e:	b2 22       	and	r11, r18
    1770:	8f 36       	cpi	r24, 0x6F	; 111
    1772:	b9 f0       	breq	.+46     	; 0x17a2 <vfprintf+0x262>
    1774:	20 f4       	brcc	.+8      	; 0x177e <vfprintf+0x23e>
    1776:	88 35       	cpi	r24, 0x58	; 88
    1778:	09 f0       	breq	.+2      	; 0x177c <vfprintf+0x23c>
    177a:	b3 c0       	rjmp	.+358    	; 0x18e2 <vfprintf+0x3a2>
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <vfprintf+0x258>
    177e:	80 37       	cpi	r24, 0x70	; 112
    1780:	21 f0       	breq	.+8      	; 0x178a <vfprintf+0x24a>
    1782:	88 37       	cpi	r24, 0x78	; 120
    1784:	09 f0       	breq	.+2      	; 0x1788 <vfprintf+0x248>
    1786:	ad c0       	rjmp	.+346    	; 0x18e2 <vfprintf+0x3a2>
    1788:	02 c0       	rjmp	.+4      	; 0x178e <vfprintf+0x24e>
    178a:	20 e1       	ldi	r18, 0x10	; 16
    178c:	b2 2a       	or	r11, r18
    178e:	b4 fe       	sbrs	r11, 4
    1790:	0b c0       	rjmp	.+22     	; 0x17a8 <vfprintf+0x268>
    1792:	84 e0       	ldi	r24, 0x04	; 4
    1794:	b8 2a       	or	r11, r24
    1796:	08 c0       	rjmp	.+16     	; 0x17a8 <vfprintf+0x268>
    1798:	24 ff       	sbrs	r18, 4
    179a:	09 c0       	rjmp	.+18     	; 0x17ae <vfprintf+0x26e>
    179c:	e6 e0       	ldi	r30, 0x06	; 6
    179e:	be 2a       	or	r11, r30
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <vfprintf+0x26e>
    17a2:	28 e0       	ldi	r18, 0x08	; 8
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	05 c0       	rjmp	.+10     	; 0x17b2 <vfprintf+0x272>
    17a8:	20 e1       	ldi	r18, 0x10	; 16
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <vfprintf+0x272>
    17ae:	20 e1       	ldi	r18, 0x10	; 16
    17b0:	32 e0       	ldi	r19, 0x02	; 2
    17b2:	f8 01       	movw	r30, r16
    17b4:	b7 fe       	sbrs	r11, 7
    17b6:	07 c0       	rjmp	.+14     	; 0x17c6 <vfprintf+0x286>
    17b8:	60 81       	ld	r22, Z
    17ba:	71 81       	ldd	r23, Z+1	; 0x01
    17bc:	82 81       	ldd	r24, Z+2	; 0x02
    17be:	93 81       	ldd	r25, Z+3	; 0x03
    17c0:	0c 5f       	subi	r16, 0xFC	; 252
    17c2:	1f 4f       	sbci	r17, 0xFF	; 255
    17c4:	06 c0       	rjmp	.+12     	; 0x17d2 <vfprintf+0x292>
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 5f       	subi	r16, 0xFE	; 254
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	a4 01       	movw	r20, r8
    17d4:	0e 94 be 0c 	call	0x197c	; 0x197c <__ultoa_invert>
    17d8:	a8 2e       	mov	r10, r24
    17da:	a8 18       	sub	r10, r8
    17dc:	ff e7       	ldi	r31, 0x7F	; 127
    17de:	bf 22       	and	r11, r31
    17e0:	b6 fe       	sbrs	r11, 6
    17e2:	0b c0       	rjmp	.+22     	; 0x17fa <vfprintf+0x2ba>
    17e4:	2b 2d       	mov	r18, r11
    17e6:	2e 7f       	andi	r18, 0xFE	; 254
    17e8:	a5 14       	cp	r10, r5
    17ea:	50 f4       	brcc	.+20     	; 0x1800 <vfprintf+0x2c0>
    17ec:	b4 fe       	sbrs	r11, 4
    17ee:	0a c0       	rjmp	.+20     	; 0x1804 <vfprintf+0x2c4>
    17f0:	b2 fc       	sbrc	r11, 2
    17f2:	08 c0       	rjmp	.+16     	; 0x1804 <vfprintf+0x2c4>
    17f4:	2b 2d       	mov	r18, r11
    17f6:	2e 7e       	andi	r18, 0xEE	; 238
    17f8:	05 c0       	rjmp	.+10     	; 0x1804 <vfprintf+0x2c4>
    17fa:	7a 2c       	mov	r7, r10
    17fc:	2b 2d       	mov	r18, r11
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <vfprintf+0x2c6>
    1800:	7a 2c       	mov	r7, r10
    1802:	01 c0       	rjmp	.+2      	; 0x1806 <vfprintf+0x2c6>
    1804:	75 2c       	mov	r7, r5
    1806:	24 ff       	sbrs	r18, 4
    1808:	0d c0       	rjmp	.+26     	; 0x1824 <vfprintf+0x2e4>
    180a:	fe 01       	movw	r30, r28
    180c:	ea 0d       	add	r30, r10
    180e:	f1 1d       	adc	r31, r1
    1810:	80 81       	ld	r24, Z
    1812:	80 33       	cpi	r24, 0x30	; 48
    1814:	11 f4       	brne	.+4      	; 0x181a <vfprintf+0x2da>
    1816:	29 7e       	andi	r18, 0xE9	; 233
    1818:	09 c0       	rjmp	.+18     	; 0x182c <vfprintf+0x2ec>
    181a:	22 ff       	sbrs	r18, 2
    181c:	06 c0       	rjmp	.+12     	; 0x182a <vfprintf+0x2ea>
    181e:	73 94       	inc	r7
    1820:	73 94       	inc	r7
    1822:	04 c0       	rjmp	.+8      	; 0x182c <vfprintf+0x2ec>
    1824:	82 2f       	mov	r24, r18
    1826:	86 78       	andi	r24, 0x86	; 134
    1828:	09 f0       	breq	.+2      	; 0x182c <vfprintf+0x2ec>
    182a:	73 94       	inc	r7
    182c:	23 fd       	sbrc	r18, 3
    182e:	14 c0       	rjmp	.+40     	; 0x1858 <vfprintf+0x318>
    1830:	20 ff       	sbrs	r18, 0
    1832:	0f c0       	rjmp	.+30     	; 0x1852 <vfprintf+0x312>
    1834:	5a 2c       	mov	r5, r10
    1836:	73 14       	cp	r7, r3
    1838:	60 f4       	brcc	.+24     	; 0x1852 <vfprintf+0x312>
    183a:	53 0c       	add	r5, r3
    183c:	57 18       	sub	r5, r7
    183e:	73 2c       	mov	r7, r3
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <vfprintf+0x312>
    1842:	b7 01       	movw	r22, r14
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	2c 87       	std	Y+12, r18	; 0x0c
    184a:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputc>
    184e:	73 94       	inc	r7
    1850:	2c 85       	ldd	r18, Y+12	; 0x0c
    1852:	73 14       	cp	r7, r3
    1854:	b0 f3       	brcs	.-20     	; 0x1842 <vfprintf+0x302>
    1856:	04 c0       	rjmp	.+8      	; 0x1860 <vfprintf+0x320>
    1858:	73 14       	cp	r7, r3
    185a:	10 f4       	brcc	.+4      	; 0x1860 <vfprintf+0x320>
    185c:	37 18       	sub	r3, r7
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <vfprintf+0x322>
    1860:	31 2c       	mov	r3, r1
    1862:	24 ff       	sbrs	r18, 4
    1864:	12 c0       	rjmp	.+36     	; 0x188a <vfprintf+0x34a>
    1866:	b7 01       	movw	r22, r14
    1868:	80 e3       	ldi	r24, 0x30	; 48
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	2c 87       	std	Y+12, r18	; 0x0c
    186e:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputc>
    1872:	2c 85       	ldd	r18, Y+12	; 0x0c
    1874:	22 ff       	sbrs	r18, 2
    1876:	1e c0       	rjmp	.+60     	; 0x18b4 <vfprintf+0x374>
    1878:	21 ff       	sbrs	r18, 1
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <vfprintf+0x342>
    187c:	88 e5       	ldi	r24, 0x58	; 88
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <vfprintf+0x346>
    1882:	88 e7       	ldi	r24, 0x78	; 120
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	b7 01       	movw	r22, r14
    1888:	0c c0       	rjmp	.+24     	; 0x18a2 <vfprintf+0x362>
    188a:	82 2f       	mov	r24, r18
    188c:	86 78       	andi	r24, 0x86	; 134
    188e:	91 f0       	breq	.+36     	; 0x18b4 <vfprintf+0x374>
    1890:	21 fd       	sbrc	r18, 1
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <vfprintf+0x358>
    1894:	80 e2       	ldi	r24, 0x20	; 32
    1896:	01 c0       	rjmp	.+2      	; 0x189a <vfprintf+0x35a>
    1898:	8b e2       	ldi	r24, 0x2B	; 43
    189a:	27 fd       	sbrc	r18, 7
    189c:	8d e2       	ldi	r24, 0x2D	; 45
    189e:	b7 01       	movw	r22, r14
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputc>
    18a6:	06 c0       	rjmp	.+12     	; 0x18b4 <vfprintf+0x374>
    18a8:	b7 01       	movw	r22, r14
    18aa:	80 e3       	ldi	r24, 0x30	; 48
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputc>
    18b2:	5a 94       	dec	r5
    18b4:	a5 14       	cp	r10, r5
    18b6:	c0 f3       	brcs	.-16     	; 0x18a8 <vfprintf+0x368>
    18b8:	aa 94       	dec	r10
    18ba:	f4 01       	movw	r30, r8
    18bc:	ea 0d       	add	r30, r10
    18be:	f1 1d       	adc	r31, r1
    18c0:	b7 01       	movw	r22, r14
    18c2:	80 81       	ld	r24, Z
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputc>
    18ca:	a1 10       	cpse	r10, r1
    18cc:	f5 cf       	rjmp	.-22     	; 0x18b8 <vfprintf+0x378>
    18ce:	06 c0       	rjmp	.+12     	; 0x18dc <vfprintf+0x39c>
    18d0:	b7 01       	movw	r22, r14
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputc>
    18da:	3a 94       	dec	r3
    18dc:	31 10       	cpse	r3, r1
    18de:	f8 cf       	rjmp	.-16     	; 0x18d0 <vfprintf+0x390>
    18e0:	43 ce       	rjmp	.-890    	; 0x1568 <vfprintf+0x28>
    18e2:	f7 01       	movw	r30, r14
    18e4:	26 81       	ldd	r18, Z+6	; 0x06
    18e6:	37 81       	ldd	r19, Z+7	; 0x07
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <vfprintf+0x3ae>
    18ea:	2f ef       	ldi	r18, 0xFF	; 255
    18ec:	3f ef       	ldi	r19, 0xFF	; 255
    18ee:	c9 01       	movw	r24, r18
    18f0:	2c 96       	adiw	r28, 0x0c	; 12
    18f2:	e2 e1       	ldi	r30, 0x12	; 18
    18f4:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__epilogue_restores__>

000018f8 <strnlen_P>:
    18f8:	fc 01       	movw	r30, r24
    18fa:	05 90       	lpm	r0, Z+
    18fc:	61 50       	subi	r22, 0x01	; 1
    18fe:	70 40       	sbci	r23, 0x00	; 0
    1900:	01 10       	cpse	r0, r1
    1902:	d8 f7       	brcc	.-10     	; 0x18fa <strnlen_P+0x2>
    1904:	80 95       	com	r24
    1906:	90 95       	com	r25
    1908:	8e 0f       	add	r24, r30
    190a:	9f 1f       	adc	r25, r31
    190c:	08 95       	ret

0000190e <strnlen>:
    190e:	fc 01       	movw	r30, r24
    1910:	61 50       	subi	r22, 0x01	; 1
    1912:	70 40       	sbci	r23, 0x00	; 0
    1914:	01 90       	ld	r0, Z+
    1916:	01 10       	cpse	r0, r1
    1918:	d8 f7       	brcc	.-10     	; 0x1910 <strnlen+0x2>
    191a:	80 95       	com	r24
    191c:	90 95       	com	r25
    191e:	8e 0f       	add	r24, r30
    1920:	9f 1f       	adc	r25, r31
    1922:	08 95       	ret

00001924 <fputc>:
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	8c 01       	movw	r16, r24
    192e:	eb 01       	movw	r28, r22
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	81 fd       	sbrc	r24, 1
    1934:	03 c0       	rjmp	.+6      	; 0x193c <fputc+0x18>
    1936:	0f ef       	ldi	r16, 0xFF	; 255
    1938:	1f ef       	ldi	r17, 0xFF	; 255
    193a:	1a c0       	rjmp	.+52     	; 0x1970 <fputc+0x4c>
    193c:	82 ff       	sbrs	r24, 2
    193e:	0d c0       	rjmp	.+26     	; 0x195a <fputc+0x36>
    1940:	2e 81       	ldd	r18, Y+6	; 0x06
    1942:	3f 81       	ldd	r19, Y+7	; 0x07
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	9d 81       	ldd	r25, Y+5	; 0x05
    1948:	28 17       	cp	r18, r24
    194a:	39 07       	cpc	r19, r25
    194c:	64 f4       	brge	.+24     	; 0x1966 <fputc+0x42>
    194e:	e8 81       	ld	r30, Y
    1950:	f9 81       	ldd	r31, Y+1	; 0x01
    1952:	01 93       	st	Z+, r16
    1954:	f9 83       	std	Y+1, r31	; 0x01
    1956:	e8 83       	st	Y, r30
    1958:	06 c0       	rjmp	.+12     	; 0x1966 <fputc+0x42>
    195a:	e8 85       	ldd	r30, Y+8	; 0x08
    195c:	f9 85       	ldd	r31, Y+9	; 0x09
    195e:	80 2f       	mov	r24, r16
    1960:	09 95       	icall
    1962:	89 2b       	or	r24, r25
    1964:	41 f7       	brne	.-48     	; 0x1936 <fputc+0x12>
    1966:	8e 81       	ldd	r24, Y+6	; 0x06
    1968:	9f 81       	ldd	r25, Y+7	; 0x07
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	9f 83       	std	Y+7, r25	; 0x07
    196e:	8e 83       	std	Y+6, r24	; 0x06
    1970:	c8 01       	movw	r24, r16
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	08 95       	ret

0000197c <__ultoa_invert>:
    197c:	fa 01       	movw	r30, r20
    197e:	aa 27       	eor	r26, r26
    1980:	28 30       	cpi	r18, 0x08	; 8
    1982:	51 f1       	breq	.+84     	; 0x19d8 <__ultoa_invert+0x5c>
    1984:	20 31       	cpi	r18, 0x10	; 16
    1986:	81 f1       	breq	.+96     	; 0x19e8 <__ultoa_invert+0x6c>
    1988:	e8 94       	clt
    198a:	6f 93       	push	r22
    198c:	6e 7f       	andi	r22, 0xFE	; 254
    198e:	6e 5f       	subi	r22, 0xFE	; 254
    1990:	7f 4f       	sbci	r23, 0xFF	; 255
    1992:	8f 4f       	sbci	r24, 0xFF	; 255
    1994:	9f 4f       	sbci	r25, 0xFF	; 255
    1996:	af 4f       	sbci	r26, 0xFF	; 255
    1998:	b1 e0       	ldi	r27, 0x01	; 1
    199a:	3e d0       	rcall	.+124    	; 0x1a18 <__ultoa_invert+0x9c>
    199c:	b4 e0       	ldi	r27, 0x04	; 4
    199e:	3c d0       	rcall	.+120    	; 0x1a18 <__ultoa_invert+0x9c>
    19a0:	67 0f       	add	r22, r23
    19a2:	78 1f       	adc	r23, r24
    19a4:	89 1f       	adc	r24, r25
    19a6:	9a 1f       	adc	r25, r26
    19a8:	a1 1d       	adc	r26, r1
    19aa:	68 0f       	add	r22, r24
    19ac:	79 1f       	adc	r23, r25
    19ae:	8a 1f       	adc	r24, r26
    19b0:	91 1d       	adc	r25, r1
    19b2:	a1 1d       	adc	r26, r1
    19b4:	6a 0f       	add	r22, r26
    19b6:	71 1d       	adc	r23, r1
    19b8:	81 1d       	adc	r24, r1
    19ba:	91 1d       	adc	r25, r1
    19bc:	a1 1d       	adc	r26, r1
    19be:	20 d0       	rcall	.+64     	; 0x1a00 <__ultoa_invert+0x84>
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <__ultoa_invert+0x48>
    19c2:	68 94       	set
    19c4:	3f 91       	pop	r19
    19c6:	2a e0       	ldi	r18, 0x0A	; 10
    19c8:	26 9f       	mul	r18, r22
    19ca:	11 24       	eor	r1, r1
    19cc:	30 19       	sub	r19, r0
    19ce:	30 5d       	subi	r19, 0xD0	; 208
    19d0:	31 93       	st	Z+, r19
    19d2:	de f6       	brtc	.-74     	; 0x198a <__ultoa_invert+0xe>
    19d4:	cf 01       	movw	r24, r30
    19d6:	08 95       	ret
    19d8:	46 2f       	mov	r20, r22
    19da:	47 70       	andi	r20, 0x07	; 7
    19dc:	40 5d       	subi	r20, 0xD0	; 208
    19de:	41 93       	st	Z+, r20
    19e0:	b3 e0       	ldi	r27, 0x03	; 3
    19e2:	0f d0       	rcall	.+30     	; 0x1a02 <__ultoa_invert+0x86>
    19e4:	c9 f7       	brne	.-14     	; 0x19d8 <__ultoa_invert+0x5c>
    19e6:	f6 cf       	rjmp	.-20     	; 0x19d4 <__ultoa_invert+0x58>
    19e8:	46 2f       	mov	r20, r22
    19ea:	4f 70       	andi	r20, 0x0F	; 15
    19ec:	40 5d       	subi	r20, 0xD0	; 208
    19ee:	4a 33       	cpi	r20, 0x3A	; 58
    19f0:	18 f0       	brcs	.+6      	; 0x19f8 <__ultoa_invert+0x7c>
    19f2:	49 5d       	subi	r20, 0xD9	; 217
    19f4:	31 fd       	sbrc	r19, 1
    19f6:	40 52       	subi	r20, 0x20	; 32
    19f8:	41 93       	st	Z+, r20
    19fa:	02 d0       	rcall	.+4      	; 0x1a00 <__ultoa_invert+0x84>
    19fc:	a9 f7       	brne	.-22     	; 0x19e8 <__ultoa_invert+0x6c>
    19fe:	ea cf       	rjmp	.-44     	; 0x19d4 <__ultoa_invert+0x58>
    1a00:	b4 e0       	ldi	r27, 0x04	; 4
    1a02:	a6 95       	lsr	r26
    1a04:	97 95       	ror	r25
    1a06:	87 95       	ror	r24
    1a08:	77 95       	ror	r23
    1a0a:	67 95       	ror	r22
    1a0c:	ba 95       	dec	r27
    1a0e:	c9 f7       	brne	.-14     	; 0x1a02 <__ultoa_invert+0x86>
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	61 05       	cpc	r22, r1
    1a14:	71 05       	cpc	r23, r1
    1a16:	08 95       	ret
    1a18:	9b 01       	movw	r18, r22
    1a1a:	ac 01       	movw	r20, r24
    1a1c:	0a 2e       	mov	r0, r26
    1a1e:	06 94       	lsr	r0
    1a20:	57 95       	ror	r21
    1a22:	47 95       	ror	r20
    1a24:	37 95       	ror	r19
    1a26:	27 95       	ror	r18
    1a28:	ba 95       	dec	r27
    1a2a:	c9 f7       	brne	.-14     	; 0x1a1e <__ultoa_invert+0xa2>
    1a2c:	62 0f       	add	r22, r18
    1a2e:	73 1f       	adc	r23, r19
    1a30:	84 1f       	adc	r24, r20
    1a32:	95 1f       	adc	r25, r21
    1a34:	a0 1d       	adc	r26, r0
    1a36:	08 95       	ret

00001a38 <_exit>:
    1a38:	f8 94       	cli

00001a3a <__stop_program>:
    1a3a:	ff cf       	rjmp	.-2      	; 0x1a3a <__stop_program>
