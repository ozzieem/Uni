
avr_sio_isr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001aa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  00001aa2  00001b36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b3  0080013e  0080013e  00001c14  2**0
                  ALLOC
  3 .stab         00001128  00000000  00000000  00001c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000479  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000031b5  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002b0  00000000  00000000  000031e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002db9  00000000  00000000  00003494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000125b  00000000  00000000  0000624d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000016f7  00000000  00000000  000074a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009a0  00000000  00000000  00008ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000087d  00000000  00000000  00009540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002bb5  00000000  00000000  00009dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000250  00000000  00000000  0000c972  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_13>
      38:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_14>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <__c.2325>:
      54:	44 44 52 41 00                                      DDRA.

00000059 <__c.2327>:
      59:	50 41 00                                            PA.

0000005c <__c.2329>:
      5c:	44 44 52 42 00                                      DDRB.

00000061 <__c.2331>:
      61:	57 52 00                                            WR.

00000064 <__c.2333>:
      64:	52 44 00                                            RD.

00000067 <__c.2335>:
      67:	53 52 00                                            SR.

0000006a <__c.2337>:
      6a:	52 44 41 4c 4c 00                                   RDALL.

00000070 <__c.2343>:
      70:	57 52 56 45 43 54 00                                WRVECT.

00000077 <__c.2144>:
      77:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

00000084 <__ctors_end>:
      84:	11 24       	eor	r1, r1
      86:	1f be       	out	0x3f, r1	; 63
      88:	cf e5       	ldi	r28, 0x5F	; 95
      8a:	d8 e0       	ldi	r29, 0x08	; 8
      8c:	de bf       	out	0x3e, r29	; 62
      8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
      90:	11 e0       	ldi	r17, 0x01	; 1
      92:	a0 e6       	ldi	r26, 0x60	; 96
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	e2 ea       	ldi	r30, 0xA2	; 162
      98:	fa e1       	ldi	r31, 0x1A	; 26
      9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
      9c:	05 90       	lpm	r0, Z+
      9e:	0d 92       	st	X+, r0
      a0:	ae 33       	cpi	r26, 0x3E	; 62
      a2:	b1 07       	cpc	r27, r17
      a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
      a6:	22 e0       	ldi	r18, 0x02	; 2
      a8:	ae e3       	ldi	r26, 0x3E	; 62
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
      ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
      b0:	a1 3f       	cpi	r26, 0xF1	; 241
      b2:	b2 07       	cpc	r27, r18
      b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
      b6:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <main>
      ba:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <qrbInit>:
/** \ingroup qrb
    Init of the ring buffert queue. The buffert element is a character.
  */
void qrbInit(qrb *o)
{
  o->wrPtr=0;
      c2:	fc 01       	movw	r30, r24
      c4:	10 82       	st	Z, r1
  o->rdPtr=0;
      c6:	11 82       	std	Z+1, r1	; 0x01
      c8:	08 95       	ret

000000ca <qrbEmpty>:
    \param o Object pointer to the ring buffert.
    \return True if the queue is empty otherwise false.
  */
int qrbEmpty(qrb *o)
{ 
  return (o->wrPtr == o->rdPtr); 
      ca:	fc 01       	movw	r30, r24
      cc:	40 81       	ld	r20, Z
      ce:	81 81       	ldd	r24, Z+1	; 0x01
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	48 17       	cp	r20, r24
      d6:	11 f0       	breq	.+4      	; 0xdc <qrbEmpty+0x12>
      d8:	20 e0       	ldi	r18, 0x00	; 0
      da:	30 e0       	ldi	r19, 0x00	; 0
}
      dc:	c9 01       	movw	r24, r18
      de:	08 95       	ret

000000e0 <qrbFull>:
    \param o Object pointer to the ring buffert.
    \return True if the queue is full otherwise false.
  */
int qrbFull(qrb *o)
{
  int d=o->wrPtr - o->rdPtr;
      e0:	fc 01       	movw	r30, r24
      e2:	20 81       	ld	r18, Z
      e4:	81 81       	ldd	r24, Z+1	; 0x01
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	28 1b       	sub	r18, r24
      ea:	31 09       	sbc	r19, r1
   
  if ( d < 0 )
      ec:	37 ff       	sbrs	r19, 7
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <qrbFull+0x14>
  { d=QRB_SIZE+d; }
      f0:	20 58       	subi	r18, 0x80	; 128
      f2:	3f 4f       	sbci	r19, 0xFF	; 255
  
  return d == (QRB_SIZE-1);
      f4:	41 e0       	ldi	r20, 0x01	; 1
      f6:	50 e0       	ldi	r21, 0x00	; 0
      f8:	2f 37       	cpi	r18, 0x7F	; 127
      fa:	31 05       	cpc	r19, r1
      fc:	11 f0       	breq	.+4      	; 0x102 <qrbFull+0x22>
      fe:	40 e0       	ldi	r20, 0x00	; 0
     100:	50 e0       	ldi	r21, 0x00	; 0
}
     102:	ca 01       	movw	r24, r20
     104:	08 95       	ret

00000106 <qrbEnqueue>:
    Write of a character to the ring buffert. The write is done only if the queue is not full.
    \param o Object pointer to the ring buffert.
    \param c Character to be passed to the ring buffer.
  */
void qrbEnqueue(qrb *o, char c)
{
     106:	0f 93       	push	r16
     108:	1f 93       	push	r17
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	1f 92       	push	r1
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	8c 01       	movw	r16, r24
  asm("cli");
     116:	f8 94       	cli
  if ( ! qrbFull(o) )
     118:	69 83       	std	Y+1, r22	; 0x01
     11a:	0e 94 70 00 	call	0xe0	; 0xe0 <qrbFull>
     11e:	69 81       	ldd	r22, Y+1	; 0x01
     120:	89 2b       	or	r24, r25
     122:	51 f4       	brne	.+20     	; 0x138 <qrbEnqueue+0x32>
  {    
    o->b[(int)o->wrPtr]=c;
     124:	f8 01       	movw	r30, r16
     126:	80 81       	ld	r24, Z
     128:	e8 0f       	add	r30, r24
     12a:	f1 1d       	adc	r31, r1
     12c:	62 83       	std	Z+2, r22	; 0x02
	o->wrPtr = (o->wrPtr + 1) & QRB_MASK;  
     12e:	f8 01       	movw	r30, r16
     130:	80 81       	ld	r24, Z
     132:	8f 5f       	subi	r24, 0xFF	; 255
     134:	8f 77       	andi	r24, 0x7F	; 127
     136:	80 83       	st	Z, r24
  }/*if*/ 
  asm("sei");
     138:	78 94       	sei
}
     13a:	0f 90       	pop	r0
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	1f 91       	pop	r17
     142:	0f 91       	pop	r16
     144:	08 95       	ret

00000146 <qrbEnqueueIsr>:
    Write of a character to the ring buffert. The write is done only if the queue is not full.
    \param o Object pointer to the ring buffert.
    \param c Character to be passed to the ring buffer.
  */
void qrbEnqueueIsr(qrb *o, char c)
{
     146:	0f 93       	push	r16
     148:	1f 93       	push	r17
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	1f 92       	push	r1
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	8c 01       	movw	r16, r24
  
  if ( ! qrbFull(o) )
     156:	69 83       	std	Y+1, r22	; 0x01
     158:	0e 94 70 00 	call	0xe0	; 0xe0 <qrbFull>
     15c:	69 81       	ldd	r22, Y+1	; 0x01
     15e:	89 2b       	or	r24, r25
     160:	51 f4       	brne	.+20     	; 0x176 <qrbEnqueueIsr+0x30>
  {   
    o->b[(int)o->wrPtr]=c;
     162:	f8 01       	movw	r30, r16
     164:	80 81       	ld	r24, Z
     166:	e8 0f       	add	r30, r24
     168:	f1 1d       	adc	r31, r1
     16a:	62 83       	std	Z+2, r22	; 0x02
	o->wrPtr = (o->wrPtr + 1) & QRB_MASK;  
     16c:	f8 01       	movw	r30, r16
     16e:	80 81       	ld	r24, Z
     170:	8f 5f       	subi	r24, 0xFF	; 255
     172:	8f 77       	andi	r24, 0x7F	; 127
     174:	80 83       	st	Z, r24
  }/*if*/ 
}
     176:	0f 90       	pop	r0
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	1f 91       	pop	r17
     17e:	0f 91       	pop	r16
     180:	08 95       	ret

00000182 <qrbDequeue>:
    Read of a character from the ring buffert queue.
    \param o Object pointer to the ring buffert.
    \return The character read, if the queue is empty the return value is -1.
  */
int qrbDequeue(qrb *o)
{   
     182:	fc 01       	movw	r30, r24
  asm("cli");
     184:	f8 94       	cli
    \param o Object pointer to the ring buffert.
    \return True if the queue is empty otherwise false.
  */
int qrbEmpty(qrb *o)
{ 
  return (o->wrPtr == o->rdPtr); 
     186:	90 81       	ld	r25, Z
     188:	81 81       	ldd	r24, Z+1	; 0x01
  */
int qrbDequeue(qrb *o)
{   
  asm("cli");
  int c=-1; 
  if ( ! qrbEmpty(o) )
     18a:	98 17       	cp	r25, r24
     18c:	61 f0       	breq	.+24     	; 0x1a6 <qrbDequeue+0x24>
  { 
    c = o->b[(int)o->rdPtr];
     18e:	81 81       	ldd	r24, Z+1	; 0x01
     190:	df 01       	movw	r26, r30
     192:	a8 0f       	add	r26, r24
     194:	b1 1d       	adc	r27, r1
     196:	12 96       	adiw	r26, 0x02	; 2
     198:	2c 91       	ld	r18, X
     19a:	30 e0       	ldi	r19, 0x00	; 0
    o->rdPtr = (o->rdPtr + 1) & QRB_MASK;      
     19c:	81 81       	ldd	r24, Z+1	; 0x01
     19e:	8f 5f       	subi	r24, 0xFF	; 255
     1a0:	8f 77       	andi	r24, 0x7F	; 127
     1a2:	81 83       	std	Z+1, r24	; 0x01
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <qrbDequeue+0x28>
    \return The character read, if the queue is empty the return value is -1.
  */
int qrbDequeue(qrb *o)
{   
  asm("cli");
  int c=-1; 
     1a6:	2f ef       	ldi	r18, 0xFF	; 255
     1a8:	3f ef       	ldi	r19, 0xFF	; 255
  if ( ! qrbEmpty(o) )
  { 
    c = o->b[(int)o->rdPtr];
    o->rdPtr = (o->rdPtr + 1) & QRB_MASK;      
  } /*if*/
  asm("sei");
     1aa:	78 94       	sei
  return c;
}
     1ac:	c9 01       	movw	r24, r18
     1ae:	08 95       	ret

000001b0 <qrbDequeueIsr>:
    Read of a character from the ring buffert queue.
    \param o Object pointer to the ring buffert.
    \return The character read, if the queue is empty the return value is -1.
  */
int qrbDequeueIsr(qrb *o)
{   
     1b0:	fc 01       	movw	r30, r24
    \param o Object pointer to the ring buffert.
    \return True if the queue is empty otherwise false.
  */
int qrbEmpty(qrb *o)
{ 
  return (o->wrPtr == o->rdPtr); 
     1b2:	90 81       	ld	r25, Z
     1b4:	81 81       	ldd	r24, Z+1	; 0x01
  */
int qrbDequeueIsr(qrb *o)
{   
  
  int c=-1; 
  if ( ! qrbEmpty(o) )
     1b6:	98 17       	cp	r25, r24
     1b8:	61 f0       	breq	.+24     	; 0x1d2 <qrbDequeueIsr+0x22>
  { 
    c = o->b[(int)o->rdPtr];
     1ba:	81 81       	ldd	r24, Z+1	; 0x01
     1bc:	df 01       	movw	r26, r30
     1be:	a8 0f       	add	r26, r24
     1c0:	b1 1d       	adc	r27, r1
     1c2:	12 96       	adiw	r26, 0x02	; 2
     1c4:	2c 91       	ld	r18, X
     1c6:	30 e0       	ldi	r19, 0x00	; 0
    o->rdPtr = (o->rdPtr + 1) & QRB_MASK;      
     1c8:	81 81       	ldd	r24, Z+1	; 0x01
     1ca:	8f 5f       	subi	r24, 0xFF	; 255
     1cc:	8f 77       	andi	r24, 0x7F	; 127
     1ce:	81 83       	std	Z+1, r24	; 0x01
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <qrbDequeueIsr+0x26>
    \return The character read, if the queue is empty the return value is -1.
  */
int qrbDequeueIsr(qrb *o)
{   
  
  int c=-1; 
     1d2:	2f ef       	ldi	r18, 0xFF	; 255
     1d4:	3f ef       	ldi	r19, 0xFF	; 255
    c = o->b[(int)o->rdPtr];
    o->rdPtr = (o->rdPtr + 1) & QRB_MASK;      
  } /*if*/
  
  return c;
}
     1d6:	c9 01       	movw	r24, r18
     1d8:	08 95       	ret

000001da <qrbFindCharacter>:
    \param o Object pointer to the ring buffert.
    \param c Search buffert for the character.
    \return True if the character is found else false
  */
int qrbFindCharacter(qrb *o, char c)
{   
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <qrbFindCharacter+0x6>
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
  volatile char wrPtr = o->wrPtr;
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 81       	ld	r18, Z
     1e8:	2a 83       	std	Y+2, r18	; 0x02
  volatile char rdPtr = o->rdPtr;
     1ea:	21 81       	ldd	r18, Z+1	; 0x01
     1ec:	0a c0       	rjmp	.+20     	; 0x202 <qrbFindCharacter+0x28>

  while ( wrPtr != rdPtr )
  { 
  	 if ( c == o->b[(int)rdPtr] ) 
     1ee:	29 81       	ldd	r18, Y+1	; 0x01
     1f0:	fc 01       	movw	r30, r24
     1f2:	e2 0f       	add	r30, r18
     1f4:	f1 1d       	adc	r31, r1
     1f6:	22 81       	ldd	r18, Z+2	; 0x02
     1f8:	62 17       	cp	r22, r18
     1fa:	59 f0       	breq	.+22     	; 0x212 <qrbFindCharacter+0x38>
	 	return 1; 
	 rdPtr = (rdPtr+1) & QRB_MASK;
     1fc:	29 81       	ldd	r18, Y+1	; 0x01
     1fe:	2f 5f       	subi	r18, 0xFF	; 255
     200:	2f 77       	andi	r18, 0x7F	; 127
     202:	29 83       	std	Y+1, r18	; 0x01
int qrbFindCharacter(qrb *o, char c)
{   
  volatile char wrPtr = o->wrPtr;
  volatile char rdPtr = o->rdPtr;

  while ( wrPtr != rdPtr )
     204:	3a 81       	ldd	r19, Y+2	; 0x02
     206:	29 81       	ldd	r18, Y+1	; 0x01
     208:	32 13       	cpse	r19, r18
     20a:	f1 cf       	rjmp	.-30     	; 0x1ee <qrbFindCharacter+0x14>
  	 if ( c == o->b[(int)rdPtr] ) 
	 	return 1; 
	 rdPtr = (rdPtr+1) & QRB_MASK;
  } 

  return 0;
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <qrbFindCharacter+0x3c>
  volatile char rdPtr = o->rdPtr;

  while ( wrPtr != rdPtr )
  { 
  	 if ( c == o->b[(int)rdPtr] ) 
	 	return 1; 
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	30 e0       	ldi	r19, 0x00	; 0
	 rdPtr = (rdPtr+1) & QRB_MASK;
  } 

  return 0;
}
     216:	c9 01       	movw	r24, r18
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	08 95       	ret

00000222 <__vector_14>:
    there is time to send a next character. If no more characters are available
    to send then disable this interrupt.
  */
//SIGNAL( SIG_UART_DATA  )
ISR( USART_UDRE_vect  )
{
     222:	1f 92       	push	r1
     224:	0f 92       	push	r0
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	0f 92       	push	r0
     22a:	11 24       	eor	r1, r1
     22c:	2f 93       	push	r18
     22e:	3f 93       	push	r19
     230:	4f 93       	push	r20
     232:	5f 93       	push	r21
     234:	6f 93       	push	r22
     236:	7f 93       	push	r23
     238:	8f 93       	push	r24
     23a:	9f 93       	push	r25
     23c:	af 93       	push	r26
     23e:	bf 93       	push	r27
     240:	ef 93       	push	r30
     242:	ff 93       	push	r31
  char c;
  
  if ( qrbEmpty(&usart0.tq) )
     244:	84 ec       	ldi	r24, 0xC4	; 196
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	0e 94 65 00 	call	0xca	; 0xca <qrbEmpty>
     24c:	89 2b       	or	r24, r25
     24e:	11 f0       	breq	.+4      	; 0x254 <__vector_14+0x32>
    { 
      bUCSRB.udrie=0; //Disable Tx-interrupt
     250:	55 98       	cbi	0x0a, 5	; 10
     252:	05 c0       	rjmp	.+10     	; 0x25e <__vector_14+0x3c>
    }
  else
    {      
      c = qrbDequeueIsr(&usart0.tq);
     254:	84 ec       	ldi	r24, 0xC4	; 196
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <qrbDequeueIsr>
      UDR = c; 
     25c:	8c b9       	out	0x0c, r24	; 12
	}//else

}
     25e:	ff 91       	pop	r31
     260:	ef 91       	pop	r30
     262:	bf 91       	pop	r27
     264:	af 91       	pop	r26
     266:	9f 91       	pop	r25
     268:	8f 91       	pop	r24
     26a:	7f 91       	pop	r23
     26c:	6f 91       	pop	r22
     26e:	5f 91       	pop	r21
     270:	4f 91       	pop	r20
     272:	3f 91       	pop	r19
     274:	2f 91       	pop	r18
     276:	0f 90       	pop	r0
     278:	0f be       	out	0x3f, r0	; 63
     27a:	0f 90       	pop	r0
     27c:	1f 90       	pop	r1
     27e:	18 95       	reti

00000280 <__vector_13>:
    Receive data register interrupt. When this interrupt occurs it is time to read 
    a character from the Rx register.
  */
//SIGNAL( SIG_UART_RECV )
ISR( USART_RXC_vect )
{
     280:	1f 92       	push	r1
     282:	0f 92       	push	r0
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	0f 92       	push	r0
     288:	11 24       	eor	r1, r1
     28a:	2f 93       	push	r18
     28c:	3f 93       	push	r19
     28e:	4f 93       	push	r20
     290:	5f 93       	push	r21
     292:	6f 93       	push	r22
     294:	7f 93       	push	r23
     296:	8f 93       	push	r24
     298:	9f 93       	push	r25
     29a:	af 93       	push	r26
     29c:	bf 93       	push	r27
     29e:	ef 93       	push	r30
     2a0:	ff 93       	push	r31
  char c;
  c = UDR;;
     2a2:	6c b1       	in	r22, 0x0c	; 12
  qrbEnqueueIsr(&usart0.rq, c); 
     2a4:	82 e4       	ldi	r24, 0x42	; 66
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	0e 94 a3 00 	call	0x146	; 0x146 <qrbEnqueueIsr>
}
     2ac:	ff 91       	pop	r31
     2ae:	ef 91       	pop	r30
     2b0:	bf 91       	pop	r27
     2b2:	af 91       	pop	r26
     2b4:	9f 91       	pop	r25
     2b6:	8f 91       	pop	r24
     2b8:	7f 91       	pop	r23
     2ba:	6f 91       	pop	r22
     2bc:	5f 91       	pop	r21
     2be:	4f 91       	pop	r20
     2c0:	3f 91       	pop	r19
     2c2:	2f 91       	pop	r18
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <io_usart_isr_init>:
    \param baud Selected baud rate for example 9600.
    \param megahertz CPU clock frequency (IO_USART_16MHZ, .. ,IO_USART_1MHZ ).
  */
	
void io_usart_isr_init(unsigned int baud, unsigned long megahertz)
{
     2ce:	9c 01       	movw	r18, r24
     2d0:	cb 01       	movw	r24, r22
     2d2:	ba 01       	movw	r22, r20
  unsigned int baudreg = (megahertz/(baud*16l)-1);
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	e4 e0       	ldi	r30, 0x04	; 4
     2da:	22 0f       	add	r18, r18
     2dc:	33 1f       	adc	r19, r19
     2de:	44 1f       	adc	r20, r20
     2e0:	55 1f       	adc	r21, r21
     2e2:	ea 95       	dec	r30
     2e4:	d1 f7       	brne	.-12     	; 0x2da <io_usart_isr_init+0xc>
     2e6:	0e 94 b9 06 	call	0xd72	; 0xd72 <__udivmodsi4>
     2ea:	21 50       	subi	r18, 0x01	; 1
     2ec:	31 09       	sbc	r19, r1
  //...Set baud rate...
  UBRRH = (unsigned char)(baudreg>>8);
     2ee:	30 bd       	out	0x20, r19	; 32
  UBRRL = (unsigned char)baudreg;
     2f0:	29 b9       	out	0x09, r18	; 9
  //...Enable receiver and transmitter...
  UCSRB = (1<<RXEN)|(1<<TXEN);
     2f2:	88 e1       	ldi	r24, 0x18	; 24
     2f4:	8a b9       	out	0x0a, r24	; 10
  //...Set frame format: 1 start, 8 data, 2 stop bits...
  UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     2f6:	8e e8       	ldi	r24, 0x8E	; 142
     2f8:	80 bd       	out	0x20, r24	; 32

  //... Init if receive and transmit buffers
  qrbInit(&usart0.rq);  
     2fa:	82 e4       	ldi	r24, 0x42	; 66
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	0e 94 61 00 	call	0xc2	; 0xc2 <qrbInit>
  qrbInit(&usart0.tq);
     302:	84 ec       	ldi	r24, 0xC4	; 196
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	0e 94 61 00 	call	0xc2	; 0xc2 <qrbInit>

  //TRANSMIT COMPLETE INTERRUPT DISABLED
  bUCSRB.udrie=0;
     30a:	55 98       	cbi	0x0a, 5	; 10
  
  //RECEIVE COMPLETE INTERRUPT ENABLED
  bUCSRB.rxcie=1;
     30c:	57 9a       	sbi	0x0a, 7	; 10
     30e:	08 95       	ret

00000310 <io_usart_isr_getC>:
  */
char io_usart_isr_getC()
{ 
  char c;
  
  while ( qrbEmpty(&usart0.rq) )
     310:	82 e4       	ldi	r24, 0x42	; 66
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 65 00 	call	0xca	; 0xca <qrbEmpty>
     318:	89 2b       	or	r24, r25
     31a:	d1 f7       	brne	.-12     	; 0x310 <io_usart_isr_getC>
      ; /*while*/      
     
  c = qrbDequeue(&usart0.rq);
     31c:	82 e4       	ldi	r24, 0x42	; 66
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 c1 00 	call	0x182	; 0x182 <qrbDequeue>
  return c;
}
     324:	08 95       	ret

00000326 <io_usart_isr_readString>:
    \param buf The characters read are put in the buf vector.
    \param size Maximum number of characters to read if no '\n' character comes.
	\param terminationCharacter Character that ends the string.
  */
void io_usart_isr_readString(char *buf, int size, char terminationCharacter)
{      
     326:	cf 92       	push	r12
     328:	df 92       	push	r13
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	00 d0       	rcall	.+0      	; 0x338 <io_usart_isr_readString+0x12>
     338:	1f 92       	push	r1
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	8c 01       	movw	r16, r24
     340:	6b 01       	movw	r12, r22
  volatile int i=0; 
     342:	1a 82       	std	Y+2, r1	; 0x02
     344:	19 82       	std	Y+1, r1	; 0x01
  
  do
    {
      buf[i]=io_usart_isr_getC(&usart0);          
     346:	e9 80       	ldd	r14, Y+1	; 0x01
     348:	fa 80       	ldd	r15, Y+2	; 0x02
     34a:	e0 0e       	add	r14, r16
     34c:	f1 1e       	adc	r15, r17
     34e:	82 e4       	ldi	r24, 0x42	; 66
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	4b 83       	std	Y+3, r20	; 0x03
     354:	0e 94 88 01 	call	0x310	; 0x310 <io_usart_isr_getC>
     358:	f7 01       	movw	r30, r14
     35a:	80 83       	st	Z, r24
      i++;         
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	9a 83       	std	Y+2, r25	; 0x02
     364:	89 83       	std	Y+1, r24	; 0x01
    }  
    while ( (i<size) && (buf[i-1]!=terminationCharacter) );
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	9a 81       	ldd	r25, Y+2	; 0x02
     36a:	4b 81       	ldd	r20, Y+3	; 0x03
     36c:	8c 15       	cp	r24, r12
     36e:	9d 05       	cpc	r25, r13
     370:	44 f4       	brge	.+16     	; 0x382 <io_usart_isr_readString+0x5c>
     372:	e9 81       	ldd	r30, Y+1	; 0x01
     374:	fa 81       	ldd	r31, Y+2	; 0x02
     376:	e0 0f       	add	r30, r16
     378:	f1 1f       	adc	r31, r17
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	80 81       	ld	r24, Z
     37e:	84 13       	cpse	r24, r20
     380:	e2 cf       	rjmp	.-60     	; 0x346 <io_usart_isr_readString+0x20>

  buf[i]='\0';
     382:	e9 81       	ldd	r30, Y+1	; 0x01
     384:	fa 81       	ldd	r31, Y+2	; 0x02
     386:	e0 0f       	add	r30, r16
     388:	f1 1f       	adc	r31, r17
     38a:	10 82       	st	Z, r1
}
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	08 95       	ret

000003a4 <io_usart_isr_putC>:
/** \ingroup io_usart_isr
    Write of one character to the transmitter.
    \param c The character to write.
  */
void io_usart_isr_putC(char c)
{  
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	1f 92       	push	r1
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	68 2f       	mov	r22, r24
  while ( qrbFull(&usart0.tq) ) 
     3b0:	84 ec       	ldi	r24, 0xC4	; 196
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	69 83       	std	Y+1, r22	; 0x01
     3b6:	0e 94 70 00 	call	0xe0	; 0xe0 <qrbFull>
     3ba:	69 81       	ldd	r22, Y+1	; 0x01
     3bc:	89 2b       	or	r24, r25
     3be:	c1 f7       	brne	.-16     	; 0x3b0 <io_usart_isr_putC+0xc>
    {  ; }//while 
     
  qrbEnqueue(&usart0.tq, c);
     3c0:	84 ec       	ldi	r24, 0xC4	; 196
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 83 00 	call	0x106	; 0x106 <qrbEnqueue>
  
  //Enable transmit complete interrupt
  bUCSRB.udrie=1;
     3c8:	55 9a       	sbi	0x0a, 5	; 10
}
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <io_usart_isr_print>:
/** \ingroup io_usart_isr
    Writes characters from the buffert buf until a NULL character 
    occurs.
  */
void io_usart_isr_print(char *buf)
{ 
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	ec 01       	movw	r28, r24
  int i=0;              

  while ( buf[i]!='\0' )
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <io_usart_isr_print+0xc>
    {       
	  
      io_usart_isr_putC(buf[i]);
     3da:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <io_usart_isr_putC>
  */
void io_usart_isr_print(char *buf)
{ 
  int i=0;              

  while ( buf[i]!='\0' )
     3de:	89 91       	ld	r24, Y+
     3e0:	81 11       	cpse	r24, r1
     3e2:	fb cf       	rjmp	.-10     	; 0x3da <io_usart_isr_print+0x8>
	  
      io_usart_isr_putC(buf[i]);
	   
      i++;
    }/*while*/
}
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <io_usart_isr_event_termination_character>:
    Test if the termination character is in the buffert.
	\return True (1) if the character is in the Rx buffert, else false (0).
  */
int io_usart_isr_event_termination_character(char terminationCharacter)
{ 
  return qrbFindCharacter(&usart0.rq, terminationCharacter);
     3ea:	68 2f       	mov	r22, r24
     3ec:	82 e4       	ldi	r24, 0x42	; 66
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0c 94 ed 00 	jmp	0x1da	; 0x1da <qrbFindCharacter>

000003f4 <string_to_upper>:
/**
 *  Convert alphabetical letters to upper case
 */
void string_to_upper(char *s)
{
	while ( *s != '\0')
     3f4:	08 c0       	rjmp	.+16     	; 0x406 <string_to_upper+0x12>
	{
		if ( ('a' <= *s) && (*s <= 'z') )
     3f6:	32 2f       	mov	r19, r18
     3f8:	31 56       	subi	r19, 0x61	; 97
     3fa:	3a 31       	cpi	r19, 0x1A	; 26
     3fc:	18 f4       	brcc	.+6      	; 0x404 <string_to_upper+0x10>
		{
			*s = *s + 'A'-'a';
     3fe:	20 52       	subi	r18, 0x20	; 32
     400:	fc 01       	movw	r30, r24
     402:	20 83       	st	Z, r18
		}
		s++;
     404:	01 96       	adiw	r24, 0x01	; 1
/**
 *  Convert alphabetical letters to upper case
 */
void string_to_upper(char *s)
{
	while ( *s != '\0')
     406:	fc 01       	movw	r30, r24
     408:	20 81       	ld	r18, Z
     40a:	21 11       	cpse	r18, r1
     40c:	f4 cf       	rjmp	.-24     	; 0x3f6 <string_to_upper+0x2>
		{
			*s = *s + 'A'-'a';
		}
		s++;
	}
}
     40e:	08 95       	ret

00000410 <command_ddra>:

/**
 * Setup for PORTA.
 */
void command_ddra()
{
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
	word = strtok_r (NULL, delim, &brk);
     414:	60 91 60 00 	lds	r22, 0x0060
     418:	70 91 61 00 	lds	r23, 0x0061
     41c:	4b ee       	ldi	r20, 0xEB	; 235
     41e:	52 e0       	ldi	r21, 0x02	; 2
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 ed 06 	call	0xdda	; 0xdda <strtok_r>
     428:	ec 01       	movw	r28, r24
     42a:	90 93 f0 02 	sts	0x02F0, r25
     42e:	80 93 ef 02 	sts	0x02EF, r24
	if ( word != NULL )
     432:	00 97       	sbiw	r24, 0x00	; 0
     434:	c1 f1       	breq	.+112    	; 0x4a6 <command_ddra+0x96>
	{
		if ( strcmp(word,"?") == 0 )
     436:	6e e6       	ldi	r22, 0x6E	; 110
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <strcmp>
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	e9 f4       	brne	.+58     	; 0x47c <command_ddra+0x6c>
		{
			pa = DDRA;
     442:	8a b3       	in	r24, 0x1a	; 26
     444:	80 93 ed 02 	sts	0x02ED, r24
     448:	10 92 ee 02 	sts	0x02EE, r1
			sprintf(s,"DDRA %d\n", pa);
     44c:	1f 92       	push	r1
     44e:	8f 93       	push	r24
     450:	80 e7       	ldi	r24, 0x70	; 112
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	9f 93       	push	r25
     456:	8f 93       	push	r24
     458:	8b e6       	ldi	r24, 0x6B	; 107
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	9f 93       	push	r25
     45e:	8f 93       	push	r24
     460:	0e 94 14 07 	call	0xe28	; 0xe28 <sprintf>
			io_usart_isr_print(s);
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	8b e6       	ldi	r24, 0x6B	; 107
     472:	92 e0       	ldi	r25, 0x02	; 2
		{
			sscanf(word,"%d", &pa);
			DDRA = pa;	
		}
	}
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
	{
		if ( strcmp(word,"?") == 0 )
		{
			pa = DDRA;
			sprintf(s,"DDRA %d\n", pa);
			io_usart_isr_print(s);
     478:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <io_usart_isr_print>
		}
		else
		{
			sscanf(word,"%d", &pa);
     47c:	8d ee       	ldi	r24, 0xED	; 237
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	9f 93       	push	r25
     482:	8f 93       	push	r24
     484:	89 e7       	ldi	r24, 0x79	; 121
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	df 93       	push	r29
     48e:	cf 93       	push	r28
     490:	0e 94 36 07 	call	0xe6c	; 0xe6c <sscanf>
			DDRA = pa;	
     494:	80 91 ed 02 	lds	r24, 0x02ED
     498:	8a bb       	out	0x1a, r24	; 26
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
		}
	}
}
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <command_ddrb>:

/**
 * Setup for DDRB
 */
void command_ddrb()
{
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
	word = strtok_r (NULL, delim, &brk);
     4b0:	60 91 60 00 	lds	r22, 0x0060
     4b4:	70 91 61 00 	lds	r23, 0x0061
     4b8:	4b ee       	ldi	r20, 0xEB	; 235
     4ba:	52 e0       	ldi	r21, 0x02	; 2
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 ed 06 	call	0xdda	; 0xdda <strtok_r>
     4c4:	ec 01       	movw	r28, r24
     4c6:	90 93 f0 02 	sts	0x02F0, r25
     4ca:	80 93 ef 02 	sts	0x02EF, r24
	if ( word != NULL )
     4ce:	00 97       	sbiw	r24, 0x00	; 0
     4d0:	c1 f1       	breq	.+112    	; 0x542 <command_ddrb+0x96>
	{
		if ( strcmp(word,"?") == 0 )
     4d2:	6e e6       	ldi	r22, 0x6E	; 110
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <strcmp>
     4da:	00 97       	sbiw	r24, 0x00	; 0
     4dc:	e9 f4       	brne	.+58     	; 0x518 <command_ddrb+0x6c>
		{
			pa = DDRB;
     4de:	87 b3       	in	r24, 0x17	; 23
     4e0:	80 93 ed 02 	sts	0x02ED, r24
     4e4:	10 92 ee 02 	sts	0x02EE, r1
			sprintf(s,"DDRB %d\n", pa);
     4e8:	1f 92       	push	r1
     4ea:	8f 93       	push	r24
     4ec:	8c e7       	ldi	r24, 0x7C	; 124
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	9f 93       	push	r25
     4f2:	8f 93       	push	r24
     4f4:	8b e6       	ldi	r24, 0x6B	; 107
     4f6:	92 e0       	ldi	r25, 0x02	; 2
     4f8:	9f 93       	push	r25
     4fa:	8f 93       	push	r24
     4fc:	0e 94 14 07 	call	0xe28	; 0xe28 <sprintf>
			io_usart_isr_print(s);
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	8b e6       	ldi	r24, 0x6B	; 107
     50e:	92 e0       	ldi	r25, 0x02	; 2
		{
			sscanf(word,"%d", &pa);
			DDRB = pa;	
		}
	}
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
	{
		if ( strcmp(word,"?") == 0 )
		{
			pa = DDRB;
			sprintf(s,"DDRB %d\n", pa);
			io_usart_isr_print(s);
     514:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <io_usart_isr_print>
		}
		else
		{
			sscanf(word,"%d", &pa);
     518:	8d ee       	ldi	r24, 0xED	; 237
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	89 e7       	ldi	r24, 0x79	; 121
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
     528:	df 93       	push	r29
     52a:	cf 93       	push	r28
     52c:	0e 94 36 07 	call	0xe6c	; 0xe6c <sscanf>
			DDRB = pa;	
     530:	80 91 ed 02 	lds	r24, 0x02ED
     534:	87 bb       	out	0x17, r24	; 23
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
		}
	}
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <command_pa>:

/**
 * Command for PORTA
 */
void command_pa()
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
	
	word = strtok_r (NULL, delim, &brk);
     54c:	60 91 60 00 	lds	r22, 0x0060
     550:	70 91 61 00 	lds	r23, 0x0061
     554:	4b ee       	ldi	r20, 0xEB	; 235
     556:	52 e0       	ldi	r21, 0x02	; 2
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 ed 06 	call	0xdda	; 0xdda <strtok_r>
     560:	ec 01       	movw	r28, r24
     562:	90 93 f0 02 	sts	0x02F0, r25
     566:	80 93 ef 02 	sts	0x02EF, r24
	if ( word != NULL )
     56a:	00 97       	sbiw	r24, 0x00	; 0
     56c:	c1 f1       	breq	.+112    	; 0x5de <command_pa+0x96>
	{
		if ( strcmp(word,"?") == 0 )
     56e:	6e e6       	ldi	r22, 0x6E	; 110
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <strcmp>
     576:	00 97       	sbiw	r24, 0x00	; 0
     578:	e9 f4       	brne	.+58     	; 0x5b4 <command_pa+0x6c>
		{
			pa = PINA;
     57a:	89 b3       	in	r24, 0x19	; 25
     57c:	80 93 ed 02 	sts	0x02ED, r24
     580:	10 92 ee 02 	sts	0x02EE, r1
			sprintf(s,"PA %d\n", pa);
     584:	1f 92       	push	r1
     586:	8f 93       	push	r24
     588:	85 e8       	ldi	r24, 0x85	; 133
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	9f 93       	push	r25
     58e:	8f 93       	push	r24
     590:	8b e6       	ldi	r24, 0x6B	; 107
     592:	92 e0       	ldi	r25, 0x02	; 2
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	0e 94 14 07 	call	0xe28	; 0xe28 <sprintf>
			io_usart_isr_print(s);
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	8b e6       	ldi	r24, 0x6B	; 107
     5aa:	92 e0       	ldi	r25, 0x02	; 2
		{
			sscanf(word,"%d", &pa);
			PORTA = pa;	
		}
	}
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
	{
		if ( strcmp(word,"?") == 0 )
		{
			pa = PINA;
			sprintf(s,"PA %d\n", pa);
			io_usart_isr_print(s);
     5b0:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <io_usart_isr_print>
		}
		else
		{
			sscanf(word,"%d", &pa);
     5b4:	8d ee       	ldi	r24, 0xED	; 237
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24
     5bc:	89 e7       	ldi	r24, 0x79	; 121
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	df 93       	push	r29
     5c6:	cf 93       	push	r28
     5c8:	0e 94 36 07 	call	0xe6c	; 0xe6c <sscanf>
			PORTA = pa;	
     5cc:	80 91 ed 02 	lds	r24, 0x02ED
     5d0:	8b bb       	out	0x1b, r24	; 27
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
		}
	}
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <main>:
int address=0;
int data=0;

int main()
{
	spi_init();
     5e4:	0e 94 0c 05 	call	0xa18	; 0xa18 <spi_init>
	eeprom_write_enable();
     5e8:	0e 94 34 05 	call	0xa68	; 0xa68 <eeprom_write_enable>

	io_usart_isr_init(9600, 8000000);
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	52 e1       	ldi	r21, 0x12	; 18
     5f0:	6a e7       	ldi	r22, 0x7A	; 122
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	80 e8       	ldi	r24, 0x80	; 128
     5f6:	95 e2       	ldi	r25, 0x25	; 37
     5f8:	0e 94 67 01 	call	0x2ce	; 0x2ce <io_usart_isr_init>
	io_usart_isr_print("avr_sio_isr - 1\r\n");
     5fc:	8c e8       	ldi	r24, 0x8C	; 140
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <io_usart_isr_print>

	asm("	SEI		");
     604:	78 94       	sei
	while ( 1 )
	{

		if ( io_usart_isr_event_termination_character('\n') )
		{
			io_usart_isr_readString(s, 127, '\n');
     606:	cb e6       	ldi	r28, 0x6B	; 107
     608:	d2 e0       	ldi	r29, 0x02	; 2
								{
									word = strtok_r (NULL, delim, &brk);
									
									if ( word != NULL );
									{
										if ( sscanf(word,"%x", &data) == 1)
     60a:	8e e3       	ldi	r24, 0x3E	; 62
     60c:	a8 2e       	mov	r10, r24
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	b8 2e       	mov	r11, r24
     612:	0e e9       	ldi	r16, 0x9E	; 158
     614:	10 e0       	ldi	r17, 0x00	; 0
									}
								}
								while ( word != NULL );

								eeprom_write_vector(address, vdata, vi);
								sprintf(s,"WRTEST %d bytes \n\r", (int) vi);
     616:	9a ed       	ldi	r25, 0xDA	; 218
     618:	29 2e       	mov	r2, r25
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	39 2e       	mov	r3, r25
							}
							else if ( strcmp_P(word,PSTR("WRVECT"))     == 0 ) 	
							{
								word = strtok_r (NULL, delim, &brk);
								if ( word != NULL )
									sscanf(word,"%x", &address);
     61e:	20 e4       	ldi	r18, 0x40	; 64
     620:	c2 2e       	mov	r12, r18
     622:	21 e0       	ldi	r18, 0x01	; 1
     624:	d2 2e       	mov	r13, r18
								for (i=0; i<1024; i++)
								{
									if ( (i % 32) == 0 )
									{
										io_usart_isr_print("\n\r");
										sprintf(s," %04x: ",i);
     626:	3b ec       	ldi	r19, 0xCB	; 203
     628:	43 2e       	mov	r4, r19
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	53 2e       	mov	r5, r19
										io_usart_isr_print(s);
									}
									data = eeprom_read(i);
									sprintf(s," %02x ",data);
     62e:	43 ed       	ldi	r20, 0xD3	; 211
     630:	64 2e       	mov	r6, r20
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	74 2e       	mov	r7, r20
							{
								word = strtok_r (NULL, delim, &brk);
								if ( word != NULL )
									sscanf(word,"%x", &address);
								data = eeprom_read_sr();
								sprintf(s,"sr %02x\n\r", data);
     636:	51 ec       	ldi	r21, 0xC1	; 193
     638:	85 2e       	mov	r8, r21
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	95 2e       	mov	r9, r21


	while ( 1 )
	{

		if ( io_usart_isr_event_termination_character('\n') )
     63e:	8a e0       	ldi	r24, 0x0A	; 10
     640:	0e 94 f5 01 	call	0x3ea	; 0x3ea <io_usart_isr_event_termination_character>
     644:	89 2b       	or	r24, r25
     646:	d9 f3       	breq	.-10     	; 0x63e <main+0x5a>
		{
			io_usart_isr_readString(s, 127, '\n');
     648:	4a e0       	ldi	r20, 0x0A	; 10
     64a:	6f e7       	ldi	r22, 0x7F	; 127
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	8b e6       	ldi	r24, 0x6B	; 107
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0e 94 93 01 	call	0x326	; 0x326 <io_usart_isr_readString>

  			word = strtok_r (s,delim, &brk);
     656:	60 91 60 00 	lds	r22, 0x0060
     65a:	70 91 61 00 	lds	r23, 0x0061
     65e:	4b ee       	ldi	r20, 0xEB	; 235
     660:	52 e0       	ldi	r21, 0x02	; 2
     662:	8b e6       	ldi	r24, 0x6B	; 107
     664:	92 e0       	ldi	r25, 0x02	; 2
     666:	0e 94 ed 06 	call	0xdda	; 0xdda <strtok_r>
     66a:	90 93 f0 02 	sts	0x02F0, r25
     66e:	80 93 ef 02 	sts	0x02EF, r24
			string_to_upper(word);
     672:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <string_to_upper>

			if (word != NULL)
     676:	e0 90 ef 02 	lds	r14, 0x02EF
     67a:	f0 90 f0 02 	lds	r15, 0x02F0
     67e:	e1 14       	cp	r14, r1
     680:	f1 04       	cpc	r15, r1
     682:	e9 f2       	breq	.-70     	; 0x63e <main+0x5a>
			{	
							     if ( strcmp_P(word,PSTR("DDRA"))   == 0 ) 	command_ddra();
     684:	64 e5       	ldi	r22, 0x54	; 84
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	c7 01       	movw	r24, r14
     68a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <strcmp_P>
     68e:	89 2b       	or	r24, r25
     690:	19 f4       	brne	.+6      	; 0x698 <main+0xb4>
     692:	0e 94 08 02 	call	0x410	; 0x410 <command_ddra>
     696:	d3 cf       	rjmp	.-90     	; 0x63e <main+0x5a>
							else if ( strcmp_P(word,PSTR("PA"))     == 0 ) 	command_pa();
     698:	69 e5       	ldi	r22, 0x59	; 89
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	c7 01       	movw	r24, r14
     69e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <strcmp_P>
     6a2:	89 2b       	or	r24, r25
     6a4:	19 f4       	brne	.+6      	; 0x6ac <main+0xc8>
     6a6:	0e 94 a4 02 	call	0x548	; 0x548 <command_pa>
     6aa:	c9 cf       	rjmp	.-110    	; 0x63e <main+0x5a>
							else if ( strcmp_P(word,PSTR("DDRB"))   == 0 ) 	command_ddrb();
     6ac:	6c e5       	ldi	r22, 0x5C	; 92
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	c7 01       	movw	r24, r14
     6b2:	0e 94 db 06 	call	0xdb6	; 0xdb6 <strcmp_P>
     6b6:	89 2b       	or	r24, r25
     6b8:	19 f4       	brne	.+6      	; 0x6c0 <main+0xdc>
     6ba:	0e 94 56 02 	call	0x4ac	; 0x4ac <command_ddrb>
     6be:	bf cf       	rjmp	.-130    	; 0x63e <main+0x5a>
							else if ( strcmp_P(word,PSTR("WR"))     == 0 ) 	
     6c0:	61 e6       	ldi	r22, 0x61	; 97
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	c7 01       	movw	r24, r14
     6c6:	0e 94 db 06 	call	0xdb6	; 0xdb6 <strcmp_P>
     6ca:	89 2b       	or	r24, r25
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <main+0xec>
     6ce:	65 c0       	rjmp	.+202    	; 0x79a <main+0x1b6>
							{
								word = strtok_r (NULL, delim, &brk);
     6d0:	60 91 60 00 	lds	r22, 0x0060
     6d4:	70 91 61 00 	lds	r23, 0x0061
     6d8:	4b ee       	ldi	r20, 0xEB	; 235
     6da:	52 e0       	ldi	r21, 0x02	; 2
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 ed 06 	call	0xdda	; 0xdda <strtok_r>
     6e4:	90 93 f0 02 	sts	0x02F0, r25
     6e8:	80 93 ef 02 	sts	0x02EF, r24
								if ( word != NULL )
     6ec:	00 97       	sbiw	r24, 0x00	; 0
     6ee:	71 f0       	breq	.+28     	; 0x70c <main+0x128>
									sscanf(word,"%x", &address);
     6f0:	df 92       	push	r13
     6f2:	cf 92       	push	r12
     6f4:	1f 93       	push	r17
     6f6:	0f 93       	push	r16
     6f8:	9f 93       	push	r25
     6fa:	8f 93       	push	r24
     6fc:	0e 94 36 07 	call	0xe6c	; 0xe6c <sscanf>
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
								word = strtok_r (NULL, delim, &brk);
     70c:	60 91 60 00 	lds	r22, 0x0060
     710:	70 91 61 00 	lds	r23, 0x0061
     714:	4b ee       	ldi	r20, 0xEB	; 235
     716:	52 e0       	ldi	r21, 0x02	; 2
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 ed 06 	call	0xdda	; 0xdda <strtok_r>
     720:	90 93 f0 02 	sts	0x02F0, r25
     724:	80 93 ef 02 	sts	0x02EF, r24
								if ( word != NULL )
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	71 f0       	breq	.+28     	; 0x748 <main+0x164>
									sscanf(word,"%x", &data);
     72c:	bf 92       	push	r11
     72e:	af 92       	push	r10
     730:	1f 93       	push	r17
     732:	0f 93       	push	r16
     734:	9f 93       	push	r25
     736:	8f 93       	push	r24
     738:	0e 94 36 07 	call	0xe6c	; 0xe6c <sscanf>
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
								eeprom_write(address,data);
     748:	60 91 3e 01 	lds	r22, 0x013E
     74c:	80 91 40 01 	lds	r24, 0x0140
     750:	90 91 41 01 	lds	r25, 0x0141
     754:	0e 94 89 05 	call	0xb12	; 0xb12 <eeprom_write>
								sprintf(s,"wr %04x: %02x\n\r", address, data);
     758:	80 91 3f 01 	lds	r24, 0x013F
     75c:	8f 93       	push	r24
     75e:	80 91 3e 01 	lds	r24, 0x013E
     762:	8f 93       	push	r24
     764:	80 91 41 01 	lds	r24, 0x0141
     768:	8f 93       	push	r24
     76a:	80 91 40 01 	lds	r24, 0x0140
     76e:	8f 93       	push	r24
     770:	81 ea       	ldi	r24, 0xA1	; 161
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	9f 93       	push	r25
     776:	8f 93       	push	r24
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	0e 94 14 07 	call	0xe28	; 0xe28 <sprintf>
								io_usart_isr_print(s);
     780:	8b e6       	ldi	r24, 0x6B	; 107
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <io_usart_isr_print>
     788:	8d b7       	in	r24, 0x3d	; 61
     78a:	9e b7       	in	r25, 0x3e	; 62
     78c:	08 96       	adiw	r24, 0x08	; 8
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	9e bf       	out	0x3e, r25	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	8d bf       	out	0x3d, r24	; 61
     798:	52 cf       	rjmp	.-348    	; 0x63e <main+0x5a>
		
							}
							else if ( strcmp_P(word,PSTR("RD"))     == 0 ) 	
     79a:	64 e6       	ldi	r22, 0x64	; 100
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	c7 01       	movw	r24, r14
     7a0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <strcmp_P>
     7a4:	89 2b       	or	r24, r25
     7a6:	09 f0       	breq	.+2      	; 0x7aa <main+0x1c6>
     7a8:	45 c0       	rjmp	.+138    	; 0x834 <main+0x250>
							{
								word = strtok_r (NULL, delim, &brk);
     7aa:	60 91 60 00 	lds	r22, 0x0060
     7ae:	70 91 61 00 	lds	r23, 0x0061
     7b2:	4b ee       	ldi	r20, 0xEB	; 235
     7b4:	52 e0       	ldi	r21, 0x02	; 2
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 ed 06 	call	0xdda	; 0xdda <strtok_r>
     7be:	90 93 f0 02 	sts	0x02F0, r25
     7c2:	80 93 ef 02 	sts	0x02EF, r24
								if ( word != NULL )
     7c6:	00 97       	sbiw	r24, 0x00	; 0
     7c8:	71 f0       	breq	.+28     	; 0x7e6 <main+0x202>
									sscanf(word,"%x", &address);
     7ca:	df 92       	push	r13
     7cc:	cf 92       	push	r12
     7ce:	1f 93       	push	r17
     7d0:	0f 93       	push	r16
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 36 07 	call	0xe6c	; 0xe6c <sscanf>
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
								data = eeprom_read(address);
     7e6:	80 91 40 01 	lds	r24, 0x0140
     7ea:	90 91 41 01 	lds	r25, 0x0141
     7ee:	0e 94 43 06 	call	0xc86	; 0xc86 <eeprom_read>
     7f2:	80 93 3e 01 	sts	0x013E, r24
     7f6:	10 92 3f 01 	sts	0x013F, r1
								sprintf(s,"rd %04x: %02x\n\r", address, data);
     7fa:	1f 92       	push	r1
     7fc:	8f 93       	push	r24
     7fe:	80 91 41 01 	lds	r24, 0x0141
     802:	8f 93       	push	r24
     804:	80 91 40 01 	lds	r24, 0x0140
     808:	8f 93       	push	r24
     80a:	81 eb       	ldi	r24, 0xB1	; 177
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	9f 93       	push	r25
     810:	8f 93       	push	r24
     812:	df 93       	push	r29
     814:	cf 93       	push	r28
     816:	0e 94 14 07 	call	0xe28	; 0xe28 <sprintf>
								io_usart_isr_print(s);
     81a:	8b e6       	ldi	r24, 0x6B	; 107
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <io_usart_isr_print>
     822:	8d b7       	in	r24, 0x3d	; 61
     824:	9e b7       	in	r25, 0x3e	; 62
     826:	08 96       	adiw	r24, 0x08	; 8
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	9e bf       	out	0x3e, r25	; 62
     82e:	0f be       	out	0x3f, r0	; 63
     830:	8d bf       	out	0x3d, r24	; 61
     832:	05 cf       	rjmp	.-502    	; 0x63e <main+0x5a>
							}
							else if ( strcmp_P(word,PSTR("SR"))     == 0 ) 	
     834:	67 e6       	ldi	r22, 0x67	; 103
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	c7 01       	movw	r24, r14
     83a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <strcmp_P>
     83e:	89 2b       	or	r24, r25
     840:	49 f5       	brne	.+82     	; 0x894 <__stack+0x35>
							{
								word = strtok_r (NULL, delim, &brk);
     842:	60 91 60 00 	lds	r22, 0x0060
     846:	70 91 61 00 	lds	r23, 0x0061
     84a:	4b ee       	ldi	r20, 0xEB	; 235
     84c:	52 e0       	ldi	r21, 0x02	; 2
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 ed 06 	call	0xdda	; 0xdda <strtok_r>
     856:	90 93 f0 02 	sts	0x02F0, r25
     85a:	80 93 ef 02 	sts	0x02EF, r24
								if ( word != NULL )
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	71 f0       	breq	.+28     	; 0x87e <__stack+0x1f>
									sscanf(word,"%x", &address);
     862:	df 92       	push	r13
     864:	cf 92       	push	r12
     866:	1f 93       	push	r17
     868:	0f 93       	push	r16
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	0e 94 36 07 	call	0xe6c	; 0xe6c <sscanf>
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
								data = eeprom_read_sr();
     87e:	0e 94 88 06 	call	0xd10	; 0xd10 <eeprom_read_sr>
     882:	80 93 3e 01 	sts	0x013E, r24
     886:	10 92 3f 01 	sts	0x013F, r1
								sprintf(s,"sr %02x\n\r", data);
     88a:	1f 92       	push	r1
     88c:	8f 93       	push	r24
     88e:	9f 92       	push	r9
     890:	8f 92       	push	r8
     892:	ae c0       	rjmp	.+348    	; 0x9f0 <__stack+0x191>
								io_usart_isr_print(s);
							}
							else if ( strcmp_P(word,PSTR("RDALL"))     == 0 ) 	
     894:	6a e6       	ldi	r22, 0x6A	; 106
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	c7 01       	movw	r24, r14
     89a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <strcmp_P>
     89e:	89 2b       	or	r24, r25
     8a0:	f1 f5       	brne	.+124    	; 0x91e <__stack+0xbf>
     8a2:	e1 2c       	mov	r14, r1
     8a4:	f1 2c       	mov	r15, r1
							{
								int i;
								for (i=0; i<1024; i++)
								{
									if ( (i % 32) == 0 )
     8a6:	c7 01       	movw	r24, r14
     8a8:	8f 71       	andi	r24, 0x1F	; 31
     8aa:	99 27       	eor	r25, r25
     8ac:	89 2b       	or	r24, r25
     8ae:	b1 f4       	brne	.+44     	; 0x8dc <__stack+0x7d>
									{
										io_usart_isr_print("\n\r");
     8b0:	8a ee       	ldi	r24, 0xEA	; 234
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <io_usart_isr_print>
										sprintf(s," %04x: ",i);
     8b8:	ff 92       	push	r15
     8ba:	ef 92       	push	r14
     8bc:	5f 92       	push	r5
     8be:	4f 92       	push	r4
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
     8c4:	0e 94 14 07 	call	0xe28	; 0xe28 <sprintf>
										io_usart_isr_print(s);
     8c8:	8b e6       	ldi	r24, 0x6B	; 107
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <io_usart_isr_print>
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
									}
									data = eeprom_read(i);
     8dc:	c7 01       	movw	r24, r14
     8de:	0e 94 43 06 	call	0xc86	; 0xc86 <eeprom_read>
     8e2:	80 93 3e 01 	sts	0x013E, r24
     8e6:	10 92 3f 01 	sts	0x013F, r1
									sprintf(s," %02x ",data);
     8ea:	1f 92       	push	r1
     8ec:	8f 93       	push	r24
     8ee:	7f 92       	push	r7
     8f0:	6f 92       	push	r6
     8f2:	df 93       	push	r29
     8f4:	cf 93       	push	r28
     8f6:	0e 94 14 07 	call	0xe28	; 0xe28 <sprintf>
									io_usart_isr_print(s);
     8fa:	8b e6       	ldi	r24, 0x6B	; 107
     8fc:	92 e0       	ldi	r25, 0x02	; 2
     8fe:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <io_usart_isr_print>
								io_usart_isr_print(s);
							}
							else if ( strcmp_P(word,PSTR("RDALL"))     == 0 ) 	
							{
								int i;
								for (i=0; i<1024; i++)
     902:	9f ef       	ldi	r25, 0xFF	; 255
     904:	e9 1a       	sub	r14, r25
     906:	f9 0a       	sbc	r15, r25
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	e1 14       	cp	r14, r1
     916:	84 e0       	ldi	r24, 0x04	; 4
     918:	f8 06       	cpc	r15, r24
     91a:	29 f6       	brne	.-118    	; 0x8a6 <__stack+0x47>
     91c:	90 ce       	rjmp	.-736    	; 0x63e <main+0x5a>
									sprintf(s," %02x ",data);
									io_usart_isr_print(s);
									
								}
							}
							else if ( strcmp_P(word,PSTR("WRVECT"))     == 0 ) 	
     91e:	60 e7       	ldi	r22, 0x70	; 112
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	c7 01       	movw	r24, r14
     924:	0e 94 db 06 	call	0xdb6	; 0xdb6 <strcmp_P>
     928:	89 2b       	or	r24, r25
     92a:	09 f0       	breq	.+2      	; 0x92e <__stack+0xcf>
     92c:	70 c0       	rjmp	.+224    	; 0xa0e <__stack+0x1af>
							{
								word = strtok_r (NULL, delim, &brk);
     92e:	60 91 60 00 	lds	r22, 0x0060
     932:	70 91 61 00 	lds	r23, 0x0061
     936:	4b ee       	ldi	r20, 0xEB	; 235
     938:	52 e0       	ldi	r21, 0x02	; 2
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 ed 06 	call	0xdda	; 0xdda <strtok_r>
     942:	90 93 f0 02 	sts	0x02F0, r25
     946:	80 93 ef 02 	sts	0x02EF, r24
								if ( word != NULL )
     94a:	00 97       	sbiw	r24, 0x00	; 0
     94c:	71 f0       	breq	.+28     	; 0x96a <__stack+0x10b>
									sscanf(word,"%x", &address);
     94e:	df 92       	push	r13
     950:	cf 92       	push	r12
     952:	1f 93       	push	r17
     954:	0f 93       	push	r16
     956:	9f 93       	push	r25
     958:	8f 93       	push	r24
     95a:	0e 94 36 07 	call	0xe6c	; 0xe6c <sscanf>
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
								vi=0;
     96a:	10 92 46 02 	sts	0x0246, r1
								do
								{
									word = strtok_r (NULL, delim, &brk);
     96e:	60 91 60 00 	lds	r22, 0x0060
     972:	70 91 61 00 	lds	r23, 0x0061
     976:	4b ee       	ldi	r20, 0xEB	; 235
     978:	52 e0       	ldi	r21, 0x02	; 2
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 ed 06 	call	0xdda	; 0xdda <strtok_r>
     982:	80 93 ef 02 	sts	0x02EF, r24
     986:	90 93 f0 02 	sts	0x02F0, r25
									
									if ( word != NULL );
									{
										if ( sscanf(word,"%x", &data) == 1)
     98a:	bf 92       	push	r11
     98c:	af 92       	push	r10
     98e:	1f 93       	push	r17
     990:	0f 93       	push	r16
     992:	9f 93       	push	r25
     994:	8f 93       	push	r24
     996:	0e 94 36 07 	call	0xe6c	; 0xe6c <sscanf>
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	61 f4       	brne	.+24     	; 0x9c2 <__stack+0x163>
										{
											vdata[(int)vi]=data;
     9aa:	80 91 46 02 	lds	r24, 0x0246
     9ae:	e8 2f       	mov	r30, r24
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	e9 5b       	subi	r30, 0xB9	; 185
     9b4:	fd 4f       	sbci	r31, 0xFD	; 253
     9b6:	90 91 3e 01 	lds	r25, 0x013E
     9ba:	90 83       	st	Z, r25
											vi++;
     9bc:	8f 5f       	subi	r24, 0xFF	; 255
     9be:	80 93 46 02 	sts	0x0246, r24
										}
									}
								}
								while ( word != NULL );
     9c2:	80 91 ef 02 	lds	r24, 0x02EF
     9c6:	90 91 f0 02 	lds	r25, 0x02F0
     9ca:	89 2b       	or	r24, r25
     9cc:	81 f6       	brne	.-96     	; 0x96e <__stack+0x10f>

								eeprom_write_vector(address, vdata, vi);
     9ce:	40 91 46 02 	lds	r20, 0x0246
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	67 e4       	ldi	r22, 0x47	; 71
     9d6:	72 e0       	ldi	r23, 0x02	; 2
     9d8:	80 91 40 01 	lds	r24, 0x0140
     9dc:	90 91 41 01 	lds	r25, 0x0141
     9e0:	0e 94 d4 05 	call	0xba8	; 0xba8 <eeprom_write_vector>
								sprintf(s,"WRTEST %d bytes \n\r", (int) vi);
     9e4:	80 91 46 02 	lds	r24, 0x0246
     9e8:	1f 92       	push	r1
     9ea:	8f 93       	push	r24
     9ec:	3f 92       	push	r3
     9ee:	2f 92       	push	r2
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	0e 94 14 07 	call	0xe28	; 0xe28 <sprintf>
								io_usart_isr_print(s);
     9f8:	8b e6       	ldi	r24, 0x6B	; 107
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <io_usart_isr_print>
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	18 ce       	rjmp	.-976    	; 0x63e <main+0x5a>
							}
							else
							{
								//asm("CLI");
								//Test
								io_usart_isr_print("a0123456789b0123456789c0123456789d0123456789e0123456789f0123456789");
     a0e:	8d ee       	ldi	r24, 0xED	; 237
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <io_usart_isr_print>
     a16:	13 ce       	rjmp	.-986    	; 0x63e <main+0x5a>

00000a18 <spi_init>:
/**
 * Init of software SPI bus.
 */
void spi_init()
{
	SPI_DDR.si  =1;
     a18:	d0 9a       	sbi	0x1a, 0	; 26
	SPI_DDR.clk =1;
     a1a:	d1 9a       	sbi	0x1a, 1	; 26
	SPI_DDR.cs_n=1;
     a1c:	d6 9a       	sbi	0x1a, 6	; 26
	SPI_DDR.so  =0;
     a1e:	d7 98       	cbi	0x1a, 7	; 26


	

	SPI_PORT.si   =0;
     a20:	d8 98       	cbi	0x1b, 0	; 27
	SPI_PORT.clk  =0;
     a22:	d9 98       	cbi	0x1b, 1	; 27
	SPI_PORT.cs_n =1;
     a24:	de 9a       	sbi	0x1b, 6	; 27
     a26:	08 95       	ret

00000a28 <spi_cs_n>:
/**
 * Set chip select signal.
 */
void spi_cs_n(int value)
{
	SPI_PORT.cs_n = value;
     a28:	80 fd       	sbrc	r24, 0
     a2a:	de 9a       	sbi	0x1b, 6	; 27
     a2c:	80 ff       	sbrs	r24, 0
     a2e:	de 98       	cbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	8a 95       	dec	r24
     a34:	f1 f7       	brne	.-4      	; 0xa32 <spi_cs_n+0xa>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <spi_cs_n+0x10>
     a38:	08 95       	ret

00000a3a <spi_clock_pulse>:
/**
 * Clock pulse generation.
 */
void spi_clock_pulse()
{
	SPI_PORT.clk = 0;
     a3a:	d9 98       	cbi	0x1b, 1	; 27
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	8a 95       	dec	r24
     a40:	f1 f7       	brne	.-4      	; 0xa3e <spi_clock_pulse+0x4>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <spi_clock_pulse+0xa>
	_delay_us(1);
	SPI_PORT.clk = 1;
     a44:	d9 9a       	sbi	0x1b, 1	; 27
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	8a 95       	dec	r24
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <spi_clock_pulse+0xe>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <spi_clock_pulse+0x14>
     a4e:	08 95       	ret

00000a50 <spi_clock_1>:
/**
 * Clock set to 1
 */
void spi_clock_1(void)
{
	SPI_PORT.clk = 1;
     a50:	d9 9a       	sbi	0x1b, 1	; 27
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	8a 95       	dec	r24
     a56:	f1 f7       	brne	.-4      	; 0xa54 <spi_clock_1+0x4>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <spi_clock_1+0xa>
     a5a:	08 95       	ret

00000a5c <spi_clock_0>:
/**
 * Clock set to 0
 */
void spi_clock_0(void)
{
	SPI_PORT.clk = 0;
     a5c:	d9 98       	cbi	0x1b, 1	; 27
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	8a 95       	dec	r24
     a62:	f1 f7       	brne	.-4      	; 0xa60 <spi_clock_0+0x4>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <spi_clock_0+0xa>
     a66:	08 95       	ret

00000a68 <eeprom_write_enable>:

/**
 * Write command
 */
void eeprom_write_enable()
{
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
     a6e:	d0 9a       	sbi	0x1a, 0	; 26
	unsigned char command=0b00000110;
	int i;

	spi_cs_n(0);
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 14 05 	call	0xa28	; 0xa28 <spi_cs_n>
     a78:	c8 e0       	ldi	r28, 0x08	; 8
     a7a:	d0 e0       	ldi	r29, 0x00	; 0
 * Write command
 */
void eeprom_write_enable()
{
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
	unsigned char command=0b00000110;
     a7c:	16 e0       	ldi	r17, 0x06	; 6

	spi_cs_n(0);

	for ( i=0; i<8; i++)
	{
		SPI_PORT.si = ((command & 0x80) != 0);
     a7e:	81 2f       	mov	r24, r17
     a80:	88 1f       	adc	r24, r24
     a82:	88 27       	eor	r24, r24
     a84:	88 1f       	adc	r24, r24
     a86:	80 fd       	sbrc	r24, 0
     a88:	d8 9a       	sbi	0x1b, 0	; 27
     a8a:	80 ff       	sbrs	r24, 0
     a8c:	d8 98       	cbi	0x1b, 0	; 27
		command = command << 1;
     a8e:	11 0f       	add	r17, r17
		spi_clock_pulse();
     a90:	0e 94 1d 05 	call	0xa3a	; 0xa3a <spi_clock_pulse>
     a94:	21 97       	sbiw	r28, 0x01	; 1
	unsigned char command=0b00000110;
	int i;

	spi_cs_n(0);

	for ( i=0; i<8; i++)
     a96:	99 f7       	brne	.-26     	; 0xa7e <eeprom_write_enable+0x16>
		SPI_PORT.si = ((command & 0x80) != 0);
		command = command << 1;
		spi_clock_pulse();
	}

	spi_cs_n(1);
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
}
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
		SPI_PORT.si = ((command & 0x80) != 0);
		command = command << 1;
		spi_clock_pulse();
	}

	spi_cs_n(1);
     aa2:	0c 94 14 05 	jmp	0xa28	; 0xa28 <spi_cs_n>

00000aa6 <eeprom_write_start>:

/**
 *   Start of write phase, , USED INTERNAL/PRIVATE
 */
void static eeprom_write_start(unsigned int address)
{
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	ec 01       	movw	r28, r24
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
     ab2:	d0 9a       	sbi	0x1a, 0	; 26
	unsigned char command=0b00000010;
	int i;

	eeprom_write_enable();
     ab4:	0e 94 34 05 	call	0xa68	; 0xa68 <eeprom_write_enable>

	spi_cs_n(0);
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 14 05 	call	0xa28	; 0xa28 <spi_cs_n>
     ac0:	08 e0       	ldi	r16, 0x08	; 8
     ac2:	10 e0       	ldi	r17, 0x00	; 0
 *   Start of write phase, , USED INTERNAL/PRIVATE
 */
void static eeprom_write_start(unsigned int address)
{
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
	unsigned char command=0b00000010;
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	f9 2e       	mov	r15, r25

	spi_cs_n(0);

	for ( i=0; i<8; i++)
	{
		SPI_PORT.si = ((command & 0x80) != 0);
     ac8:	8f 2d       	mov	r24, r15
     aca:	88 1f       	adc	r24, r24
     acc:	88 27       	eor	r24, r24
     ace:	88 1f       	adc	r24, r24
     ad0:	80 fd       	sbrc	r24, 0
     ad2:	d8 9a       	sbi	0x1b, 0	; 27
     ad4:	80 ff       	sbrs	r24, 0
     ad6:	d8 98       	cbi	0x1b, 0	; 27
		command = command << 1;
     ad8:	ff 0c       	add	r15, r15
		spi_clock_pulse();
     ada:	0e 94 1d 05 	call	0xa3a	; 0xa3a <spi_clock_pulse>
     ade:	01 50       	subi	r16, 0x01	; 1
     ae0:	11 09       	sbc	r17, r1

	eeprom_write_enable();

	spi_cs_n(0);

	for ( i=0; i<8; i++)
     ae2:	91 f7       	brne	.-28     	; 0xac8 <eeprom_write_start+0x22>
     ae4:	00 e1       	ldi	r16, 0x10	; 16
     ae6:	10 e0       	ldi	r17, 0x00	; 0
		spi_clock_pulse();
	}

	for ( i=0; i<16; i++)
	{
		SPI_PORT.si = ((address & 0x8000) != 0);
     ae8:	8d 2f       	mov	r24, r29
     aea:	88 1f       	adc	r24, r24
     aec:	88 27       	eor	r24, r24
     aee:	88 1f       	adc	r24, r24
     af0:	80 fd       	sbrc	r24, 0
     af2:	d8 9a       	sbi	0x1b, 0	; 27
     af4:	80 ff       	sbrs	r24, 0
     af6:	d8 98       	cbi	0x1b, 0	; 27
		address = address << 1;
     af8:	cc 0f       	add	r28, r28
     afa:	dd 1f       	adc	r29, r29
		spi_clock_pulse();
     afc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <spi_clock_pulse>
     b00:	01 50       	subi	r16, 0x01	; 1
     b02:	11 09       	sbc	r17, r1
		SPI_PORT.si = ((command & 0x80) != 0);
		command = command << 1;
		spi_clock_pulse();
	}

	for ( i=0; i<16; i++)
     b04:	89 f7       	brne	.-30     	; 0xae8 <eeprom_write_start+0x42>
	{
		SPI_PORT.si = ((address & 0x8000) != 0);
		address = address << 1;
		spi_clock_pulse();
	}
}
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	ff 90       	pop	r15
     b10:	08 95       	ret

00000b12 <eeprom_write>:

/**
 * Write command
 */
void eeprom_write(unsigned int address, unsigned char data)
{
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	ec 01       	movw	r28, r24
     b20:	f6 2e       	mov	r15, r22
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
     b22:	d0 9a       	sbi	0x1a, 0	; 26
	unsigned char command=0b00000010;
	int i;

	eeprom_write_enable();
     b24:	0e 94 34 05 	call	0xa68	; 0xa68 <eeprom_write_enable>

	spi_cs_n(0);
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 14 05 	call	0xa28	; 0xa28 <spi_cs_n>
     b30:	08 e0       	ldi	r16, 0x08	; 8
     b32:	10 e0       	ldi	r17, 0x00	; 0
 * Write command
 */
void eeprom_write(unsigned int address, unsigned char data)
{
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
	unsigned char command=0b00000010;
     b34:	32 e0       	ldi	r19, 0x02	; 2
     b36:	e3 2e       	mov	r14, r19

	spi_cs_n(0);

	for ( i=0; i<8; i++)
	{
		SPI_PORT.si = ((command & 0x80) != 0);
     b38:	8e 2d       	mov	r24, r14
     b3a:	88 1f       	adc	r24, r24
     b3c:	88 27       	eor	r24, r24
     b3e:	88 1f       	adc	r24, r24
     b40:	80 fd       	sbrc	r24, 0
     b42:	d8 9a       	sbi	0x1b, 0	; 27
     b44:	80 ff       	sbrs	r24, 0
     b46:	d8 98       	cbi	0x1b, 0	; 27
		command = command << 1;
     b48:	ee 0c       	add	r14, r14
		spi_clock_pulse();
     b4a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <spi_clock_pulse>
     b4e:	01 50       	subi	r16, 0x01	; 1
     b50:	11 09       	sbc	r17, r1

	eeprom_write_enable();

	spi_cs_n(0);

	for ( i=0; i<8; i++)
     b52:	91 f7       	brne	.-28     	; 0xb38 <eeprom_write+0x26>
     b54:	00 e1       	ldi	r16, 0x10	; 16
     b56:	10 e0       	ldi	r17, 0x00	; 0
		spi_clock_pulse();
	}

	for ( i=0; i<16; i++)
	{
		SPI_PORT.si = ((address & 0x8000) != 0);
     b58:	8d 2f       	mov	r24, r29
     b5a:	88 1f       	adc	r24, r24
     b5c:	88 27       	eor	r24, r24
     b5e:	88 1f       	adc	r24, r24
     b60:	80 fd       	sbrc	r24, 0
     b62:	d8 9a       	sbi	0x1b, 0	; 27
     b64:	80 ff       	sbrs	r24, 0
     b66:	d8 98       	cbi	0x1b, 0	; 27
		address = address << 1;
     b68:	cc 0f       	add	r28, r28
     b6a:	dd 1f       	adc	r29, r29
		spi_clock_pulse();
     b6c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <spi_clock_pulse>
     b70:	01 50       	subi	r16, 0x01	; 1
     b72:	11 09       	sbc	r17, r1
		SPI_PORT.si = ((command & 0x80) != 0);
		command = command << 1;
		spi_clock_pulse();
	}

	for ( i=0; i<16; i++)
     b74:	89 f7       	brne	.-30     	; 0xb58 <eeprom_write+0x46>
     b76:	c8 e0       	ldi	r28, 0x08	; 8
     b78:	d0 e0       	ldi	r29, 0x00	; 0
		spi_clock_pulse();
	}

	for ( i=0; i<8; i++)
	{
		SPI_PORT.si = ((data & 0x80) != 0);
     b7a:	8f 2d       	mov	r24, r15
     b7c:	88 1f       	adc	r24, r24
     b7e:	88 27       	eor	r24, r24
     b80:	88 1f       	adc	r24, r24
     b82:	80 fd       	sbrc	r24, 0
     b84:	d8 9a       	sbi	0x1b, 0	; 27
     b86:	80 ff       	sbrs	r24, 0
     b88:	d8 98       	cbi	0x1b, 0	; 27
		data = data << 1;
     b8a:	ff 0c       	add	r15, r15
		spi_clock_pulse();
     b8c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <spi_clock_pulse>
     b90:	21 97       	sbiw	r28, 0x01	; 1
		SPI_PORT.si = ((address & 0x8000) != 0);
		address = address << 1;
		spi_clock_pulse();
	}

	for ( i=0; i<8; i++)
     b92:	99 f7       	brne	.-26     	; 0xb7a <eeprom_write+0x68>
		SPI_PORT.si = ((data & 0x80) != 0);
		data = data << 1;
		spi_clock_pulse();
	}

	spi_cs_n(1);
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
		SPI_PORT.si = ((data & 0x80) != 0);
		data = data << 1;
		spi_clock_pulse();
	}

	spi_cs_n(1);
     ba4:	0c 94 14 05 	jmp	0xa28	; 0xa28 <spi_cs_n>

00000ba8 <eeprom_write_vector>:

/**
 * Write vector
 */
void eeprom_write_vector(unsigned int address, unsigned char *data, int n)
{
     ba8:	4f 92       	push	r4
     baa:	5f 92       	push	r5
     bac:	7f 92       	push	r7
     bae:	8f 92       	push	r8
     bb0:	9f 92       	push	r9
     bb2:	af 92       	push	r10
     bb4:	bf 92       	push	r11
     bb6:	cf 92       	push	r12
     bb8:	df 92       	push	r13
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <eeprom_write_vector+0x20>
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	8c 01       	movw	r16, r24
     bce:	5a 01       	movw	r10, r20
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
     bd0:	d0 9a       	sbi	0x1a, 0	; 26
	int j;

	eeprom_write_enable();
     bd2:	69 83       	std	Y+1, r22	; 0x01
     bd4:	7a 83       	std	Y+2, r23	; 0x02
     bd6:	0e 94 34 05 	call	0xa68	; 0xa68 <eeprom_write_enable>

	eeprom_write_start(address);
     bda:	c8 01       	movw	r24, r16
     bdc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <eeprom_write_start>
     be0:	0f 5f       	subi	r16, 0xFF	; 255
     be2:	1f 4f       	sbci	r17, 0xFF	; 255
     be4:	69 81       	ldd	r22, Y+1	; 0x01
     be6:	46 2e       	mov	r4, r22
     be8:	7a 81       	ldd	r23, Y+2	; 0x02
     bea:	57 2e       	mov	r5, r23

	for ( j=0; j<n; j++)
     bec:	72 01       	movw	r14, r4
     bee:	2c c0       	rjmp	.+88     	; 0xc48 <eeprom_write_vector+0xa0>
	{
		eeprom_write_byte(*data);
     bf0:	f7 01       	movw	r30, r14
     bf2:	71 90       	ld	r7, Z+
     bf4:	7f 01       	movw	r14, r30
/**
 * Write one byte, USED INTERNAL/PRIVATE
 */
void static eeprom_write_byte(unsigned char data)
{
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
     bf6:	d0 9a       	sbi	0x1a, 0	; 26
     bf8:	48 e0       	ldi	r20, 0x08	; 8
     bfa:	c4 2e       	mov	r12, r20
     bfc:	d1 2c       	mov	r13, r1
	int i;

	for ( i=0; i<8; i++)
	{
		SPI_PORT.si = ((data & 0x80) != 0);
     bfe:	87 2d       	mov	r24, r7
     c00:	88 1f       	adc	r24, r24
     c02:	88 27       	eor	r24, r24
     c04:	88 1f       	adc	r24, r24
     c06:	80 fd       	sbrc	r24, 0
     c08:	d8 9a       	sbi	0x1b, 0	; 27
     c0a:	80 ff       	sbrs	r24, 0
     c0c:	d8 98       	cbi	0x1b, 0	; 27
		data = data << 1;
     c0e:	77 0c       	add	r7, r7
		spi_clock_pulse();
     c10:	0e 94 1d 05 	call	0xa3a	; 0xa3a <spi_clock_pulse>
     c14:	f1 e0       	ldi	r31, 0x01	; 1
     c16:	cf 1a       	sub	r12, r31
     c18:	d1 08       	sbc	r13, r1
void static eeprom_write_byte(unsigned char data)
{
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
	int i;

	for ( i=0; i<8; i++)
     c1a:	89 f7       	brne	.-30     	; 0xbfe <eeprom_write_vector+0x56>

	for ( j=0; j<n; j++)
	{
		eeprom_write_byte(*data);

		if ( (address & 0xF) == 0xF )
     c1c:	8f e0       	ldi	r24, 0x0F	; 15
     c1e:	88 22       	and	r8, r24
     c20:	99 24       	eor	r9, r9
     c22:	9f e0       	ldi	r25, 0x0F	; 15
     c24:	89 16       	cp	r8, r25
     c26:	91 04       	cpc	r9, r1
     c28:	69 f4       	brne	.+26     	; 0xc44 <eeprom_write_vector+0x9c>
		{
			spi_cs_n(1);
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 14 05 	call	0xa28	; 0xa28 <spi_cs_n>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c32:	ef e0       	ldi	r30, 0x0F	; 15
     c34:	f7 e2       	ldi	r31, 0x27	; 39
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <eeprom_write_vector+0x8e>
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <eeprom_write_vector+0x94>
     c3c:	00 00       	nop
			address = address+1;
			_delay_ms(5);
			eeprom_write_start(address);
     c3e:	c8 01       	movw	r24, r16
     c40:	0e 94 53 05 	call	0xaa6	; 0xaa6 <eeprom_write_start>
     c44:	0f 5f       	subi	r16, 0xFF	; 255
     c46:	1f 4f       	sbci	r17, 0xFF	; 255
     c48:	48 01       	movw	r8, r16
     c4a:	f1 e0       	ldi	r31, 0x01	; 1
     c4c:	8f 1a       	sub	r8, r31
     c4e:	91 08       	sbc	r9, r1


/**
 * Write vector
 */
void eeprom_write_vector(unsigned int address, unsigned char *data, int n)
     c50:	c7 01       	movw	r24, r14
     c52:	84 19       	sub	r24, r4
     c54:	95 09       	sbc	r25, r5

	eeprom_write_enable();

	eeprom_write_start(address);

	for ( j=0; j<n; j++)
     c56:	8a 15       	cp	r24, r10
     c58:	9b 05       	cpc	r25, r11
     c5a:	54 f2       	brlt	.-108    	; 0xbf0 <eeprom_write_vector+0x48>
			address = address+1;
		}
		data = data +1;
	}

	spi_cs_n(1);
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
}
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	bf 90       	pop	r11
     c76:	af 90       	pop	r10
     c78:	9f 90       	pop	r9
     c7a:	8f 90       	pop	r8
     c7c:	7f 90       	pop	r7
     c7e:	5f 90       	pop	r5
     c80:	4f 90       	pop	r4
			address = address+1;
		}
		data = data +1;
	}

	spi_cs_n(1);
     c82:	0c 94 14 05 	jmp	0xa28	; 0xa28 <spi_cs_n>

00000c86 <eeprom_read>:

/**
 * Read command
 */
unsigned char eeprom_read(unsigned int address)
{
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	ec 01       	movw	r28, r24
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
     c92:	d0 9a       	sbi	0x1a, 0	; 26
	unsigned char command=0b00000011;
	unsigned char data=0;
	int i;

	spi_cs_n(0);
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 14 05 	call	0xa28	; 0xa28 <spi_cs_n>
     c9c:	08 e0       	ldi	r16, 0x08	; 8
     c9e:	10 e0       	ldi	r17, 0x00	; 0
 * Read command
 */
unsigned char eeprom_read(unsigned int address)
{
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
	unsigned char command=0b00000011;
     ca0:	63 e0       	ldi	r22, 0x03	; 3
     ca2:	f6 2e       	mov	r15, r22

	spi_cs_n(0);

	for ( i=0; i<8; i++)
	{
		SPI_PORT.si = ((command & 0x80) != 0);
     ca4:	8f 2d       	mov	r24, r15
     ca6:	88 1f       	adc	r24, r24
     ca8:	88 27       	eor	r24, r24
     caa:	88 1f       	adc	r24, r24
     cac:	80 fd       	sbrc	r24, 0
     cae:	d8 9a       	sbi	0x1b, 0	; 27
     cb0:	80 ff       	sbrs	r24, 0
     cb2:	d8 98       	cbi	0x1b, 0	; 27
		command = command << 1;
     cb4:	ff 0c       	add	r15, r15
		spi_clock_pulse();
     cb6:	0e 94 1d 05 	call	0xa3a	; 0xa3a <spi_clock_pulse>
     cba:	01 50       	subi	r16, 0x01	; 1
     cbc:	11 09       	sbc	r17, r1
	unsigned char data=0;
	int i;

	spi_cs_n(0);

	for ( i=0; i<8; i++)
     cbe:	91 f7       	brne	.-28     	; 0xca4 <eeprom_read+0x1e>
     cc0:	00 e1       	ldi	r16, 0x10	; 16
     cc2:	10 e0       	ldi	r17, 0x00	; 0
		spi_clock_pulse();
	}

	for ( i=0; i<16; i++)
	{
		SPI_PORT.si = ((address & 0x8000) != 0);
     cc4:	8d 2f       	mov	r24, r29
     cc6:	88 1f       	adc	r24, r24
     cc8:	88 27       	eor	r24, r24
     cca:	88 1f       	adc	r24, r24
     ccc:	80 fd       	sbrc	r24, 0
     cce:	d8 9a       	sbi	0x1b, 0	; 27
     cd0:	80 ff       	sbrs	r24, 0
     cd2:	d8 98       	cbi	0x1b, 0	; 27
		address = address << 1;
     cd4:	cc 0f       	add	r28, r28
     cd6:	dd 1f       	adc	r29, r29
		spi_clock_pulse();
     cd8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <spi_clock_pulse>
     cdc:	01 50       	subi	r16, 0x01	; 1
     cde:	11 09       	sbc	r17, r1
		SPI_PORT.si = ((command & 0x80) != 0);
		command = command << 1;
		spi_clock_pulse();
	}

	for ( i=0; i<16; i++)
     ce0:	89 f7       	brne	.-30     	; 0xcc4 <eeprom_read+0x3e>
     ce2:	c8 e0       	ldi	r28, 0x08	; 8
     ce4:	d0 e0       	ldi	r29, 0x00	; 0
     ce6:	10 e0       	ldi	r17, 0x00	; 0
		spi_clock_pulse();
	}

	for ( i=0; i<8; i++)
	{
		spi_clock_0();
     ce8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <spi_clock_0>
		data = data << 1;
     cec:	11 0f       	add	r17, r17
		if ( SPI_PIN.so )
     cee:	cf 99       	sbic	0x19, 7	; 25
			data = data | 0b000000001;
     cf0:	11 60       	ori	r17, 0x01	; 1
		spi_clock_1();;
     cf2:	0e 94 28 05 	call	0xa50	; 0xa50 <spi_clock_1>
     cf6:	21 97       	sbiw	r28, 0x01	; 1
		SPI_PORT.si = ((address & 0x8000) != 0);
		address = address << 1;
		spi_clock_pulse();
	}

	for ( i=0; i<8; i++)
     cf8:	b9 f7       	brne	.-18     	; 0xce8 <eeprom_read+0x62>
		if ( SPI_PIN.so )
			data = data | 0b000000001;
		spi_clock_1();;
	}

	spi_cs_n(1);
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 14 05 	call	0xa28	; 0xa28 <spi_cs_n>

	return data;
}
     d02:	81 2f       	mov	r24, r17
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	08 95       	ret

00000d10 <eeprom_read_sr>:

/**
 * Read status register
 */
unsigned char eeprom_read_sr()
{
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
     d16:	d0 9a       	sbi	0x1a, 0	; 26
	unsigned char command=0b00000101;
	unsigned char data=0;
	int i;

	spi_cs_n(0);
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 14 05 	call	0xa28	; 0xa28 <spi_cs_n>
     d20:	c8 e0       	ldi	r28, 0x08	; 8
     d22:	d0 e0       	ldi	r29, 0x00	; 0
 * Read status register
 */
unsigned char eeprom_read_sr()
{
	SPI_DDR.si  =1; //Shared pin with wire3-buss. Wire3 operations can set this to zero
	unsigned char command=0b00000101;
     d24:	15 e0       	ldi	r17, 0x05	; 5

	spi_cs_n(0);

	for ( i=0; i<8; i++)
	{
		SPI_PORT.si = ((command & 0x80) != 0);
     d26:	81 2f       	mov	r24, r17
     d28:	88 1f       	adc	r24, r24
     d2a:	88 27       	eor	r24, r24
     d2c:	88 1f       	adc	r24, r24
     d2e:	80 fd       	sbrc	r24, 0
     d30:	d8 9a       	sbi	0x1b, 0	; 27
     d32:	80 ff       	sbrs	r24, 0
     d34:	d8 98       	cbi	0x1b, 0	; 27
		command = command << 1;
     d36:	11 0f       	add	r17, r17
		spi_clock_pulse();
     d38:	0e 94 1d 05 	call	0xa3a	; 0xa3a <spi_clock_pulse>
     d3c:	21 97       	sbiw	r28, 0x01	; 1
	unsigned char data=0;
	int i;

	spi_cs_n(0);

	for ( i=0; i<8; i++)
     d3e:	99 f7       	brne	.-26     	; 0xd26 <eeprom_read_sr+0x16>
     d40:	c8 e0       	ldi	r28, 0x08	; 8
     d42:	d0 e0       	ldi	r29, 0x00	; 0
     d44:	10 e0       	ldi	r17, 0x00	; 0
		spi_clock_pulse();
	}

	for ( i=0; i<8; i++)
	{
		spi_clock_0();
     d46:	0e 94 2e 05 	call	0xa5c	; 0xa5c <spi_clock_0>
		data = data << 1;
     d4a:	11 0f       	add	r17, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	8a 95       	dec	r24
     d50:	f1 f7       	brne	.-4      	; 0xd4e <eeprom_read_sr+0x3e>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <eeprom_read_sr+0x44>
		_delay_us(1);
		if ( SPI_PIN.so )
     d54:	cf 99       	sbic	0x19, 7	; 25
			data = data | 0b000000001;
     d56:	11 60       	ori	r17, 0x01	; 1
		spi_clock_1();;
     d58:	0e 94 28 05 	call	0xa50	; 0xa50 <spi_clock_1>
     d5c:	21 97       	sbiw	r28, 0x01	; 1
		SPI_PORT.si = ((command & 0x80) != 0);
		command = command << 1;
		spi_clock_pulse();
	}

	for ( i=0; i<8; i++)
     d5e:	99 f7       	brne	.-26     	; 0xd46 <eeprom_read_sr+0x36>
		if ( SPI_PIN.so )
			data = data | 0b000000001;
		spi_clock_1();;
	}

	spi_cs_n(1);
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 14 05 	call	0xa28	; 0xa28 <spi_cs_n>

	return data;
}
     d68:	81 2f       	mov	r24, r17
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	08 95       	ret

00000d72 <__udivmodsi4>:
     d72:	a1 e2       	ldi	r26, 0x21	; 33
     d74:	1a 2e       	mov	r1, r26
     d76:	aa 1b       	sub	r26, r26
     d78:	bb 1b       	sub	r27, r27
     d7a:	fd 01       	movw	r30, r26
     d7c:	0d c0       	rjmp	.+26     	; 0xd98 <__udivmodsi4_ep>

00000d7e <__udivmodsi4_loop>:
     d7e:	aa 1f       	adc	r26, r26
     d80:	bb 1f       	adc	r27, r27
     d82:	ee 1f       	adc	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	a2 17       	cp	r26, r18
     d88:	b3 07       	cpc	r27, r19
     d8a:	e4 07       	cpc	r30, r20
     d8c:	f5 07       	cpc	r31, r21
     d8e:	20 f0       	brcs	.+8      	; 0xd98 <__udivmodsi4_ep>
     d90:	a2 1b       	sub	r26, r18
     d92:	b3 0b       	sbc	r27, r19
     d94:	e4 0b       	sbc	r30, r20
     d96:	f5 0b       	sbc	r31, r21

00000d98 <__udivmodsi4_ep>:
     d98:	66 1f       	adc	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	1a 94       	dec	r1
     da2:	69 f7       	brne	.-38     	; 0xd7e <__udivmodsi4_loop>
     da4:	60 95       	com	r22
     da6:	70 95       	com	r23
     da8:	80 95       	com	r24
     daa:	90 95       	com	r25
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	bd 01       	movw	r22, r26
     db2:	cf 01       	movw	r24, r30
     db4:	08 95       	ret

00000db6 <strcmp_P>:
     db6:	fb 01       	movw	r30, r22
     db8:	dc 01       	movw	r26, r24
     dba:	8d 91       	ld	r24, X+
     dbc:	05 90       	lpm	r0, Z+
     dbe:	80 19       	sub	r24, r0
     dc0:	01 10       	cpse	r0, r1
     dc2:	d9 f3       	breq	.-10     	; 0xdba <strcmp_P+0x4>
     dc4:	99 0b       	sbc	r25, r25
     dc6:	08 95       	ret

00000dc8 <strcmp>:
     dc8:	fb 01       	movw	r30, r22
     dca:	dc 01       	movw	r26, r24
     dcc:	8d 91       	ld	r24, X+
     dce:	01 90       	ld	r0, Z+
     dd0:	80 19       	sub	r24, r0
     dd2:	01 10       	cpse	r0, r1
     dd4:	d9 f3       	breq	.-10     	; 0xdcc <strcmp+0x4>
     dd6:	99 0b       	sbc	r25, r25
     dd8:	08 95       	ret

00000dda <strtok_r>:
     dda:	fa 01       	movw	r30, r20
     ddc:	a1 91       	ld	r26, Z+
     dde:	b0 81       	ld	r27, Z
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	19 f4       	brne	.+6      	; 0xdea <strtok_r+0x10>
     de4:	10 97       	sbiw	r26, 0x00	; 0
     de6:	e1 f0       	breq	.+56     	; 0xe20 <strtok_r+0x46>
     de8:	cd 01       	movw	r24, r26
     dea:	dc 01       	movw	r26, r24
     dec:	cd 01       	movw	r24, r26
     dee:	0d 90       	ld	r0, X+
     df0:	00 20       	and	r0, r0
     df2:	11 f4       	brne	.+4      	; 0xdf8 <strtok_r+0x1e>
     df4:	c0 01       	movw	r24, r0
     df6:	13 c0       	rjmp	.+38     	; 0xe1e <strtok_r+0x44>
     df8:	fb 01       	movw	r30, r22
     dfa:	21 91       	ld	r18, Z+
     dfc:	22 23       	and	r18, r18
     dfe:	19 f0       	breq	.+6      	; 0xe06 <strtok_r+0x2c>
     e00:	20 15       	cp	r18, r0
     e02:	d9 f7       	brne	.-10     	; 0xdfa <strtok_r+0x20>
     e04:	f3 cf       	rjmp	.-26     	; 0xdec <strtok_r+0x12>
     e06:	fb 01       	movw	r30, r22
     e08:	21 91       	ld	r18, Z+
     e0a:	20 15       	cp	r18, r0
     e0c:	19 f4       	brne	.+6      	; 0xe14 <strtok_r+0x3a>
     e0e:	1e 92       	st	-X, r1
     e10:	11 96       	adiw	r26, 0x01	; 1
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <strtok_r+0x46>
     e14:	22 23       	and	r18, r18
     e16:	c1 f7       	brne	.-16     	; 0xe08 <strtok_r+0x2e>
     e18:	0d 90       	ld	r0, X+
     e1a:	00 20       	and	r0, r0
     e1c:	a1 f7       	brne	.-24     	; 0xe06 <strtok_r+0x2c>
     e1e:	d0 01       	movw	r26, r0
     e20:	fa 01       	movw	r30, r20
     e22:	a1 93       	st	Z+, r26
     e24:	b0 83       	st	Z, r27
     e26:	08 95       	ret

00000e28 <sprintf>:
     e28:	ae e0       	ldi	r26, 0x0E	; 14
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	ea e1       	ldi	r30, 0x1A	; 26
     e2e:	f7 e0       	ldi	r31, 0x07	; 7
     e30:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__prologue_saves__+0x1c>
     e34:	0d 89       	ldd	r16, Y+21	; 0x15
     e36:	1e 89       	ldd	r17, Y+22	; 0x16
     e38:	86 e0       	ldi	r24, 0x06	; 6
     e3a:	8c 83       	std	Y+4, r24	; 0x04
     e3c:	1a 83       	std	Y+2, r17	; 0x02
     e3e:	09 83       	std	Y+1, r16	; 0x01
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	9f e7       	ldi	r25, 0x7F	; 127
     e44:	9e 83       	std	Y+6, r25	; 0x06
     e46:	8d 83       	std	Y+5, r24	; 0x05
     e48:	ce 01       	movw	r24, r28
     e4a:	49 96       	adiw	r24, 0x19	; 25
     e4c:	ac 01       	movw	r20, r24
     e4e:	6f 89       	ldd	r22, Y+23	; 0x17
     e50:	78 8d       	ldd	r23, Y+24	; 0x18
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	0e 94 4f 07 	call	0xe9e	; 0xe9e <vfprintf>
     e5a:	ef 81       	ldd	r30, Y+7	; 0x07
     e5c:	f8 85       	ldd	r31, Y+8	; 0x08
     e5e:	e0 0f       	add	r30, r16
     e60:	f1 1f       	adc	r31, r17
     e62:	10 82       	st	Z, r1
     e64:	2e 96       	adiw	r28, 0x0e	; 14
     e66:	e4 e0       	ldi	r30, 0x04	; 4
     e68:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__epilogue_restores__+0x1c>

00000e6c <sscanf>:
     e6c:	ae e0       	ldi	r26, 0x0E	; 14
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ec e3       	ldi	r30, 0x3C	; 60
     e72:	f7 e0       	ldi	r31, 0x07	; 7
     e74:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__prologue_saves__+0x20>
     e78:	85 e0       	ldi	r24, 0x05	; 5
     e7a:	8c 83       	std	Y+4, r24	; 0x04
     e7c:	8b 89       	ldd	r24, Y+19	; 0x13
     e7e:	9c 89       	ldd	r25, Y+20	; 0x14
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	ce 01       	movw	r24, r28
     e86:	47 96       	adiw	r24, 0x17	; 23
     e88:	ac 01       	movw	r20, r24
     e8a:	6d 89       	ldd	r22, Y+21	; 0x15
     e8c:	7e 89       	ldd	r23, Y+22	; 0x16
     e8e:	ce 01       	movw	r24, r28
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <vfscanf>
     e96:	2e 96       	adiw	r28, 0x0e	; 14
     e98:	e2 e0       	ldi	r30, 0x02	; 2
     e9a:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__epilogue_restores__+0x20>

00000e9e <vfprintf>:
     e9e:	ac e0       	ldi	r26, 0x0C	; 12
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e5 e5       	ldi	r30, 0x55	; 85
     ea4:	f7 e0       	ldi	r31, 0x07	; 7
     ea6:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__prologue_saves__>
     eaa:	7c 01       	movw	r14, r24
     eac:	6b 01       	movw	r12, r22
     eae:	8a 01       	movw	r16, r20
     eb0:	fc 01       	movw	r30, r24
     eb2:	17 82       	std	Z+7, r1	; 0x07
     eb4:	16 82       	std	Z+6, r1	; 0x06
     eb6:	83 81       	ldd	r24, Z+3	; 0x03
     eb8:	81 ff       	sbrs	r24, 1
     eba:	c6 c1       	rjmp	.+908    	; 0x1248 <vfprintf+0x3aa>
     ebc:	88 24       	eor	r8, r8
     ebe:	83 94       	inc	r8
     ec0:	91 2c       	mov	r9, r1
     ec2:	8c 0e       	add	r8, r28
     ec4:	9d 1e       	adc	r9, r29
     ec6:	f7 01       	movw	r30, r14
     ec8:	93 81       	ldd	r25, Z+3	; 0x03
     eca:	f6 01       	movw	r30, r12
     ecc:	93 fd       	sbrc	r25, 3
     ece:	85 91       	lpm	r24, Z+
     ed0:	93 ff       	sbrs	r25, 3
     ed2:	81 91       	ld	r24, Z+
     ed4:	6f 01       	movw	r12, r30
     ed6:	88 23       	and	r24, r24
     ed8:	09 f4       	brne	.+2      	; 0xedc <vfprintf+0x3e>
     eda:	b2 c1       	rjmp	.+868    	; 0x1240 <vfprintf+0x3a2>
     edc:	85 32       	cpi	r24, 0x25	; 37
     ede:	39 f4       	brne	.+14     	; 0xeee <vfprintf+0x50>
     ee0:	93 fd       	sbrc	r25, 3
     ee2:	85 91       	lpm	r24, Z+
     ee4:	93 ff       	sbrs	r25, 3
     ee6:	81 91       	ld	r24, Z+
     ee8:	6f 01       	movw	r12, r30
     eea:	85 32       	cpi	r24, 0x25	; 37
     eec:	29 f4       	brne	.+10     	; 0xef8 <vfprintf+0x5a>
     eee:	b7 01       	movw	r22, r14
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
     ef6:	e7 cf       	rjmp	.-50     	; 0xec6 <vfprintf+0x28>
     ef8:	51 2c       	mov	r5, r1
     efa:	31 2c       	mov	r3, r1
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	20 32       	cpi	r18, 0x20	; 32
     f00:	a8 f4       	brcc	.+42     	; 0xf2c <vfprintf+0x8e>
     f02:	8b 32       	cpi	r24, 0x2B	; 43
     f04:	61 f0       	breq	.+24     	; 0xf1e <vfprintf+0x80>
     f06:	28 f4       	brcc	.+10     	; 0xf12 <vfprintf+0x74>
     f08:	80 32       	cpi	r24, 0x20	; 32
     f0a:	51 f0       	breq	.+20     	; 0xf20 <vfprintf+0x82>
     f0c:	83 32       	cpi	r24, 0x23	; 35
     f0e:	71 f4       	brne	.+28     	; 0xf2c <vfprintf+0x8e>
     f10:	0b c0       	rjmp	.+22     	; 0xf28 <vfprintf+0x8a>
     f12:	8d 32       	cpi	r24, 0x2D	; 45
     f14:	39 f0       	breq	.+14     	; 0xf24 <vfprintf+0x86>
     f16:	80 33       	cpi	r24, 0x30	; 48
     f18:	49 f4       	brne	.+18     	; 0xf2c <vfprintf+0x8e>
     f1a:	21 60       	ori	r18, 0x01	; 1
     f1c:	28 c0       	rjmp	.+80     	; 0xf6e <vfprintf+0xd0>
     f1e:	22 60       	ori	r18, 0x02	; 2
     f20:	24 60       	ori	r18, 0x04	; 4
     f22:	25 c0       	rjmp	.+74     	; 0xf6e <vfprintf+0xd0>
     f24:	28 60       	ori	r18, 0x08	; 8
     f26:	23 c0       	rjmp	.+70     	; 0xf6e <vfprintf+0xd0>
     f28:	20 61       	ori	r18, 0x10	; 16
     f2a:	21 c0       	rjmp	.+66     	; 0xf6e <vfprintf+0xd0>
     f2c:	27 fd       	sbrc	r18, 7
     f2e:	27 c0       	rjmp	.+78     	; 0xf7e <vfprintf+0xe0>
     f30:	38 2f       	mov	r19, r24
     f32:	30 53       	subi	r19, 0x30	; 48
     f34:	3a 30       	cpi	r19, 0x0A	; 10
     f36:	78 f4       	brcc	.+30     	; 0xf56 <vfprintf+0xb8>
     f38:	26 ff       	sbrs	r18, 6
     f3a:	06 c0       	rjmp	.+12     	; 0xf48 <vfprintf+0xaa>
     f3c:	fa e0       	ldi	r31, 0x0A	; 10
     f3e:	5f 9e       	mul	r5, r31
     f40:	30 0d       	add	r19, r0
     f42:	11 24       	eor	r1, r1
     f44:	53 2e       	mov	r5, r19
     f46:	13 c0       	rjmp	.+38     	; 0xf6e <vfprintf+0xd0>
     f48:	8a e0       	ldi	r24, 0x0A	; 10
     f4a:	38 9e       	mul	r3, r24
     f4c:	30 0d       	add	r19, r0
     f4e:	11 24       	eor	r1, r1
     f50:	33 2e       	mov	r3, r19
     f52:	20 62       	ori	r18, 0x20	; 32
     f54:	0c c0       	rjmp	.+24     	; 0xf6e <vfprintf+0xd0>
     f56:	8e 32       	cpi	r24, 0x2E	; 46
     f58:	21 f4       	brne	.+8      	; 0xf62 <vfprintf+0xc4>
     f5a:	26 fd       	sbrc	r18, 6
     f5c:	71 c1       	rjmp	.+738    	; 0x1240 <vfprintf+0x3a2>
     f5e:	20 64       	ori	r18, 0x40	; 64
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <vfprintf+0xd0>
     f62:	8c 36       	cpi	r24, 0x6C	; 108
     f64:	11 f4       	brne	.+4      	; 0xf6a <vfprintf+0xcc>
     f66:	20 68       	ori	r18, 0x80	; 128
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <vfprintf+0xd0>
     f6a:	88 36       	cpi	r24, 0x68	; 104
     f6c:	41 f4       	brne	.+16     	; 0xf7e <vfprintf+0xe0>
     f6e:	f6 01       	movw	r30, r12
     f70:	93 fd       	sbrc	r25, 3
     f72:	85 91       	lpm	r24, Z+
     f74:	93 ff       	sbrs	r25, 3
     f76:	81 91       	ld	r24, Z+
     f78:	6f 01       	movw	r12, r30
     f7a:	81 11       	cpse	r24, r1
     f7c:	c0 cf       	rjmp	.-128    	; 0xefe <vfprintf+0x60>
     f7e:	98 2f       	mov	r25, r24
     f80:	95 54       	subi	r25, 0x45	; 69
     f82:	93 30       	cpi	r25, 0x03	; 3
     f84:	18 f0       	brcs	.+6      	; 0xf8c <vfprintf+0xee>
     f86:	90 52       	subi	r25, 0x20	; 32
     f88:	93 30       	cpi	r25, 0x03	; 3
     f8a:	28 f4       	brcc	.+10     	; 0xf96 <vfprintf+0xf8>
     f8c:	0c 5f       	subi	r16, 0xFC	; 252
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
     f90:	ff e3       	ldi	r31, 0x3F	; 63
     f92:	f9 83       	std	Y+1, r31	; 0x01
     f94:	0d c0       	rjmp	.+26     	; 0xfb0 <vfprintf+0x112>
     f96:	83 36       	cpi	r24, 0x63	; 99
     f98:	31 f0       	breq	.+12     	; 0xfa6 <vfprintf+0x108>
     f9a:	83 37       	cpi	r24, 0x73	; 115
     f9c:	71 f0       	breq	.+28     	; 0xfba <vfprintf+0x11c>
     f9e:	83 35       	cpi	r24, 0x53	; 83
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <vfprintf+0x106>
     fa2:	5e c0       	rjmp	.+188    	; 0x1060 <vfprintf+0x1c2>
     fa4:	23 c0       	rjmp	.+70     	; 0xfec <vfprintf+0x14e>
     fa6:	f8 01       	movw	r30, r16
     fa8:	80 81       	ld	r24, Z
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	0e 5f       	subi	r16, 0xFE	; 254
     fae:	1f 4f       	sbci	r17, 0xFF	; 255
     fb0:	44 24       	eor	r4, r4
     fb2:	43 94       	inc	r4
     fb4:	51 2c       	mov	r5, r1
     fb6:	54 01       	movw	r10, r8
     fb8:	15 c0       	rjmp	.+42     	; 0xfe4 <vfprintf+0x146>
     fba:	38 01       	movw	r6, r16
     fbc:	f2 e0       	ldi	r31, 0x02	; 2
     fbe:	6f 0e       	add	r6, r31
     fc0:	71 1c       	adc	r7, r1
     fc2:	f8 01       	movw	r30, r16
     fc4:	a0 80       	ld	r10, Z
     fc6:	b1 80       	ldd	r11, Z+1	; 0x01
     fc8:	26 ff       	sbrs	r18, 6
     fca:	03 c0       	rjmp	.+6      	; 0xfd2 <vfprintf+0x134>
     fcc:	65 2d       	mov	r22, r5
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <vfprintf+0x138>
     fd2:	6f ef       	ldi	r22, 0xFF	; 255
     fd4:	7f ef       	ldi	r23, 0xFF	; 255
     fd6:	c5 01       	movw	r24, r10
     fd8:	2c 87       	std	Y+12, r18	; 0x0c
     fda:	0e 94 25 0c 	call	0x184a	; 0x184a <strnlen>
     fde:	2c 01       	movw	r4, r24
     fe0:	83 01       	movw	r16, r6
     fe2:	2c 85       	ldd	r18, Y+12	; 0x0c
     fe4:	6f e7       	ldi	r22, 0x7F	; 127
     fe6:	26 2e       	mov	r2, r22
     fe8:	22 22       	and	r2, r18
     fea:	18 c0       	rjmp	.+48     	; 0x101c <vfprintf+0x17e>
     fec:	38 01       	movw	r6, r16
     fee:	f2 e0       	ldi	r31, 0x02	; 2
     ff0:	6f 0e       	add	r6, r31
     ff2:	71 1c       	adc	r7, r1
     ff4:	f8 01       	movw	r30, r16
     ff6:	a0 80       	ld	r10, Z
     ff8:	b1 80       	ldd	r11, Z+1	; 0x01
     ffa:	26 ff       	sbrs	r18, 6
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <vfprintf+0x166>
     ffe:	65 2d       	mov	r22, r5
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <vfprintf+0x16a>
    1004:	6f ef       	ldi	r22, 0xFF	; 255
    1006:	7f ef       	ldi	r23, 0xFF	; 255
    1008:	c5 01       	movw	r24, r10
    100a:	2c 87       	std	Y+12, r18	; 0x0c
    100c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <strnlen_P>
    1010:	2c 01       	movw	r4, r24
    1012:	2c 85       	ldd	r18, Y+12	; 0x0c
    1014:	50 e8       	ldi	r21, 0x80	; 128
    1016:	25 2e       	mov	r2, r21
    1018:	22 2a       	or	r2, r18
    101a:	83 01       	movw	r16, r6
    101c:	23 fc       	sbrc	r2, 3
    101e:	1c c0       	rjmp	.+56     	; 0x1058 <vfprintf+0x1ba>
    1020:	06 c0       	rjmp	.+12     	; 0x102e <vfprintf+0x190>
    1022:	b7 01       	movw	r22, r14
    1024:	80 e2       	ldi	r24, 0x20	; 32
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    102c:	3a 94       	dec	r3
    102e:	83 2d       	mov	r24, r3
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	48 16       	cp	r4, r24
    1034:	59 06       	cpc	r5, r25
    1036:	a8 f3       	brcs	.-22     	; 0x1022 <vfprintf+0x184>
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <vfprintf+0x1ba>
    103a:	f5 01       	movw	r30, r10
    103c:	27 fc       	sbrc	r2, 7
    103e:	85 91       	lpm	r24, Z+
    1040:	27 fe       	sbrs	r2, 7
    1042:	81 91       	ld	r24, Z+
    1044:	5f 01       	movw	r10, r30
    1046:	b7 01       	movw	r22, r14
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    104e:	31 10       	cpse	r3, r1
    1050:	3a 94       	dec	r3
    1052:	f1 e0       	ldi	r31, 0x01	; 1
    1054:	4f 1a       	sub	r4, r31
    1056:	51 08       	sbc	r5, r1
    1058:	41 14       	cp	r4, r1
    105a:	51 04       	cpc	r5, r1
    105c:	71 f7       	brne	.-36     	; 0x103a <vfprintf+0x19c>
    105e:	ed c0       	rjmp	.+474    	; 0x123a <vfprintf+0x39c>
    1060:	84 36       	cpi	r24, 0x64	; 100
    1062:	11 f0       	breq	.+4      	; 0x1068 <vfprintf+0x1ca>
    1064:	89 36       	cpi	r24, 0x69	; 105
    1066:	41 f5       	brne	.+80     	; 0x10b8 <vfprintf+0x21a>
    1068:	f8 01       	movw	r30, r16
    106a:	27 ff       	sbrs	r18, 7
    106c:	07 c0       	rjmp	.+14     	; 0x107c <vfprintf+0x1de>
    106e:	60 81       	ld	r22, Z
    1070:	71 81       	ldd	r23, Z+1	; 0x01
    1072:	82 81       	ldd	r24, Z+2	; 0x02
    1074:	93 81       	ldd	r25, Z+3	; 0x03
    1076:	0c 5f       	subi	r16, 0xFC	; 252
    1078:	1f 4f       	sbci	r17, 0xFF	; 255
    107a:	08 c0       	rjmp	.+16     	; 0x108c <vfprintf+0x1ee>
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	88 27       	eor	r24, r24
    1082:	77 fd       	sbrc	r23, 7
    1084:	80 95       	com	r24
    1086:	98 2f       	mov	r25, r24
    1088:	0e 5f       	subi	r16, 0xFE	; 254
    108a:	1f 4f       	sbci	r17, 0xFF	; 255
    108c:	4f e6       	ldi	r20, 0x6F	; 111
    108e:	b4 2e       	mov	r11, r20
    1090:	b2 22       	and	r11, r18
    1092:	97 ff       	sbrs	r25, 7
    1094:	09 c0       	rjmp	.+18     	; 0x10a8 <vfprintf+0x20a>
    1096:	90 95       	com	r25
    1098:	80 95       	com	r24
    109a:	70 95       	com	r23
    109c:	61 95       	neg	r22
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	8f 4f       	sbci	r24, 0xFF	; 255
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	f0 e8       	ldi	r31, 0x80	; 128
    10a6:	bf 2a       	or	r11, r31
    10a8:	2a e0       	ldi	r18, 0x0A	; 10
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	a4 01       	movw	r20, r8
    10ae:	0e 94 b7 0c 	call	0x196e	; 0x196e <__ultoa_invert>
    10b2:	a8 2e       	mov	r10, r24
    10b4:	a8 18       	sub	r10, r8
    10b6:	43 c0       	rjmp	.+134    	; 0x113e <vfprintf+0x2a0>
    10b8:	85 37       	cpi	r24, 0x75	; 117
    10ba:	31 f4       	brne	.+12     	; 0x10c8 <vfprintf+0x22a>
    10bc:	3f ee       	ldi	r19, 0xEF	; 239
    10be:	b3 2e       	mov	r11, r19
    10c0:	b2 22       	and	r11, r18
    10c2:	2a e0       	ldi	r18, 0x0A	; 10
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	24 c0       	rjmp	.+72     	; 0x1110 <vfprintf+0x272>
    10c8:	99 ef       	ldi	r25, 0xF9	; 249
    10ca:	b9 2e       	mov	r11, r25
    10cc:	b2 22       	and	r11, r18
    10ce:	8f 36       	cpi	r24, 0x6F	; 111
    10d0:	b9 f0       	breq	.+46     	; 0x1100 <vfprintf+0x262>
    10d2:	20 f4       	brcc	.+8      	; 0x10dc <vfprintf+0x23e>
    10d4:	88 35       	cpi	r24, 0x58	; 88
    10d6:	09 f0       	breq	.+2      	; 0x10da <vfprintf+0x23c>
    10d8:	b3 c0       	rjmp	.+358    	; 0x1240 <vfprintf+0x3a2>
    10da:	0d c0       	rjmp	.+26     	; 0x10f6 <vfprintf+0x258>
    10dc:	80 37       	cpi	r24, 0x70	; 112
    10de:	21 f0       	breq	.+8      	; 0x10e8 <vfprintf+0x24a>
    10e0:	88 37       	cpi	r24, 0x78	; 120
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <vfprintf+0x248>
    10e4:	ad c0       	rjmp	.+346    	; 0x1240 <vfprintf+0x3a2>
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <vfprintf+0x24e>
    10e8:	20 e1       	ldi	r18, 0x10	; 16
    10ea:	b2 2a       	or	r11, r18
    10ec:	b4 fe       	sbrs	r11, 4
    10ee:	0b c0       	rjmp	.+22     	; 0x1106 <vfprintf+0x268>
    10f0:	84 e0       	ldi	r24, 0x04	; 4
    10f2:	b8 2a       	or	r11, r24
    10f4:	08 c0       	rjmp	.+16     	; 0x1106 <vfprintf+0x268>
    10f6:	24 ff       	sbrs	r18, 4
    10f8:	09 c0       	rjmp	.+18     	; 0x110c <vfprintf+0x26e>
    10fa:	e6 e0       	ldi	r30, 0x06	; 6
    10fc:	be 2a       	or	r11, r30
    10fe:	06 c0       	rjmp	.+12     	; 0x110c <vfprintf+0x26e>
    1100:	28 e0       	ldi	r18, 0x08	; 8
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <vfprintf+0x272>
    1106:	20 e1       	ldi	r18, 0x10	; 16
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <vfprintf+0x272>
    110c:	20 e1       	ldi	r18, 0x10	; 16
    110e:	32 e0       	ldi	r19, 0x02	; 2
    1110:	f8 01       	movw	r30, r16
    1112:	b7 fe       	sbrs	r11, 7
    1114:	07 c0       	rjmp	.+14     	; 0x1124 <vfprintf+0x286>
    1116:	60 81       	ld	r22, Z
    1118:	71 81       	ldd	r23, Z+1	; 0x01
    111a:	82 81       	ldd	r24, Z+2	; 0x02
    111c:	93 81       	ldd	r25, Z+3	; 0x03
    111e:	0c 5f       	subi	r16, 0xFC	; 252
    1120:	1f 4f       	sbci	r17, 0xFF	; 255
    1122:	06 c0       	rjmp	.+12     	; 0x1130 <vfprintf+0x292>
    1124:	60 81       	ld	r22, Z
    1126:	71 81       	ldd	r23, Z+1	; 0x01
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 5f       	subi	r16, 0xFE	; 254
    112e:	1f 4f       	sbci	r17, 0xFF	; 255
    1130:	a4 01       	movw	r20, r8
    1132:	0e 94 b7 0c 	call	0x196e	; 0x196e <__ultoa_invert>
    1136:	a8 2e       	mov	r10, r24
    1138:	a8 18       	sub	r10, r8
    113a:	ff e7       	ldi	r31, 0x7F	; 127
    113c:	bf 22       	and	r11, r31
    113e:	b6 fe       	sbrs	r11, 6
    1140:	0b c0       	rjmp	.+22     	; 0x1158 <vfprintf+0x2ba>
    1142:	2b 2d       	mov	r18, r11
    1144:	2e 7f       	andi	r18, 0xFE	; 254
    1146:	a5 14       	cp	r10, r5
    1148:	50 f4       	brcc	.+20     	; 0x115e <vfprintf+0x2c0>
    114a:	b4 fe       	sbrs	r11, 4
    114c:	0a c0       	rjmp	.+20     	; 0x1162 <vfprintf+0x2c4>
    114e:	b2 fc       	sbrc	r11, 2
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <vfprintf+0x2c4>
    1152:	2b 2d       	mov	r18, r11
    1154:	2e 7e       	andi	r18, 0xEE	; 238
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <vfprintf+0x2c4>
    1158:	7a 2c       	mov	r7, r10
    115a:	2b 2d       	mov	r18, r11
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <vfprintf+0x2c6>
    115e:	7a 2c       	mov	r7, r10
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <vfprintf+0x2c6>
    1162:	75 2c       	mov	r7, r5
    1164:	24 ff       	sbrs	r18, 4
    1166:	0d c0       	rjmp	.+26     	; 0x1182 <vfprintf+0x2e4>
    1168:	fe 01       	movw	r30, r28
    116a:	ea 0d       	add	r30, r10
    116c:	f1 1d       	adc	r31, r1
    116e:	80 81       	ld	r24, Z
    1170:	80 33       	cpi	r24, 0x30	; 48
    1172:	11 f4       	brne	.+4      	; 0x1178 <vfprintf+0x2da>
    1174:	29 7e       	andi	r18, 0xE9	; 233
    1176:	09 c0       	rjmp	.+18     	; 0x118a <vfprintf+0x2ec>
    1178:	22 ff       	sbrs	r18, 2
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <vfprintf+0x2ea>
    117c:	73 94       	inc	r7
    117e:	73 94       	inc	r7
    1180:	04 c0       	rjmp	.+8      	; 0x118a <vfprintf+0x2ec>
    1182:	82 2f       	mov	r24, r18
    1184:	86 78       	andi	r24, 0x86	; 134
    1186:	09 f0       	breq	.+2      	; 0x118a <vfprintf+0x2ec>
    1188:	73 94       	inc	r7
    118a:	23 fd       	sbrc	r18, 3
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <vfprintf+0x318>
    118e:	20 ff       	sbrs	r18, 0
    1190:	0f c0       	rjmp	.+30     	; 0x11b0 <vfprintf+0x312>
    1192:	5a 2c       	mov	r5, r10
    1194:	73 14       	cp	r7, r3
    1196:	60 f4       	brcc	.+24     	; 0x11b0 <vfprintf+0x312>
    1198:	53 0c       	add	r5, r3
    119a:	57 18       	sub	r5, r7
    119c:	73 2c       	mov	r7, r3
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <vfprintf+0x312>
    11a0:	b7 01       	movw	r22, r14
    11a2:	80 e2       	ldi	r24, 0x20	; 32
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	2c 87       	std	Y+12, r18	; 0x0c
    11a8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    11ac:	73 94       	inc	r7
    11ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b0:	73 14       	cp	r7, r3
    11b2:	b0 f3       	brcs	.-20     	; 0x11a0 <vfprintf+0x302>
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <vfprintf+0x320>
    11b6:	73 14       	cp	r7, r3
    11b8:	10 f4       	brcc	.+4      	; 0x11be <vfprintf+0x320>
    11ba:	37 18       	sub	r3, r7
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <vfprintf+0x322>
    11be:	31 2c       	mov	r3, r1
    11c0:	24 ff       	sbrs	r18, 4
    11c2:	12 c0       	rjmp	.+36     	; 0x11e8 <vfprintf+0x34a>
    11c4:	b7 01       	movw	r22, r14
    11c6:	80 e3       	ldi	r24, 0x30	; 48
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	2c 87       	std	Y+12, r18	; 0x0c
    11cc:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    11d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    11d2:	22 ff       	sbrs	r18, 2
    11d4:	1e c0       	rjmp	.+60     	; 0x1212 <vfprintf+0x374>
    11d6:	21 ff       	sbrs	r18, 1
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <vfprintf+0x342>
    11da:	88 e5       	ldi	r24, 0x58	; 88
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <vfprintf+0x346>
    11e0:	88 e7       	ldi	r24, 0x78	; 120
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	b7 01       	movw	r22, r14
    11e6:	0c c0       	rjmp	.+24     	; 0x1200 <vfprintf+0x362>
    11e8:	82 2f       	mov	r24, r18
    11ea:	86 78       	andi	r24, 0x86	; 134
    11ec:	91 f0       	breq	.+36     	; 0x1212 <vfprintf+0x374>
    11ee:	21 fd       	sbrc	r18, 1
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <vfprintf+0x358>
    11f2:	80 e2       	ldi	r24, 0x20	; 32
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <vfprintf+0x35a>
    11f6:	8b e2       	ldi	r24, 0x2B	; 43
    11f8:	27 fd       	sbrc	r18, 7
    11fa:	8d e2       	ldi	r24, 0x2D	; 45
    11fc:	b7 01       	movw	r22, r14
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <vfprintf+0x374>
    1206:	b7 01       	movw	r22, r14
    1208:	80 e3       	ldi	r24, 0x30	; 48
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    1210:	5a 94       	dec	r5
    1212:	a5 14       	cp	r10, r5
    1214:	c0 f3       	brcs	.-16     	; 0x1206 <vfprintf+0x368>
    1216:	aa 94       	dec	r10
    1218:	f4 01       	movw	r30, r8
    121a:	ea 0d       	add	r30, r10
    121c:	f1 1d       	adc	r31, r1
    121e:	b7 01       	movw	r22, r14
    1220:	80 81       	ld	r24, Z
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    1228:	a1 10       	cpse	r10, r1
    122a:	f5 cf       	rjmp	.-22     	; 0x1216 <vfprintf+0x378>
    122c:	06 c0       	rjmp	.+12     	; 0x123a <vfprintf+0x39c>
    122e:	b7 01       	movw	r22, r14
    1230:	80 e2       	ldi	r24, 0x20	; 32
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    1238:	3a 94       	dec	r3
    123a:	31 10       	cpse	r3, r1
    123c:	f8 cf       	rjmp	.-16     	; 0x122e <vfprintf+0x390>
    123e:	43 ce       	rjmp	.-890    	; 0xec6 <vfprintf+0x28>
    1240:	f7 01       	movw	r30, r14
    1242:	26 81       	ldd	r18, Z+6	; 0x06
    1244:	37 81       	ldd	r19, Z+7	; 0x07
    1246:	02 c0       	rjmp	.+4      	; 0x124c <vfprintf+0x3ae>
    1248:	2f ef       	ldi	r18, 0xFF	; 255
    124a:	3f ef       	ldi	r19, 0xFF	; 255
    124c:	c9 01       	movw	r24, r18
    124e:	2c 96       	adiw	r28, 0x0c	; 12
    1250:	e2 e1       	ldi	r30, 0x12	; 18
    1252:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__epilogue_restores__>

00001256 <putval>:
    1256:	20 fd       	sbrc	r18, 0
    1258:	09 c0       	rjmp	.+18     	; 0x126c <putval+0x16>
    125a:	fc 01       	movw	r30, r24
    125c:	23 fd       	sbrc	r18, 3
    125e:	05 c0       	rjmp	.+10     	; 0x126a <putval+0x14>
    1260:	22 ff       	sbrs	r18, 2
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <putval+0x12>
    1264:	73 83       	std	Z+3, r23	; 0x03
    1266:	62 83       	std	Z+2, r22	; 0x02
    1268:	51 83       	std	Z+1, r21	; 0x01
    126a:	40 83       	st	Z, r20
    126c:	08 95       	ret

0000126e <mulacc>:
    126e:	cf 92       	push	r12
    1270:	df 92       	push	r13
    1272:	ef 92       	push	r14
    1274:	ff 92       	push	r15
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	44 fd       	sbrc	r20, 4
    127c:	10 c0       	rjmp	.+32     	; 0x129e <mulacc+0x30>
    127e:	46 fd       	sbrc	r20, 6
    1280:	10 c0       	rjmp	.+32     	; 0x12a2 <mulacc+0x34>
    1282:	db 01       	movw	r26, r22
    1284:	fc 01       	movw	r30, r24
    1286:	aa 0f       	add	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	ee 1f       	adc	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	10 94       	com	r1
    1290:	d1 f7       	brne	.-12     	; 0x1286 <mulacc+0x18>
    1292:	6a 0f       	add	r22, r26
    1294:	7b 1f       	adc	r23, r27
    1296:	8e 1f       	adc	r24, r30
    1298:	9f 1f       	adc	r25, r31
    129a:	31 e0       	ldi	r19, 0x01	; 1
    129c:	03 c0       	rjmp	.+6      	; 0x12a4 <mulacc+0x36>
    129e:	33 e0       	ldi	r19, 0x03	; 3
    12a0:	01 c0       	rjmp	.+2      	; 0x12a4 <mulacc+0x36>
    12a2:	34 e0       	ldi	r19, 0x04	; 4
    12a4:	66 0f       	add	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	88 1f       	adc	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	31 50       	subi	r19, 0x01	; 1
    12ae:	d1 f7       	brne	.-12     	; 0x12a4 <mulacc+0x36>
    12b0:	6b 01       	movw	r12, r22
    12b2:	7c 01       	movw	r14, r24
    12b4:	c2 0e       	add	r12, r18
    12b6:	d1 1c       	adc	r13, r1
    12b8:	e1 1c       	adc	r14, r1
    12ba:	f1 1c       	adc	r15, r1
    12bc:	97 01       	movw	r18, r14
    12be:	86 01       	movw	r16, r12
    12c0:	b6 01       	movw	r22, r12
    12c2:	c9 01       	movw	r24, r18
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	08 95       	ret

000012d2 <skip_spaces>:
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	8c 01       	movw	r16, r24
    12dc:	c8 01       	movw	r24, r16
    12de:	0e 94 30 0c 	call	0x1860	; 0x1860 <fgetc>
    12e2:	ec 01       	movw	r28, r24
    12e4:	97 fd       	sbrc	r25, 7
    12e6:	08 c0       	rjmp	.+16     	; 0x12f8 <skip_spaces+0x26>
    12e8:	0e 94 07 0c 	call	0x180e	; 0x180e <isspace>
    12ec:	89 2b       	or	r24, r25
    12ee:	b1 f7       	brne	.-20     	; 0x12dc <skip_spaces+0xa>
    12f0:	b8 01       	movw	r22, r16
    12f2:	ce 01       	movw	r24, r28
    12f4:	0e 94 9c 0c 	call	0x1938	; 0x1938 <ungetc>
    12f8:	ce 01       	movw	r24, r28
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <conv_int>:
    1304:	8f 92       	push	r8
    1306:	9f 92       	push	r9
    1308:	af 92       	push	r10
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	ec 01       	movw	r28, r24
    131c:	a6 2e       	mov	r10, r22
    131e:	4a 01       	movw	r8, r20
    1320:	02 2f       	mov	r16, r18
    1322:	0e 94 30 0c 	call	0x1860	; 0x1860 <fgetc>
    1326:	ac 01       	movw	r20, r24
    1328:	55 27       	eor	r21, r21
    132a:	4b 32       	cpi	r20, 0x2B	; 43
    132c:	51 05       	cpc	r21, r1
    132e:	21 f0       	breq	.+8      	; 0x1338 <conv_int+0x34>
    1330:	4d 32       	cpi	r20, 0x2D	; 45
    1332:	51 05       	cpc	r21, r1
    1334:	51 f4       	brne	.+20     	; 0x134a <conv_int+0x46>
    1336:	00 68       	ori	r16, 0x80	; 128
    1338:	aa 94       	dec	r10
    133a:	11 f4       	brne	.+4      	; 0x1340 <conv_int+0x3c>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	63 c0       	rjmp	.+198    	; 0x1406 <conv_int+0x102>
    1340:	ce 01       	movw	r24, r28
    1342:	0e 94 30 0c 	call	0x1860	; 0x1860 <fgetc>
    1346:	97 fd       	sbrc	r25, 7
    1348:	f9 cf       	rjmp	.-14     	; 0x133c <conv_int+0x38>
    134a:	10 2f       	mov	r17, r16
    134c:	1d 7f       	andi	r17, 0xFD	; 253
    134e:	30 2f       	mov	r19, r16
    1350:	30 73       	andi	r19, 0x30	; 48
    1352:	e1 f4       	brne	.+56     	; 0x138c <conv_int+0x88>
    1354:	80 33       	cpi	r24, 0x30	; 48
    1356:	d1 f4       	brne	.+52     	; 0x138c <conv_int+0x88>
    1358:	aa 94       	dec	r10
    135a:	09 f4       	brne	.+2      	; 0x135e <conv_int+0x5a>
    135c:	40 c0       	rjmp	.+128    	; 0x13de <conv_int+0xda>
    135e:	ce 01       	movw	r24, r28
    1360:	0e 94 30 0c 	call	0x1860	; 0x1860 <fgetc>
    1364:	97 fd       	sbrc	r25, 7
    1366:	3b c0       	rjmp	.+118    	; 0x13de <conv_int+0xda>
    1368:	88 37       	cpi	r24, 0x78	; 120
    136a:	11 f0       	breq	.+4      	; 0x1370 <conv_int+0x6c>
    136c:	88 35       	cpi	r24, 0x58	; 88
    136e:	49 f4       	brne	.+18     	; 0x1382 <conv_int+0x7e>
    1370:	12 64       	ori	r17, 0x42	; 66
    1372:	aa 94       	dec	r10
    1374:	a1 f1       	breq	.+104    	; 0x13de <conv_int+0xda>
    1376:	ce 01       	movw	r24, r28
    1378:	0e 94 30 0c 	call	0x1860	; 0x1860 <fgetc>
    137c:	97 ff       	sbrs	r25, 7
    137e:	06 c0       	rjmp	.+12     	; 0x138c <conv_int+0x88>
    1380:	2e c0       	rjmp	.+92     	; 0x13de <conv_int+0xda>
    1382:	06 ff       	sbrs	r16, 6
    1384:	02 c0       	rjmp	.+4      	; 0x138a <conv_int+0x86>
    1386:	12 60       	ori	r17, 0x02	; 2
    1388:	01 c0       	rjmp	.+2      	; 0x138c <conv_int+0x88>
    138a:	12 61       	ori	r17, 0x12	; 18
    138c:	c1 2c       	mov	r12, r1
    138e:	d1 2c       	mov	r13, r1
    1390:	76 01       	movw	r14, r12
    1392:	28 2f       	mov	r18, r24
    1394:	20 53       	subi	r18, 0x30	; 48
    1396:	28 30       	cpi	r18, 0x08	; 8
    1398:	80 f0       	brcs	.+32     	; 0x13ba <conv_int+0xb6>
    139a:	14 ff       	sbrs	r17, 4
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <conv_int+0xa2>
    139e:	be 01       	movw	r22, r28
    13a0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <ungetc>
    13a4:	19 c0       	rjmp	.+50     	; 0x13d8 <conv_int+0xd4>
    13a6:	2a 30       	cpi	r18, 0x0A	; 10
    13a8:	40 f0       	brcs	.+16     	; 0x13ba <conv_int+0xb6>
    13aa:	16 ff       	sbrs	r17, 6
    13ac:	f8 cf       	rjmp	.-16     	; 0x139e <conv_int+0x9a>
    13ae:	2f 7d       	andi	r18, 0xDF	; 223
    13b0:	32 2f       	mov	r19, r18
    13b2:	31 51       	subi	r19, 0x11	; 17
    13b4:	36 30       	cpi	r19, 0x06	; 6
    13b6:	98 f7       	brcc	.-26     	; 0x139e <conv_int+0x9a>
    13b8:	27 50       	subi	r18, 0x07	; 7
    13ba:	41 2f       	mov	r20, r17
    13bc:	c7 01       	movw	r24, r14
    13be:	b6 01       	movw	r22, r12
    13c0:	0e 94 37 09 	call	0x126e	; 0x126e <mulacc>
    13c4:	6b 01       	movw	r12, r22
    13c6:	7c 01       	movw	r14, r24
    13c8:	12 60       	ori	r17, 0x02	; 2
    13ca:	aa 94       	dec	r10
    13cc:	59 f0       	breq	.+22     	; 0x13e4 <conv_int+0xe0>
    13ce:	ce 01       	movw	r24, r28
    13d0:	0e 94 30 0c 	call	0x1860	; 0x1860 <fgetc>
    13d4:	97 ff       	sbrs	r25, 7
    13d6:	dd cf       	rjmp	.-70     	; 0x1392 <conv_int+0x8e>
    13d8:	11 fd       	sbrc	r17, 1
    13da:	04 c0       	rjmp	.+8      	; 0x13e4 <conv_int+0xe0>
    13dc:	af cf       	rjmp	.-162    	; 0x133c <conv_int+0x38>
    13de:	c1 2c       	mov	r12, r1
    13e0:	d1 2c       	mov	r13, r1
    13e2:	76 01       	movw	r14, r12
    13e4:	17 ff       	sbrs	r17, 7
    13e6:	08 c0       	rjmp	.+16     	; 0x13f8 <conv_int+0xf4>
    13e8:	f0 94       	com	r15
    13ea:	e0 94       	com	r14
    13ec:	d0 94       	com	r13
    13ee:	c0 94       	com	r12
    13f0:	c1 1c       	adc	r12, r1
    13f2:	d1 1c       	adc	r13, r1
    13f4:	e1 1c       	adc	r14, r1
    13f6:	f1 1c       	adc	r15, r1
    13f8:	21 2f       	mov	r18, r17
    13fa:	b7 01       	movw	r22, r14
    13fc:	a6 01       	movw	r20, r12
    13fe:	c4 01       	movw	r24, r8
    1400:	0e 94 2b 09 	call	0x1256	; 0x1256 <putval>
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	cf 90       	pop	r12
    1416:	af 90       	pop	r10
    1418:	9f 90       	pop	r9
    141a:	8f 90       	pop	r8
    141c:	08 95       	ret

0000141e <conv_brk>:
    141e:	6f 92       	push	r6
    1420:	7f 92       	push	r7
    1422:	9f 92       	push	r9
    1424:	af 92       	push	r10
    1426:	bf 92       	push	r11
    1428:	cf 92       	push	r12
    142a:	df 92       	push	r13
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	a1 97       	sbiw	r28, 0x21	; 33
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	6c 01       	movw	r12, r24
    144a:	7a 01       	movw	r14, r20
    144c:	89 01       	movw	r16, r18
    144e:	fe 01       	movw	r30, r28
    1450:	31 96       	adiw	r30, 0x01	; 1
    1452:	80 e2       	ldi	r24, 0x20	; 32
    1454:	df 01       	movw	r26, r30
    1456:	1d 92       	st	X+, r1
    1458:	8a 95       	dec	r24
    145a:	e9 f7       	brne	.-6      	; 0x1456 <conv_brk+0x38>
    145c:	d6 01       	movw	r26, r12
    145e:	13 96       	adiw	r26, 0x03	; 3
    1460:	9c 90       	ld	r9, X
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	a1 2c       	mov	r10, r1
    1468:	a0 e0       	ldi	r26, 0x00	; 0
    146a:	b1 2c       	mov	r11, r1
    146c:	cf 01       	movw	r24, r30
    146e:	41 e0       	ldi	r20, 0x01	; 1
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	f8 01       	movw	r30, r16
    1474:	93 fc       	sbrc	r9, 3
    1476:	75 91       	lpm	r23, Z+
    1478:	93 fe       	sbrs	r9, 3
    147a:	71 91       	ld	r23, Z+
    147c:	8f 01       	movw	r16, r30
    147e:	71 11       	cpse	r23, r1
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <conv_brk+0x6a>
    1482:	00 e0       	ldi	r16, 0x00	; 0
    1484:	10 e0       	ldi	r17, 0x00	; 0
    1486:	80 c0       	rjmp	.+256    	; 0x1588 <conv_brk+0x16a>
    1488:	7e 35       	cpi	r23, 0x5E	; 94
    148a:	19 f4       	brne	.+6      	; 0x1492 <conv_brk+0x74>
    148c:	21 15       	cp	r18, r1
    148e:	31 05       	cpc	r19, r1
    1490:	59 f1       	breq	.+86     	; 0x14e8 <conv_brk+0xca>
    1492:	eb 2d       	mov	r30, r11
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	e2 17       	cp	r30, r18
    1498:	f3 07       	cpc	r31, r19
    149a:	3c f4       	brge	.+14     	; 0x14aa <conv_brk+0x8c>
    149c:	7d 35       	cpi	r23, 0x5D	; 93
    149e:	69 f1       	breq	.+90     	; 0x14fa <conv_brk+0xdc>
    14a0:	7d 32       	cpi	r23, 0x2D	; 45
    14a2:	19 f4       	brne	.+6      	; 0x14aa <conv_brk+0x8c>
    14a4:	aa 23       	and	r26, r26
    14a6:	19 f1       	breq	.+70     	; 0x14ee <conv_brk+0xd0>
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <conv_brk+0x92>
    14aa:	a1 11       	cpse	r26, r1
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <conv_brk+0x92>
    14ae:	a7 2e       	mov	r10, r23
    14b0:	e7 2f       	mov	r30, r23
    14b2:	e6 95       	lsr	r30
    14b4:	e6 95       	lsr	r30
    14b6:	e6 95       	lsr	r30
    14b8:	3c 01       	movw	r6, r24
    14ba:	6e 0e       	add	r6, r30
    14bc:	71 1c       	adc	r7, r1
    14be:	f3 01       	movw	r30, r6
    14c0:	a7 2f       	mov	r26, r23
    14c2:	a7 70       	andi	r26, 0x07	; 7
    14c4:	3a 01       	movw	r6, r20
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <conv_brk+0xae>
    14c8:	66 0c       	add	r6, r6
    14ca:	77 1c       	adc	r7, r7
    14cc:	aa 95       	dec	r26
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <conv_brk+0xaa>
    14d0:	d3 01       	movw	r26, r6
    14d2:	b0 81       	ld	r27, Z
    14d4:	ba 2b       	or	r27, r26
    14d6:	b0 83       	st	Z, r27
    14d8:	7a 15       	cp	r23, r10
    14da:	59 f0       	breq	.+22     	; 0x14f2 <conv_brk+0xd4>
    14dc:	7a 15       	cp	r23, r10
    14de:	10 f4       	brcc	.+4      	; 0x14e4 <conv_brk+0xc6>
    14e0:	7f 5f       	subi	r23, 0xFF	; 255
    14e2:	e6 cf       	rjmp	.-52     	; 0x14b0 <conv_brk+0x92>
    14e4:	71 50       	subi	r23, 0x01	; 1
    14e6:	e4 cf       	rjmp	.-56     	; 0x14b0 <conv_brk+0x92>
    14e8:	bb 24       	eor	r11, r11
    14ea:	b3 94       	inc	r11
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <conv_brk+0xd6>
    14ee:	a1 e0       	ldi	r26, 0x01	; 1
    14f0:	01 c0       	rjmp	.+2      	; 0x14f4 <conv_brk+0xd6>
    14f2:	a0 e0       	ldi	r26, 0x00	; 0
    14f4:	2f 5f       	subi	r18, 0xFF	; 255
    14f6:	3f 4f       	sbci	r19, 0xFF	; 255
    14f8:	bc cf       	rjmp	.-136    	; 0x1472 <conv_brk+0x54>
    14fa:	aa 23       	and	r26, r26
    14fc:	19 f0       	breq	.+6      	; 0x1504 <conv_brk+0xe6>
    14fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1500:	80 62       	ori	r24, 0x20	; 32
    1502:	8e 83       	std	Y+6, r24	; 0x06
    1504:	b1 10       	cpse	r11, r1
    1506:	03 c0       	rjmp	.+6      	; 0x150e <conv_brk+0xf0>
    1508:	bb 24       	eor	r11, r11
    150a:	b3 94       	inc	r11
    150c:	0b c0       	rjmp	.+22     	; 0x1524 <conv_brk+0x106>
    150e:	fe 01       	movw	r30, r28
    1510:	31 96       	adiw	r30, 0x01	; 1
    1512:	ce 01       	movw	r24, r28
    1514:	81 96       	adiw	r24, 0x21	; 33
    1516:	20 81       	ld	r18, Z
    1518:	20 95       	com	r18
    151a:	21 93       	st	Z+, r18
    151c:	e8 17       	cp	r30, r24
    151e:	f9 07       	cpc	r31, r25
    1520:	d1 f7       	brne	.-12     	; 0x1516 <conv_brk+0xf8>
    1522:	f2 cf       	rjmp	.-28     	; 0x1508 <conv_brk+0xea>
    1524:	c6 01       	movw	r24, r12
    1526:	69 a3       	std	Y+33, r22	; 0x21
    1528:	0e 94 30 0c 	call	0x1860	; 0x1860 <fgetc>
    152c:	69 a1       	ldd	r22, Y+33	; 0x21
    152e:	97 fd       	sbrc	r25, 7
    1530:	24 c0       	rjmp	.+72     	; 0x157a <conv_brk+0x15c>
    1532:	28 2f       	mov	r18, r24
    1534:	26 95       	lsr	r18
    1536:	26 95       	lsr	r18
    1538:	26 95       	lsr	r18
    153a:	e1 e0       	ldi	r30, 0x01	; 1
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	ec 0f       	add	r30, r28
    1540:	fd 1f       	adc	r31, r29
    1542:	e2 0f       	add	r30, r18
    1544:	f1 1d       	adc	r31, r1
    1546:	20 81       	ld	r18, Z
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	ac 01       	movw	r20, r24
    154c:	47 70       	andi	r20, 0x07	; 7
    154e:	55 27       	eor	r21, r21
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <conv_brk+0x138>
    1552:	35 95       	asr	r19
    1554:	27 95       	ror	r18
    1556:	4a 95       	dec	r20
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <conv_brk+0x134>
    155a:	20 fd       	sbrc	r18, 0
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <conv_brk+0x148>
    155e:	b6 01       	movw	r22, r12
    1560:	0e 94 9c 0c 	call	0x1938	; 0x1938 <ungetc>
    1564:	0a c0       	rjmp	.+20     	; 0x157a <conv_brk+0x15c>
    1566:	e1 14       	cp	r14, r1
    1568:	f1 04       	cpc	r15, r1
    156a:	19 f0       	breq	.+6      	; 0x1572 <conv_brk+0x154>
    156c:	d7 01       	movw	r26, r14
    156e:	8d 93       	st	X+, r24
    1570:	7d 01       	movw	r14, r26
    1572:	61 50       	subi	r22, 0x01	; 1
    1574:	b1 2c       	mov	r11, r1
    1576:	b1 f6       	brne	.-84     	; 0x1524 <conv_brk+0x106>
    1578:	02 c0       	rjmp	.+4      	; 0x157e <conv_brk+0x160>
    157a:	b1 10       	cpse	r11, r1
    157c:	82 cf       	rjmp	.-252    	; 0x1482 <conv_brk+0x64>
    157e:	e1 14       	cp	r14, r1
    1580:	f1 04       	cpc	r15, r1
    1582:	11 f0       	breq	.+4      	; 0x1588 <conv_brk+0x16a>
    1584:	f7 01       	movw	r30, r14
    1586:	10 82       	st	Z, r1
    1588:	c8 01       	movw	r24, r16
    158a:	a1 96       	adiw	r28, 0x21	; 33
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	ff 90       	pop	r15
    15a0:	ef 90       	pop	r14
    15a2:	df 90       	pop	r13
    15a4:	cf 90       	pop	r12
    15a6:	bf 90       	pop	r11
    15a8:	af 90       	pop	r10
    15aa:	9f 90       	pop	r9
    15ac:	7f 90       	pop	r7
    15ae:	6f 90       	pop	r6
    15b0:	08 95       	ret

000015b2 <vfscanf>:
    15b2:	4f 92       	push	r4
    15b4:	5f 92       	push	r5
    15b6:	7f 92       	push	r7
    15b8:	8f 92       	push	r8
    15ba:	9f 92       	push	r9
    15bc:	af 92       	push	r10
    15be:	bf 92       	push	r11
    15c0:	cf 92       	push	r12
    15c2:	df 92       	push	r13
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	1f 92       	push	r1
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	8c 01       	movw	r16, r24
    15d8:	2b 01       	movw	r4, r22
    15da:	7a 01       	movw	r14, r20
    15dc:	fc 01       	movw	r30, r24
    15de:	17 82       	std	Z+7, r1	; 0x07
    15e0:	16 82       	std	Z+6, r1	; 0x06
    15e2:	a1 2c       	mov	r10, r1
    15e4:	f0 c0       	rjmp	.+480    	; 0x17c6 <vfscanf+0x214>
    15e6:	8c 2d       	mov	r24, r12
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 07 0c 	call	0x180e	; 0x180e <isspace>
    15ee:	89 2b       	or	r24, r25
    15f0:	21 f0       	breq	.+8      	; 0x15fa <vfscanf+0x48>
    15f2:	c8 01       	movw	r24, r16
    15f4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <skip_spaces>
    15f8:	e6 c0       	rjmp	.+460    	; 0x17c6 <vfscanf+0x214>
    15fa:	f5 e2       	ldi	r31, 0x25	; 37
    15fc:	cf 12       	cpse	r12, r31
    15fe:	0a c0       	rjmp	.+20     	; 0x1614 <vfscanf+0x62>
    1600:	f2 01       	movw	r30, r4
    1602:	d3 fc       	sbrc	r13, 3
    1604:	35 91       	lpm	r19, Z+
    1606:	d3 fe       	sbrs	r13, 3
    1608:	31 91       	ld	r19, Z+
    160a:	2f 01       	movw	r4, r30
    160c:	35 32       	cpi	r19, 0x25	; 37
    160e:	71 f4       	brne	.+28     	; 0x162c <vfscanf+0x7a>
    1610:	55 e2       	ldi	r21, 0x25	; 37
    1612:	c5 2e       	mov	r12, r21
    1614:	c8 01       	movw	r24, r16
    1616:	0e 94 30 0c 	call	0x1860	; 0x1860 <fgetc>
    161a:	97 fd       	sbrc	r25, 7
    161c:	df c0       	rjmp	.+446    	; 0x17dc <vfscanf+0x22a>
    161e:	c8 16       	cp	r12, r24
    1620:	09 f4       	brne	.+2      	; 0x1624 <vfscanf+0x72>
    1622:	d1 c0       	rjmp	.+418    	; 0x17c6 <vfscanf+0x214>
    1624:	b8 01       	movw	r22, r16
    1626:	0e 94 9c 0c 	call	0x1938	; 0x1938 <ungetc>
    162a:	da c0       	rjmp	.+436    	; 0x17e0 <vfscanf+0x22e>
    162c:	3a 32       	cpi	r19, 0x2A	; 42
    162e:	41 f4       	brne	.+16     	; 0x1640 <vfscanf+0x8e>
    1630:	d3 fc       	sbrc	r13, 3
    1632:	35 91       	lpm	r19, Z+
    1634:	d3 fe       	sbrs	r13, 3
    1636:	31 91       	ld	r19, Z+
    1638:	2f 01       	movw	r4, r30
    163a:	bb 24       	eor	r11, r11
    163c:	b3 94       	inc	r11
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <vfscanf+0x90>
    1640:	b1 2c       	mov	r11, r1
    1642:	71 2c       	mov	r7, r1
    1644:	10 c0       	rjmp	.+32     	; 0x1666 <vfscanf+0xb4>
    1646:	f2 e0       	ldi	r31, 0x02	; 2
    1648:	bf 2a       	or	r11, r31
    164a:	67 2d       	mov	r22, r7
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	40 e2       	ldi	r20, 0x20	; 32
    1654:	0e 94 37 09 	call	0x126e	; 0x126e <mulacc>
    1658:	76 2e       	mov	r7, r22
    165a:	f2 01       	movw	r30, r4
    165c:	d3 fc       	sbrc	r13, 3
    165e:	35 91       	lpm	r19, Z+
    1660:	d3 fe       	sbrs	r13, 3
    1662:	31 91       	ld	r19, Z+
    1664:	2f 01       	movw	r4, r30
    1666:	23 2f       	mov	r18, r19
    1668:	20 53       	subi	r18, 0x30	; 48
    166a:	2a 30       	cpi	r18, 0x0A	; 10
    166c:	60 f3       	brcs	.-40     	; 0x1646 <vfscanf+0x94>
    166e:	b1 fe       	sbrs	r11, 1
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <vfscanf+0xc6>
    1672:	71 10       	cpse	r7, r1
    1674:	03 c0       	rjmp	.+6      	; 0x167c <vfscanf+0xca>
    1676:	b4 c0       	rjmp	.+360    	; 0x17e0 <vfscanf+0x22e>
    1678:	77 24       	eor	r7, r7
    167a:	7a 94       	dec	r7
    167c:	38 36       	cpi	r19, 0x68	; 104
    167e:	19 f0       	breq	.+6      	; 0x1686 <vfscanf+0xd4>
    1680:	3c 36       	cpi	r19, 0x6C	; 108
    1682:	99 f4       	brne	.+38     	; 0x16aa <vfscanf+0xf8>
    1684:	0a c0       	rjmp	.+20     	; 0x169a <vfscanf+0xe8>
    1686:	f2 01       	movw	r30, r4
    1688:	d3 fc       	sbrc	r13, 3
    168a:	35 91       	lpm	r19, Z+
    168c:	d3 fe       	sbrs	r13, 3
    168e:	31 91       	ld	r19, Z+
    1690:	2f 01       	movw	r4, r30
    1692:	38 36       	cpi	r19, 0x68	; 104
    1694:	51 f4       	brne	.+20     	; 0x16aa <vfscanf+0xf8>
    1696:	f8 e0       	ldi	r31, 0x08	; 8
    1698:	bf 2a       	or	r11, r31
    169a:	84 e0       	ldi	r24, 0x04	; 4
    169c:	b8 2a       	or	r11, r24
    169e:	f2 01       	movw	r30, r4
    16a0:	d3 fc       	sbrc	r13, 3
    16a2:	35 91       	lpm	r19, Z+
    16a4:	d3 fe       	sbrs	r13, 3
    16a6:	31 91       	ld	r19, Z+
    16a8:	2f 01       	movw	r4, r30
    16aa:	33 23       	and	r19, r19
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <vfscanf+0xfe>
    16ae:	98 c0       	rjmp	.+304    	; 0x17e0 <vfscanf+0x22e>
    16b0:	63 2f       	mov	r22, r19
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	87 e7       	ldi	r24, 0x77	; 119
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	39 83       	std	Y+1, r19	; 0x01
    16ba:	0e 94 0f 0c 	call	0x181e	; 0x181e <strchr_P>
    16be:	39 81       	ldd	r19, Y+1	; 0x01
    16c0:	89 2b       	or	r24, r25
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <vfscanf+0x114>
    16c4:	8d c0       	rjmp	.+282    	; 0x17e0 <vfscanf+0x22e>
    16c6:	b0 fc       	sbrc	r11, 0
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <vfscanf+0x126>
    16ca:	f7 01       	movw	r30, r14
    16cc:	c0 80       	ld	r12, Z
    16ce:	d1 80       	ldd	r13, Z+1	; 0x01
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	e8 0e       	add	r14, r24
    16d4:	f1 1c       	adc	r15, r1
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <vfscanf+0x12a>
    16d8:	c1 2c       	mov	r12, r1
    16da:	d1 2c       	mov	r13, r1
    16dc:	3e 36       	cpi	r19, 0x6E	; 110
    16de:	51 f4       	brne	.+20     	; 0x16f4 <vfscanf+0x142>
    16e0:	f8 01       	movw	r30, r16
    16e2:	46 81       	ldd	r20, Z+6	; 0x06
    16e4:	57 81       	ldd	r21, Z+7	; 0x07
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	2b 2d       	mov	r18, r11
    16ec:	c6 01       	movw	r24, r12
    16ee:	0e 94 2b 09 	call	0x1256	; 0x1256 <putval>
    16f2:	69 c0       	rjmp	.+210    	; 0x17c6 <vfscanf+0x214>
    16f4:	33 36       	cpi	r19, 0x63	; 99
    16f6:	91 f4       	brne	.+36     	; 0x171c <vfscanf+0x16a>
    16f8:	b1 fc       	sbrc	r11, 1
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <vfscanf+0x14e>
    16fc:	77 24       	eor	r7, r7
    16fe:	73 94       	inc	r7
    1700:	c8 01       	movw	r24, r16
    1702:	0e 94 30 0c 	call	0x1860	; 0x1860 <fgetc>
    1706:	97 fd       	sbrc	r25, 7
    1708:	69 c0       	rjmp	.+210    	; 0x17dc <vfscanf+0x22a>
    170a:	c1 14       	cp	r12, r1
    170c:	d1 04       	cpc	r13, r1
    170e:	19 f0       	breq	.+6      	; 0x1716 <vfscanf+0x164>
    1710:	f6 01       	movw	r30, r12
    1712:	81 93       	st	Z+, r24
    1714:	6f 01       	movw	r12, r30
    1716:	7a 94       	dec	r7
    1718:	99 f7       	brne	.-26     	; 0x1700 <vfscanf+0x14e>
    171a:	53 c0       	rjmp	.+166    	; 0x17c2 <vfscanf+0x210>
    171c:	3b 35       	cpi	r19, 0x5B	; 91
    171e:	59 f4       	brne	.+22     	; 0x1736 <vfscanf+0x184>
    1720:	92 01       	movw	r18, r4
    1722:	a6 01       	movw	r20, r12
    1724:	67 2d       	mov	r22, r7
    1726:	c8 01       	movw	r24, r16
    1728:	0e 94 0f 0a 	call	0x141e	; 0x141e <conv_brk>
    172c:	2c 01       	movw	r4, r24
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	09 f0       	breq	.+2      	; 0x1734 <vfscanf+0x182>
    1732:	47 c0       	rjmp	.+142    	; 0x17c2 <vfscanf+0x210>
    1734:	41 c0       	rjmp	.+130    	; 0x17b8 <vfscanf+0x206>
    1736:	c8 01       	movw	r24, r16
    1738:	39 83       	std	Y+1, r19	; 0x01
    173a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <skip_spaces>
    173e:	39 81       	ldd	r19, Y+1	; 0x01
    1740:	97 fd       	sbrc	r25, 7
    1742:	4c c0       	rjmp	.+152    	; 0x17dc <vfscanf+0x22a>
    1744:	3f 36       	cpi	r19, 0x6F	; 111
    1746:	59 f1       	breq	.+86     	; 0x179e <vfscanf+0x1ec>
    1748:	28 f4       	brcc	.+10     	; 0x1754 <vfscanf+0x1a2>
    174a:	34 36       	cpi	r19, 0x64	; 100
    174c:	29 f1       	breq	.+74     	; 0x1798 <vfscanf+0x1e6>
    174e:	39 36       	cpi	r19, 0x69	; 105
    1750:	49 f5       	brne	.+82     	; 0x17a4 <vfscanf+0x1f2>
    1752:	2a c0       	rjmp	.+84     	; 0x17a8 <vfscanf+0x1f6>
    1754:	33 37       	cpi	r19, 0x73	; 115
    1756:	19 f0       	breq	.+6      	; 0x175e <vfscanf+0x1ac>
    1758:	35 37       	cpi	r19, 0x75	; 117
    175a:	21 f5       	brne	.+72     	; 0x17a4 <vfscanf+0x1f2>
    175c:	1d c0       	rjmp	.+58     	; 0x1798 <vfscanf+0x1e6>
    175e:	c8 01       	movw	r24, r16
    1760:	0e 94 30 0c 	call	0x1860	; 0x1860 <fgetc>
    1764:	4c 01       	movw	r8, r24
    1766:	97 fd       	sbrc	r25, 7
    1768:	11 c0       	rjmp	.+34     	; 0x178c <vfscanf+0x1da>
    176a:	0e 94 07 0c 	call	0x180e	; 0x180e <isspace>
    176e:	89 2b       	or	r24, r25
    1770:	29 f0       	breq	.+10     	; 0x177c <vfscanf+0x1ca>
    1772:	b8 01       	movw	r22, r16
    1774:	c4 01       	movw	r24, r8
    1776:	0e 94 9c 0c 	call	0x1938	; 0x1938 <ungetc>
    177a:	08 c0       	rjmp	.+16     	; 0x178c <vfscanf+0x1da>
    177c:	c1 14       	cp	r12, r1
    177e:	d1 04       	cpc	r13, r1
    1780:	19 f0       	breq	.+6      	; 0x1788 <vfscanf+0x1d6>
    1782:	f6 01       	movw	r30, r12
    1784:	81 92       	st	Z+, r8
    1786:	6f 01       	movw	r12, r30
    1788:	7a 94       	dec	r7
    178a:	49 f7       	brne	.-46     	; 0x175e <vfscanf+0x1ac>
    178c:	c1 14       	cp	r12, r1
    178e:	d1 04       	cpc	r13, r1
    1790:	c1 f0       	breq	.+48     	; 0x17c2 <vfscanf+0x210>
    1792:	f6 01       	movw	r30, r12
    1794:	10 82       	st	Z, r1
    1796:	15 c0       	rjmp	.+42     	; 0x17c2 <vfscanf+0x210>
    1798:	f0 e2       	ldi	r31, 0x20	; 32
    179a:	bf 2a       	or	r11, r31
    179c:	05 c0       	rjmp	.+10     	; 0x17a8 <vfscanf+0x1f6>
    179e:	80 e1       	ldi	r24, 0x10	; 16
    17a0:	b8 2a       	or	r11, r24
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <vfscanf+0x1f6>
    17a4:	90 e4       	ldi	r25, 0x40	; 64
    17a6:	b9 2a       	or	r11, r25
    17a8:	2b 2d       	mov	r18, r11
    17aa:	a6 01       	movw	r20, r12
    17ac:	67 2d       	mov	r22, r7
    17ae:	c8 01       	movw	r24, r16
    17b0:	0e 94 82 09 	call	0x1304	; 0x1304 <conv_int>
    17b4:	81 11       	cpse	r24, r1
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <vfscanf+0x210>
    17b8:	f8 01       	movw	r30, r16
    17ba:	83 81       	ldd	r24, Z+3	; 0x03
    17bc:	80 73       	andi	r24, 0x30	; 48
    17be:	71 f4       	brne	.+28     	; 0x17dc <vfscanf+0x22a>
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <vfscanf+0x22e>
    17c2:	b0 fe       	sbrs	r11, 0
    17c4:	a3 94       	inc	r10
    17c6:	f8 01       	movw	r30, r16
    17c8:	d3 80       	ldd	r13, Z+3	; 0x03
    17ca:	f2 01       	movw	r30, r4
    17cc:	d3 fc       	sbrc	r13, 3
    17ce:	c5 90       	lpm	r12, Z+
    17d0:	d3 fe       	sbrs	r13, 3
    17d2:	c1 90       	ld	r12, Z+
    17d4:	2f 01       	movw	r4, r30
    17d6:	c1 10       	cpse	r12, r1
    17d8:	06 cf       	rjmp	.-500    	; 0x15e6 <vfscanf+0x34>
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <vfscanf+0x22e>
    17dc:	aa 20       	and	r10, r10
    17de:	19 f0       	breq	.+6      	; 0x17e6 <vfscanf+0x234>
    17e0:	2a 2d       	mov	r18, r10
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <vfscanf+0x238>
    17e6:	2f ef       	ldi	r18, 0xFF	; 255
    17e8:	3f ef       	ldi	r19, 0xFF	; 255
    17ea:	c9 01       	movw	r24, r18
    17ec:	0f 90       	pop	r0
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	ff 90       	pop	r15
    17f8:	ef 90       	pop	r14
    17fa:	df 90       	pop	r13
    17fc:	cf 90       	pop	r12
    17fe:	bf 90       	pop	r11
    1800:	af 90       	pop	r10
    1802:	9f 90       	pop	r9
    1804:	8f 90       	pop	r8
    1806:	7f 90       	pop	r7
    1808:	5f 90       	pop	r5
    180a:	4f 90       	pop	r4
    180c:	08 95       	ret

0000180e <isspace>:
    180e:	91 11       	cpse	r25, r1
    1810:	0c c1       	rjmp	.+536    	; 0x1a2a <__ctype_isfalse>
    1812:	80 32       	cpi	r24, 0x20	; 32
    1814:	19 f0       	breq	.+6      	; 0x181c <isspace+0xe>
    1816:	89 50       	subi	r24, 0x09	; 9
    1818:	85 50       	subi	r24, 0x05	; 5
    181a:	d0 f7       	brcc	.-12     	; 0x1810 <isspace+0x2>
    181c:	08 95       	ret

0000181e <strchr_P>:
    181e:	fc 01       	movw	r30, r24
    1820:	05 90       	lpm	r0, Z+
    1822:	06 16       	cp	r0, r22
    1824:	21 f0       	breq	.+8      	; 0x182e <strchr_P+0x10>
    1826:	00 20       	and	r0, r0
    1828:	d9 f7       	brne	.-10     	; 0x1820 <strchr_P+0x2>
    182a:	c0 01       	movw	r24, r0
    182c:	08 95       	ret
    182e:	31 97       	sbiw	r30, 0x01	; 1
    1830:	cf 01       	movw	r24, r30
    1832:	08 95       	ret

00001834 <strnlen_P>:
    1834:	fc 01       	movw	r30, r24
    1836:	05 90       	lpm	r0, Z+
    1838:	61 50       	subi	r22, 0x01	; 1
    183a:	70 40       	sbci	r23, 0x00	; 0
    183c:	01 10       	cpse	r0, r1
    183e:	d8 f7       	brcc	.-10     	; 0x1836 <strnlen_P+0x2>
    1840:	80 95       	com	r24
    1842:	90 95       	com	r25
    1844:	8e 0f       	add	r24, r30
    1846:	9f 1f       	adc	r25, r31
    1848:	08 95       	ret

0000184a <strnlen>:
    184a:	fc 01       	movw	r30, r24
    184c:	61 50       	subi	r22, 0x01	; 1
    184e:	70 40       	sbci	r23, 0x00	; 0
    1850:	01 90       	ld	r0, Z+
    1852:	01 10       	cpse	r0, r1
    1854:	d8 f7       	brcc	.-10     	; 0x184c <strnlen+0x2>
    1856:	80 95       	com	r24
    1858:	90 95       	com	r25
    185a:	8e 0f       	add	r24, r30
    185c:	9f 1f       	adc	r25, r31
    185e:	08 95       	ret

00001860 <fgetc>:
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	ec 01       	movw	r28, r24
    1866:	3b 81       	ldd	r19, Y+3	; 0x03
    1868:	30 ff       	sbrs	r19, 0
    186a:	34 c0       	rjmp	.+104    	; 0x18d4 <fgetc+0x74>
    186c:	36 ff       	sbrs	r19, 6
    186e:	0a c0       	rjmp	.+20     	; 0x1884 <fgetc+0x24>
    1870:	3f 7b       	andi	r19, 0xBF	; 191
    1872:	3b 83       	std	Y+3, r19	; 0x03
    1874:	8e 81       	ldd	r24, Y+6	; 0x06
    1876:	9f 81       	ldd	r25, Y+7	; 0x07
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	9f 83       	std	Y+7, r25	; 0x07
    187c:	8e 83       	std	Y+6, r24	; 0x06
    187e:	2a 81       	ldd	r18, Y+2	; 0x02
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	2a c0       	rjmp	.+84     	; 0x18d8 <fgetc+0x78>
    1884:	32 ff       	sbrs	r19, 2
    1886:	0f c0       	rjmp	.+30     	; 0x18a6 <fgetc+0x46>
    1888:	e8 81       	ld	r30, Y
    188a:	f9 81       	ldd	r31, Y+1	; 0x01
    188c:	80 81       	ld	r24, Z
    188e:	99 27       	eor	r25, r25
    1890:	87 fd       	sbrc	r24, 7
    1892:	90 95       	com	r25
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	19 f4       	brne	.+6      	; 0x189e <fgetc+0x3e>
    1898:	30 62       	ori	r19, 0x20	; 32
    189a:	3b 83       	std	Y+3, r19	; 0x03
    189c:	1b c0       	rjmp	.+54     	; 0x18d4 <fgetc+0x74>
    189e:	31 96       	adiw	r30, 0x01	; 1
    18a0:	f9 83       	std	Y+1, r31	; 0x01
    18a2:	e8 83       	st	Y, r30
    18a4:	0e c0       	rjmp	.+28     	; 0x18c2 <fgetc+0x62>
    18a6:	ea 85       	ldd	r30, Y+10	; 0x0a
    18a8:	fb 85       	ldd	r31, Y+11	; 0x0b
    18aa:	09 95       	icall
    18ac:	97 ff       	sbrs	r25, 7
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <fgetc+0x62>
    18b0:	2b 81       	ldd	r18, Y+3	; 0x03
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	11 f4       	brne	.+4      	; 0x18ba <fgetc+0x5a>
    18b6:	80 e1       	ldi	r24, 0x10	; 16
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <fgetc+0x5c>
    18ba:	80 e2       	ldi	r24, 0x20	; 32
    18bc:	82 2b       	or	r24, r18
    18be:	8b 83       	std	Y+3, r24	; 0x03
    18c0:	09 c0       	rjmp	.+18     	; 0x18d4 <fgetc+0x74>
    18c2:	2e 81       	ldd	r18, Y+6	; 0x06
    18c4:	3f 81       	ldd	r19, Y+7	; 0x07
    18c6:	2f 5f       	subi	r18, 0xFF	; 255
    18c8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ca:	3f 83       	std	Y+7, r19	; 0x07
    18cc:	2e 83       	std	Y+6, r18	; 0x06
    18ce:	9c 01       	movw	r18, r24
    18d0:	33 27       	eor	r19, r19
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <fgetc+0x78>
    18d4:	2f ef       	ldi	r18, 0xFF	; 255
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	c9 01       	movw	r24, r18
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	08 95       	ret

000018e0 <fputc>:
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	8c 01       	movw	r16, r24
    18ea:	eb 01       	movw	r28, r22
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	81 fd       	sbrc	r24, 1
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <fputc+0x18>
    18f2:	0f ef       	ldi	r16, 0xFF	; 255
    18f4:	1f ef       	ldi	r17, 0xFF	; 255
    18f6:	1a c0       	rjmp	.+52     	; 0x192c <fputc+0x4c>
    18f8:	82 ff       	sbrs	r24, 2
    18fa:	0d c0       	rjmp	.+26     	; 0x1916 <fputc+0x36>
    18fc:	2e 81       	ldd	r18, Y+6	; 0x06
    18fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1900:	8c 81       	ldd	r24, Y+4	; 0x04
    1902:	9d 81       	ldd	r25, Y+5	; 0x05
    1904:	28 17       	cp	r18, r24
    1906:	39 07       	cpc	r19, r25
    1908:	64 f4       	brge	.+24     	; 0x1922 <fputc+0x42>
    190a:	e8 81       	ld	r30, Y
    190c:	f9 81       	ldd	r31, Y+1	; 0x01
    190e:	01 93       	st	Z+, r16
    1910:	f9 83       	std	Y+1, r31	; 0x01
    1912:	e8 83       	st	Y, r30
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <fputc+0x42>
    1916:	e8 85       	ldd	r30, Y+8	; 0x08
    1918:	f9 85       	ldd	r31, Y+9	; 0x09
    191a:	80 2f       	mov	r24, r16
    191c:	09 95       	icall
    191e:	89 2b       	or	r24, r25
    1920:	41 f7       	brne	.-48     	; 0x18f2 <fputc+0x12>
    1922:	8e 81       	ldd	r24, Y+6	; 0x06
    1924:	9f 81       	ldd	r25, Y+7	; 0x07
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	9f 83       	std	Y+7, r25	; 0x07
    192a:	8e 83       	std	Y+6, r24	; 0x06
    192c:	c8 01       	movw	r24, r16
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	08 95       	ret

00001938 <ungetc>:
    1938:	fb 01       	movw	r30, r22
    193a:	23 81       	ldd	r18, Z+3	; 0x03
    193c:	20 ff       	sbrs	r18, 0
    193e:	13 c0       	rjmp	.+38     	; 0x1966 <ungetc+0x2e>
    1940:	26 fd       	sbrc	r18, 6
    1942:	11 c0       	rjmp	.+34     	; 0x1966 <ungetc+0x2e>
    1944:	8f 3f       	cpi	r24, 0xFF	; 255
    1946:	3f ef       	ldi	r19, 0xFF	; 255
    1948:	93 07       	cpc	r25, r19
    194a:	69 f0       	breq	.+26     	; 0x1966 <ungetc+0x2e>
    194c:	82 83       	std	Z+2, r24	; 0x02
    194e:	2f 7d       	andi	r18, 0xDF	; 223
    1950:	20 64       	ori	r18, 0x40	; 64
    1952:	23 83       	std	Z+3, r18	; 0x03
    1954:	26 81       	ldd	r18, Z+6	; 0x06
    1956:	37 81       	ldd	r19, Z+7	; 0x07
    1958:	21 50       	subi	r18, 0x01	; 1
    195a:	31 09       	sbc	r19, r1
    195c:	37 83       	std	Z+7, r19	; 0x07
    195e:	26 83       	std	Z+6, r18	; 0x06
    1960:	9c 01       	movw	r18, r24
    1962:	33 27       	eor	r19, r19
    1964:	02 c0       	rjmp	.+4      	; 0x196a <ungetc+0x32>
    1966:	2f ef       	ldi	r18, 0xFF	; 255
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	c9 01       	movw	r24, r18
    196c:	08 95       	ret

0000196e <__ultoa_invert>:
    196e:	fa 01       	movw	r30, r20
    1970:	aa 27       	eor	r26, r26
    1972:	28 30       	cpi	r18, 0x08	; 8
    1974:	51 f1       	breq	.+84     	; 0x19ca <__ultoa_invert+0x5c>
    1976:	20 31       	cpi	r18, 0x10	; 16
    1978:	81 f1       	breq	.+96     	; 0x19da <__ultoa_invert+0x6c>
    197a:	e8 94       	clt
    197c:	6f 93       	push	r22
    197e:	6e 7f       	andi	r22, 0xFE	; 254
    1980:	6e 5f       	subi	r22, 0xFE	; 254
    1982:	7f 4f       	sbci	r23, 0xFF	; 255
    1984:	8f 4f       	sbci	r24, 0xFF	; 255
    1986:	9f 4f       	sbci	r25, 0xFF	; 255
    1988:	af 4f       	sbci	r26, 0xFF	; 255
    198a:	b1 e0       	ldi	r27, 0x01	; 1
    198c:	3e d0       	rcall	.+124    	; 0x1a0a <__ultoa_invert+0x9c>
    198e:	b4 e0       	ldi	r27, 0x04	; 4
    1990:	3c d0       	rcall	.+120    	; 0x1a0a <__ultoa_invert+0x9c>
    1992:	67 0f       	add	r22, r23
    1994:	78 1f       	adc	r23, r24
    1996:	89 1f       	adc	r24, r25
    1998:	9a 1f       	adc	r25, r26
    199a:	a1 1d       	adc	r26, r1
    199c:	68 0f       	add	r22, r24
    199e:	79 1f       	adc	r23, r25
    19a0:	8a 1f       	adc	r24, r26
    19a2:	91 1d       	adc	r25, r1
    19a4:	a1 1d       	adc	r26, r1
    19a6:	6a 0f       	add	r22, r26
    19a8:	71 1d       	adc	r23, r1
    19aa:	81 1d       	adc	r24, r1
    19ac:	91 1d       	adc	r25, r1
    19ae:	a1 1d       	adc	r26, r1
    19b0:	20 d0       	rcall	.+64     	; 0x19f2 <__ultoa_invert+0x84>
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <__ultoa_invert+0x48>
    19b4:	68 94       	set
    19b6:	3f 91       	pop	r19
    19b8:	2a e0       	ldi	r18, 0x0A	; 10
    19ba:	26 9f       	mul	r18, r22
    19bc:	11 24       	eor	r1, r1
    19be:	30 19       	sub	r19, r0
    19c0:	30 5d       	subi	r19, 0xD0	; 208
    19c2:	31 93       	st	Z+, r19
    19c4:	de f6       	brtc	.-74     	; 0x197c <__ultoa_invert+0xe>
    19c6:	cf 01       	movw	r24, r30
    19c8:	08 95       	ret
    19ca:	46 2f       	mov	r20, r22
    19cc:	47 70       	andi	r20, 0x07	; 7
    19ce:	40 5d       	subi	r20, 0xD0	; 208
    19d0:	41 93       	st	Z+, r20
    19d2:	b3 e0       	ldi	r27, 0x03	; 3
    19d4:	0f d0       	rcall	.+30     	; 0x19f4 <__ultoa_invert+0x86>
    19d6:	c9 f7       	brne	.-14     	; 0x19ca <__ultoa_invert+0x5c>
    19d8:	f6 cf       	rjmp	.-20     	; 0x19c6 <__ultoa_invert+0x58>
    19da:	46 2f       	mov	r20, r22
    19dc:	4f 70       	andi	r20, 0x0F	; 15
    19de:	40 5d       	subi	r20, 0xD0	; 208
    19e0:	4a 33       	cpi	r20, 0x3A	; 58
    19e2:	18 f0       	brcs	.+6      	; 0x19ea <__ultoa_invert+0x7c>
    19e4:	49 5d       	subi	r20, 0xD9	; 217
    19e6:	31 fd       	sbrc	r19, 1
    19e8:	40 52       	subi	r20, 0x20	; 32
    19ea:	41 93       	st	Z+, r20
    19ec:	02 d0       	rcall	.+4      	; 0x19f2 <__ultoa_invert+0x84>
    19ee:	a9 f7       	brne	.-22     	; 0x19da <__ultoa_invert+0x6c>
    19f0:	ea cf       	rjmp	.-44     	; 0x19c6 <__ultoa_invert+0x58>
    19f2:	b4 e0       	ldi	r27, 0x04	; 4
    19f4:	a6 95       	lsr	r26
    19f6:	97 95       	ror	r25
    19f8:	87 95       	ror	r24
    19fa:	77 95       	ror	r23
    19fc:	67 95       	ror	r22
    19fe:	ba 95       	dec	r27
    1a00:	c9 f7       	brne	.-14     	; 0x19f4 <__ultoa_invert+0x86>
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	61 05       	cpc	r22, r1
    1a06:	71 05       	cpc	r23, r1
    1a08:	08 95       	ret
    1a0a:	9b 01       	movw	r18, r22
    1a0c:	ac 01       	movw	r20, r24
    1a0e:	0a 2e       	mov	r0, r26
    1a10:	06 94       	lsr	r0
    1a12:	57 95       	ror	r21
    1a14:	47 95       	ror	r20
    1a16:	37 95       	ror	r19
    1a18:	27 95       	ror	r18
    1a1a:	ba 95       	dec	r27
    1a1c:	c9 f7       	brne	.-14     	; 0x1a10 <__ultoa_invert+0xa2>
    1a1e:	62 0f       	add	r22, r18
    1a20:	73 1f       	adc	r23, r19
    1a22:	84 1f       	adc	r24, r20
    1a24:	95 1f       	adc	r25, r21
    1a26:	a0 1d       	adc	r26, r0
    1a28:	08 95       	ret

00001a2a <__ctype_isfalse>:
    1a2a:	99 27       	eor	r25, r25
    1a2c:	88 27       	eor	r24, r24

00001a2e <__ctype_istrue>:
    1a2e:	08 95       	ret

00001a30 <__prologue_saves__>:
    1a30:	2f 92       	push	r2
    1a32:	3f 92       	push	r3
    1a34:	4f 92       	push	r4
    1a36:	5f 92       	push	r5
    1a38:	6f 92       	push	r6
    1a3a:	7f 92       	push	r7
    1a3c:	8f 92       	push	r8
    1a3e:	9f 92       	push	r9
    1a40:	af 92       	push	r10
    1a42:	bf 92       	push	r11
    1a44:	cf 92       	push	r12
    1a46:	df 92       	push	r13
    1a48:	ef 92       	push	r14
    1a4a:	ff 92       	push	r15
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	ca 1b       	sub	r28, r26
    1a5a:	db 0b       	sbc	r29, r27
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	09 94       	ijmp

00001a68 <__epilogue_restores__>:
    1a68:	2a 88       	ldd	r2, Y+18	; 0x12
    1a6a:	39 88       	ldd	r3, Y+17	; 0x11
    1a6c:	48 88       	ldd	r4, Y+16	; 0x10
    1a6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a70:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a72:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a74:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a76:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a78:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a7a:	b9 84       	ldd	r11, Y+9	; 0x09
    1a7c:	c8 84       	ldd	r12, Y+8	; 0x08
    1a7e:	df 80       	ldd	r13, Y+7	; 0x07
    1a80:	ee 80       	ldd	r14, Y+6	; 0x06
    1a82:	fd 80       	ldd	r15, Y+5	; 0x05
    1a84:	0c 81       	ldd	r16, Y+4	; 0x04
    1a86:	1b 81       	ldd	r17, Y+3	; 0x03
    1a88:	aa 81       	ldd	r26, Y+2	; 0x02
    1a8a:	b9 81       	ldd	r27, Y+1	; 0x01
    1a8c:	ce 0f       	add	r28, r30
    1a8e:	d1 1d       	adc	r29, r1
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	ed 01       	movw	r28, r26
    1a9c:	08 95       	ret

00001a9e <_exit>:
    1a9e:	f8 94       	cli

00001aa0 <__stop_program>:
    1aa0:	ff cf       	rjmp	.-2      	; 0x1aa0 <__stop_program>
