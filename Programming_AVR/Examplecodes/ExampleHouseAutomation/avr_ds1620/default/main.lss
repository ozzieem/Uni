
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b30  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000b30  00000ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c84  00000000  00000000  00000bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001fe  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001976  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088d  00000000  00000000  00003576  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc3  00000000  00000000  00003e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  000049c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a2  00000000  00000000  00004d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012c0  00000000  00000000  0000523e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000064fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
;;;   C-prototype:  void wait_milliseconds(int milliseconds);
;;;                 Parameter 1 is passed in registerpair R24:R25
        .global wait_milliseconds				
wait_milliseconds:
wait_milliseconds_loop:
        RCALL   wait1ms
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
        SBIW    R24,1           ;Subtract R25:R24=R25:R24-1
        BRNE    wait_milliseconds_loop
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
;;;===Subroutine wait1ms===================================
;;;   C-prototype:  void wait1ms(void);
        .global wait1ms				
wait1ms:

        RCALL    wait500microseconds
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
        RCALL    wait500microseconds
        RET
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
        ;; due to the GNU C calling conventions.
				
        
        
wait_loop:
        LD       R19,X
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
        LD       R19,X
        LD       R19,X
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
        LD       R19,X
        LD       R19,X
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
        LD       R19,X
        LD       R19,X
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
        LD       R19,X
        DEC     R18
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
        BRNE    wait_loop
        
        RET
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  7a:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <test_ds1620>:

//===========================================================
//===test_ds1620=============================================
//===========================================================
void test_ds1620(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	6c 97       	sbiw	r28, 0x1c	; 28
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	int toggle=0;
	lcd4     theLCD;
	unsigned int temp=-1;
	char s[20];

	lcd4_init(&theLCD,&PORTD, &DDRD, 4000, 100);
  96:	7e 01       	movw	r14, r28
  98:	85 e1       	ldi	r24, 0x15	; 21
  9a:	e8 0e       	add	r14, r24
  9c:	f1 1c       	adc	r15, r1
  9e:	04 e6       	ldi	r16, 0x64	; 100
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	20 ea       	ldi	r18, 0xA0	; 160
  a4:	3f e0       	ldi	r19, 0x0F	; 15
  a6:	41 e3       	ldi	r20, 0x31	; 49
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	62 e3       	ldi	r22, 0x32	; 50
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	c7 01       	movw	r24, r14
  b0:	0e 94 31 01 	call	0x262	; 0x262 <lcd4_init>
	lcd4_cup_row1(&theLCD);
  b4:	c7 01       	movw	r24, r14
  b6:	0e 94 15 02 	call	0x42a	; 0x42a <lcd4_cup_row1>
	lcd4_write_string(&theLCD, "DS1620-TEST");
  ba:	60 e6       	ldi	r22, 0x60	; 96
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	c7 01       	movw	r24, r14
  c0:	0e 94 03 02 	call	0x406	; 0x406 <lcd4_write_string>
	
	wire3_init(3);
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 1b 02 	call	0x436	; 0x436 <wire3_init>

	wire3_rst_1(0); //Enable communication
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <wire3_rst_1>
	wire3_write8(0x0C);  //0x0C
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	0e 94 a3 02 	call	0x546	; 0x546 <wire3_write8>
	wire3_write8(0x0A); //Normal CPU-communication
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	0e 94 a3 02 	call	0x546	; 0x546 <wire3_write8>
	wire3_rst_0(0); //Disable communication
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 4f 02 	call	0x49e	; 0x49e <wire3_rst_0>

	wire3_rst_1(0); //Enable communication
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <wire3_rst_1>
	wire3_write8(0xEE);  //0xEE
  f0:	8e ee       	ldi	r24, 0xEE	; 238
  f2:	0e 94 a3 02 	call	0x546	; 0x546 <wire3_write8>
	wire3_rst_0(0); //Disable communication
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 4f 02 	call	0x49e	; 0x49e <wire3_rst_0>
//===========================================================
//===test_ds1620=============================================
//===========================================================
void test_ds1620(void)
{
	int toggle=0;
  fe:	a1 2c       	mov	r10, r1
 100:	b1 2c       	mov	r11, r1
	{
		//wire3_ds1620_temperature( 0, &temp);
		if ( (toggle = (! toggle)) )
			sprintf(s,"%3d %c%c  %c",temp, 0xDF, 'C', '.');
		else
			sprintf(s,"%3d %c%c  %c",temp, 0xDF, 'C', ' ');
 102:	80 e2       	ldi	r24, 0x20	; 32
 104:	68 2e       	mov	r6, r24
 106:	93 e4       	ldi	r25, 0x43	; 67
 108:	89 2e       	mov	r8, r25
 10a:	2f ed       	ldi	r18, 0xDF	; 223
 10c:	72 2e       	mov	r7, r18
 10e:	99 24       	eor	r9, r9
 110:	9a 94       	dec	r9
 112:	3c e6       	ldi	r19, 0x6C	; 108
 114:	c3 2e       	mov	r12, r19
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	d3 2e       	mov	r13, r19
 11a:	8e 01       	movw	r16, r28
 11c:	0f 5f       	subi	r16, 0xFF	; 255
 11e:	1f 4f       	sbci	r17, 0xFF	; 255

	while (1)
	{
		//wire3_ds1620_temperature( 0, &temp);
		if ( (toggle = (! toggle)) )
			sprintf(s,"%3d %c%c  %c",temp, 0xDF, 'C', '.');
 120:	4e e2       	ldi	r20, 0x2E	; 46
 122:	54 2e       	mov	r5, r20
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	a9 26       	eor	r10, r25


	while (1)
	{
		//wire3_ds1620_temperature( 0, &temp);
		if ( (toggle = (! toggle)) )
 128:	a1 14       	cp	r10, r1
 12a:	b1 04       	cpc	r11, r1
 12c:	19 f0       	breq	.+6      	; 0x134 <test_ds1620+0xb2>
			sprintf(s,"%3d %c%c  %c",temp, 0xDF, 'C', '.');
 12e:	1f 92       	push	r1
 130:	5f 92       	push	r5
 132:	02 c0       	rjmp	.+4      	; 0x138 <test_ds1620+0xb6>
		else
			sprintf(s,"%3d %c%c  %c",temp, 0xDF, 'C', ' ');
 134:	1f 92       	push	r1
 136:	6f 92       	push	r6
 138:	1f 92       	push	r1
 13a:	8f 92       	push	r8
 13c:	1f 92       	push	r1
 13e:	7f 92       	push	r7
 140:	9f 92       	push	r9
 142:	9f 92       	push	r9
 144:	df 92       	push	r13
 146:	cf 92       	push	r12
 148:	1f 93       	push	r17
 14a:	0f 93       	push	r16
 14c:	0e 94 c1 02 	call	0x582	; 0x582 <sprintf>
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
		lcd4_cup_row2(&theLCD);
 15a:	c7 01       	movw	r24, r14
 15c:	0e 94 18 02 	call	0x430	; 0x430 <lcd4_cup_row2>
		lcd4_write_string(&theLCD, s);
 160:	b8 01       	movw	r22, r16
 162:	c7 01       	movw	r24, r14
 164:	0e 94 03 02 	call	0x406	; 0x406 <lcd4_write_string>
	}
 168:	dd cf       	rjmp	.-70     	; 0x124 <test_ds1620+0xa2>

0000016a <main>:
//===main====================================================
//===========================================================
int main()
{

	test_ds1620();
 16a:	0e 94 41 00 	call	0x82	; 0x82 <test_ds1620>

0000016e <lcd4_delay>:
/**  \ingroup lcd4
    Private method to do an internal delay when accessing the LCD.
    \param this Pointer to an lcd4 object/variable.
 */
void lcd4_delay(lcd4 *this)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <lcd4_delay+0x6>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
  volatile int i;
  for (i=0; i<this->del; i++)
 178:	1a 82       	std	Y+2, r1	; 0x02
 17a:	19 82       	std	Y+1, r1	; 0x01
 17c:	fc 01       	movw	r30, r24
 17e:	24 81       	ldd	r18, Z+4	; 0x04
 180:	35 81       	ldd	r19, Z+5	; 0x05
 182:	05 c0       	rjmp	.+10     	; 0x18e <lcd4_delay+0x20>
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	9a 81       	ldd	r25, Y+2	; 0x02
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	9a 83       	std	Y+2, r25	; 0x02
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	9a 81       	ldd	r25, Y+2	; 0x02
 192:	82 17       	cp	r24, r18
 194:	93 07       	cpc	r25, r19
 196:	b4 f3       	brlt	.-20     	; 0x184 <lcd4_delay+0x16>
    ;
}
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <lcd4_delaye>:
/** \ingroup lcd4
    Private method to do an internal delay when accessing the LCD.
    \param this Pointer to an lcd4 object/variable.
 */
void lcd4_delaye(lcd4 *this)
{
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <lcd4_delaye+0x6>
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
  volatile int i;
  for (i=0; i<this->delE; i++)
 1ac:	1a 82       	std	Y+2, r1	; 0x02
 1ae:	19 82       	std	Y+1, r1	; 0x01
 1b0:	fc 01       	movw	r30, r24
 1b2:	26 81       	ldd	r18, Z+6	; 0x06
 1b4:	37 81       	ldd	r19, Z+7	; 0x07
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <lcd4_delaye+0x20>
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	9a 81       	ldd	r25, Y+2	; 0x02
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	9a 83       	std	Y+2, r25	; 0x02
 1c0:	89 83       	std	Y+1, r24	; 0x01
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	82 17       	cp	r24, r18
 1c8:	93 07       	cpc	r25, r19
 1ca:	b4 f3       	brlt	.-20     	; 0x1b8 <lcd4_delaye+0x16>
    ;
}
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <lcd4_command>:
    \param this Pointer to an lcd4 object/variable.
    \param c Command to the LCD.
    
 */
void lcd4_command(lcd4 *this, char c)
{
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	ec 01       	movw	r28, r24
 1e0:	16 2f       	mov	r17, r22
  char t;
 
  // Bits D7-D4
  t=c >> 4;
  t=t & 0x0F;
 1e2:	06 2f       	mov	r16, r22
 1e4:	02 95       	swap	r16
 1e6:	0f 70       	andi	r16, 0x0F	; 15
  *this->port = (*this->port & 0xC0) | t; lcd4_delaye(this);   
 1e8:	e8 81       	ld	r30, Y
 1ea:	f9 81       	ldd	r31, Y+1	; 0x01
 1ec:	80 81       	ld	r24, Z
 1ee:	80 7c       	andi	r24, 0xC0	; 192
 1f0:	80 2b       	or	r24, r16
 1f2:	80 83       	st	Z, r24
 1f4:	ce 01       	movw	r24, r28
 1f6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  t = t | MASK_E;      // E=High
  *this->port = (*this->port & 0xC0) | t; lcd4_delaye(this);
 1fa:	e8 81       	ld	r30, Y
 1fc:	f9 81       	ldd	r31, Y+1	; 0x01
 1fe:	80 81       	ld	r24, Z
 200:	80 7c       	andi	r24, 0xC0	; 192
 
  // Bits D7-D4
  t=c >> 4;
  t=t & 0x0F;
  *this->port = (*this->port & 0xC0) | t; lcd4_delaye(this);   
  t = t | MASK_E;      // E=High
 202:	80 61       	ori	r24, 0x10	; 16
  *this->port = (*this->port & 0xC0) | t; lcd4_delaye(this);
 204:	80 2b       	or	r24, r16
 206:	80 83       	st	Z, r24
 208:	ce 01       	movw	r24, r28
 20a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  t = t & (~MASK_E);   // E=Low
  *this->port = (*this->port & 0xC0) | t;
 20e:	e8 81       	ld	r30, Y
 210:	f9 81       	ldd	r31, Y+1	; 0x01
 212:	80 81       	ld	r24, Z
 214:	80 7c       	andi	r24, 0xC0	; 192
 216:	80 2b       	or	r24, r16
 218:	80 83       	st	Z, r24
  lcd4_delay(this);
 21a:	ce 01       	movw	r24, r28
 21c:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd4_delay>

  // Bits D3-D0
  t = c;
  t=t & 0x0F;
 220:	1f 70       	andi	r17, 0x0F	; 15
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
 222:	e8 81       	ld	r30, Y
 224:	f9 81       	ldd	r31, Y+1	; 0x01
 226:	80 81       	ld	r24, Z
 228:	80 7c       	andi	r24, 0xC0	; 192
 22a:	81 2b       	or	r24, r17
 22c:	80 83       	st	Z, r24
 22e:	ce 01       	movw	r24, r28
 230:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  t = t | MASK_E;      // E=High
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
 234:	e8 81       	ld	r30, Y
 236:	f9 81       	ldd	r31, Y+1	; 0x01
 238:	80 81       	ld	r24, Z
 23a:	80 7c       	andi	r24, 0xC0	; 192

  // Bits D3-D0
  t = c;
  t=t & 0x0F;
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
  t = t | MASK_E;      // E=High
 23c:	80 61       	ori	r24, 0x10	; 16
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
 23e:	81 2b       	or	r24, r17
 240:	80 83       	st	Z, r24
 242:	ce 01       	movw	r24, r28
 244:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  t = t & (~MASK_E);   // E=Low
  *this->port =  (*this->port & 0xC0) | t;
 248:	e8 81       	ld	r30, Y
 24a:	f9 81       	ldd	r31, Y+1	; 0x01
 24c:	80 81       	ld	r24, Z
 24e:	80 7c       	andi	r24, 0xC0	; 192
 250:	81 2b       	or	r24, r17
 252:	80 83       	st	Z, r24
  lcd4_delay(this);
 254:	ce 01       	movw	r24, r28
  
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
  t = t | MASK_E;      // E=High
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
  t = t & (~MASK_E);   // E=Low
  *this->port =  (*this->port & 0xC0) | t;
  lcd4_delay(this);
 25e:	0c 94 b7 00 	jmp	0x16e	; 0x16e <lcd4_delay>

00000262 <lcd4_init>:
    \param ddr  Address to the data direction register associated with the port.
    \param del  Delay parameter, should be tuned, start with 2000.
    \param delE Delay parameter, should be tuned, start with 20.
 */
void lcd4_init(lcd4 *this, volatile unsigned char *port, volatile unsigned char *ddr, int del, int delE)
{
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	7c 01       	movw	r14, r24
 270:	eb 01       	movw	r28, r22
  this->port=port;
 272:	fc 01       	movw	r30, r24
 274:	71 83       	std	Z+1, r23	; 0x01
 276:	60 83       	st	Z, r22
  this->ddr =ddr;
 278:	53 83       	std	Z+3, r21	; 0x03
 27a:	42 83       	std	Z+2, r20	; 0x02
  this->del =del;
 27c:	35 83       	std	Z+5, r19	; 0x05
 27e:	24 83       	std	Z+4, r18	; 0x04
  this->delE=delE;
 280:	17 83       	std	Z+7, r17	; 0x07
 282:	06 83       	std	Z+6, r16	; 0x06

  *ddr = *ddr | 0x3F;
 284:	fa 01       	movw	r30, r20
 286:	80 81       	ld	r24, Z
 288:	8f 63       	ori	r24, 0x3F	; 63
 28a:	80 83       	st	Z, r24
  *port= *port & 0xC0;
 28c:	88 81       	ld	r24, Y
 28e:	80 7c       	andi	r24, 0xC0	; 192
 290:	88 83       	st	Y, r24
  lcd4_delay(this);
 292:	c7 01       	movw	r24, r14
 294:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd4_delay>

  *port=(*port & 0xC0) | 0x03; lcd4_delaye(this);
 298:	88 81       	ld	r24, Y
 29a:	80 7c       	andi	r24, 0xC0	; 192
 29c:	83 60       	ori	r24, 0x03	; 3
 29e:	88 83       	st	Y, r24
 2a0:	c7 01       	movw	r24, r14
 2a2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  *port=(*port & 0xC0) | 0x03 |  MASK_E; lcd4_delaye(this);
 2a6:	88 81       	ld	r24, Y
 2a8:	80 7c       	andi	r24, 0xC0	; 192
 2aa:	83 61       	ori	r24, 0x13	; 19
 2ac:	88 83       	st	Y, r24
 2ae:	c7 01       	movw	r24, r14
 2b0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  *port=(*port & 0xC0) | 0x03; 
 2b4:	88 81       	ld	r24, Y
 2b6:	80 7c       	andi	r24, 0xC0	; 192
 2b8:	83 60       	ori	r24, 0x03	; 3
 2ba:	88 83       	st	Y, r24
  lcd4_delay(this);
 2bc:	c7 01       	movw	r24, r14
 2be:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd4_delay>

  *port=(*port & 0xC0) | 0x03; lcd4_delaye(this);
 2c2:	88 81       	ld	r24, Y
 2c4:	80 7c       	andi	r24, 0xC0	; 192
 2c6:	83 60       	ori	r24, 0x03	; 3
 2c8:	88 83       	st	Y, r24
 2ca:	c7 01       	movw	r24, r14
 2cc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  *port=(*port & 0xC0) | 0x03 |  MASK_E; lcd4_delaye(this);
 2d0:	88 81       	ld	r24, Y
 2d2:	80 7c       	andi	r24, 0xC0	; 192
 2d4:	83 61       	ori	r24, 0x13	; 19
 2d6:	88 83       	st	Y, r24
 2d8:	c7 01       	movw	r24, r14
 2da:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  *port=(*port & 0xC0) | 0x03;
 2de:	88 81       	ld	r24, Y
 2e0:	80 7c       	andi	r24, 0xC0	; 192
 2e2:	83 60       	ori	r24, 0x03	; 3
 2e4:	88 83       	st	Y, r24
  lcd4_delay(this);
 2e6:	c7 01       	movw	r24, r14
 2e8:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd4_delay>

  *port=(*port & 0xC0) | 0x03; lcd4_delaye(this);
 2ec:	88 81       	ld	r24, Y
 2ee:	80 7c       	andi	r24, 0xC0	; 192
 2f0:	83 60       	ori	r24, 0x03	; 3
 2f2:	88 83       	st	Y, r24
 2f4:	c7 01       	movw	r24, r14
 2f6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  *port=(*port & 0xC0) | 0x03 |  MASK_E; lcd4_delaye(this);
 2fa:	88 81       	ld	r24, Y
 2fc:	80 7c       	andi	r24, 0xC0	; 192
 2fe:	83 61       	ori	r24, 0x13	; 19
 300:	88 83       	st	Y, r24
 302:	c7 01       	movw	r24, r14
 304:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  *port=(*port & 0xC0) | 0x03;
 308:	88 81       	ld	r24, Y
 30a:	80 7c       	andi	r24, 0xC0	; 192
 30c:	83 60       	ori	r24, 0x03	; 3
 30e:	88 83       	st	Y, r24
  lcd4_delay(this);
 310:	c7 01       	movw	r24, r14
 312:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd4_delay>


  *port=(*port & 0xC0) | 0x02; lcd4_delaye(this);
 316:	88 81       	ld	r24, Y
 318:	80 7c       	andi	r24, 0xC0	; 192
 31a:	82 60       	ori	r24, 0x02	; 2
 31c:	88 83       	st	Y, r24
 31e:	c7 01       	movw	r24, r14
 320:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  *port=(*port & 0xC0) | 0x02 |  MASK_E; lcd4_delaye(this);
 324:	88 81       	ld	r24, Y
 326:	80 7c       	andi	r24, 0xC0	; 192
 328:	82 61       	ori	r24, 0x12	; 18
 32a:	88 83       	st	Y, r24
 32c:	c7 01       	movw	r24, r14
 32e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  *port=(*port & 0xC0) | 0x02 ;
 332:	88 81       	ld	r24, Y
 334:	80 7c       	andi	r24, 0xC0	; 192
 336:	82 60       	ori	r24, 0x02	; 2
 338:	88 83       	st	Y, r24
  lcd4_delay(this);
 33a:	c7 01       	movw	r24, r14
 33c:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd4_delay>

  lcd4_command(this, 0x28);
 340:	68 e2       	ldi	r22, 0x28	; 40
 342:	c7 01       	movw	r24, r14
 344:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd4_command>
  lcd4_command(this, 0x0C);
 348:	6c e0       	ldi	r22, 0x0C	; 12
 34a:	c7 01       	movw	r24, r14
 34c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd4_command>
  lcd4_command(this, 0x01);
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	c7 01       	movw	r24, r14
 354:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd4_command>
  lcd4_command(this, 0x06);
 358:	66 e0       	ldi	r22, 0x06	; 6
 35a:	c7 01       	movw	r24, r14

}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
  lcd4_delay(this);

  lcd4_command(this, 0x28);
  lcd4_command(this, 0x0C);
  lcd4_command(this, 0x01);
  lcd4_command(this, 0x06);
 368:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <lcd4_command>

0000036c <lcd4_write_char>:
    \param this Pointer to an lcd4 object/variable.
    \param c Character to be written at actual cursor position on the LCD.
    
 */
void lcd4_write_char(lcd4 *this, char c)
{
 36c:	ff 92       	push	r15
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	ec 01       	movw	r28, r24
 378:	06 2f       	mov	r16, r22
  char t;
 
  // Bits D7-D4
  t=c >> 4;
  t=(t & 0x0F) | MASK_RS;
 37a:	f6 2e       	mov	r15, r22
 37c:	f2 94       	swap	r15
 37e:	8f e0       	ldi	r24, 0x0F	; 15
 380:	f8 22       	and	r15, r24
 382:	1f 2d       	mov	r17, r15
 384:	10 62       	ori	r17, 0x20	; 32
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
 386:	e8 81       	ld	r30, Y
 388:	f9 81       	ldd	r31, Y+1	; 0x01
 38a:	80 81       	ld	r24, Z
 38c:	80 7c       	andi	r24, 0xC0	; 192
 38e:	81 2b       	or	r24, r17
 390:	80 83       	st	Z, r24
 392:	ce 01       	movw	r24, r28
 394:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  t = t | MASK_E;      // E=High
  *this->port =  (*this->port & 0xC0) | t;           lcd4_delaye(this);
 398:	e8 81       	ld	r30, Y
 39a:	f9 81       	ldd	r31, Y+1	; 0x01
 39c:	80 81       	ld	r24, Z
 39e:	80 7c       	andi	r24, 0xC0	; 192
 
  // Bits D7-D4
  t=c >> 4;
  t=(t & 0x0F) | MASK_RS;
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
  t = t | MASK_E;      // E=High
 3a0:	80 63       	ori	r24, 0x30	; 48
  *this->port =  (*this->port & 0xC0) | t;           lcd4_delaye(this);
 3a2:	8f 29       	or	r24, r15
 3a4:	80 83       	st	Z, r24
 3a6:	ce 01       	movw	r24, r28
 3a8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  t = t & (~MASK_E);   // E=Low
  *this->port =  (*this->port & 0xC0) | t;
 3ac:	e8 81       	ld	r30, Y
 3ae:	f9 81       	ldd	r31, Y+1	; 0x01
 3b0:	80 81       	ld	r24, Z
 3b2:	80 7c       	andi	r24, 0xC0	; 192
 3b4:	81 2b       	or	r24, r17
 3b6:	80 83       	st	Z, r24
  lcd4_delay(this);
 3b8:	ce 01       	movw	r24, r28
 3ba:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd4_delay>

  // Bits D3-D0
  t = c ;
  t=(t & 0x0F) | MASK_RS;
 3be:	0f 70       	andi	r16, 0x0F	; 15
 3c0:	10 2f       	mov	r17, r16
 3c2:	10 62       	ori	r17, 0x20	; 32
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
 3c4:	e8 81       	ld	r30, Y
 3c6:	f9 81       	ldd	r31, Y+1	; 0x01
 3c8:	80 81       	ld	r24, Z
 3ca:	80 7c       	andi	r24, 0xC0	; 192
 3cc:	81 2b       	or	r24, r17
 3ce:	80 83       	st	Z, r24
 3d0:	ce 01       	movw	r24, r28
 3d2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  t = t | MASK_E;      // E=High
  *this->port =  (*this->port & 0xC0) | t;           lcd4_delaye(this);
 3d6:	e8 81       	ld	r30, Y
 3d8:	f9 81       	ldd	r31, Y+1	; 0x01
 3da:	80 81       	ld	r24, Z
 3dc:	80 7c       	andi	r24, 0xC0	; 192

  // Bits D3-D0
  t = c ;
  t=(t & 0x0F) | MASK_RS;
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
  t = t | MASK_E;      // E=High
 3de:	80 63       	ori	r24, 0x30	; 48
  *this->port =  (*this->port & 0xC0) | t;           lcd4_delaye(this);
 3e0:	80 2b       	or	r24, r16
 3e2:	80 83       	st	Z, r24
 3e4:	ce 01       	movw	r24, r28
 3e6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd4_delaye>
  t = t & (~MASK_E);   // E=Low
  *this->port =  (*this->port & 0xC0) | t;
 3ea:	e8 81       	ld	r30, Y
 3ec:	f9 81       	ldd	r31, Y+1	; 0x01
 3ee:	80 81       	ld	r24, Z
 3f0:	80 7c       	andi	r24, 0xC0	; 192
 3f2:	81 2b       	or	r24, r17
 3f4:	80 83       	st	Z, r24
  lcd4_delay(this);
 3f6:	ce 01       	movw	r24, r28
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	ff 90       	pop	r15
  *this->port =  (*this->port & 0xC0) | t; lcd4_delaye(this);
  t = t | MASK_E;      // E=High
  *this->port =  (*this->port & 0xC0) | t;           lcd4_delaye(this);
  t = t & (~MASK_E);   // E=Low
  *this->port =  (*this->port & 0xC0) | t;
  lcd4_delay(this);
 402:	0c 94 b7 00 	jmp	0x16e	; 0x16e <lcd4_delay>

00000406 <lcd4_write_string>:
    Write of a string with start from the current cursor position on the LCD.
    \param this Pointer to an lcd4 object/variable.
    \param s Pointer to the start of the string that shall be written on the LCD.
 */
void lcd4_write_string(lcd4 *this, char *s)
{
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	8c 01       	movw	r16, r24
 410:	eb 01       	movw	r28, r22
  int i=0;
  
  while ( s[i] != '\0' )
 412:	03 c0       	rjmp	.+6      	; 0x41a <lcd4_write_string+0x14>
    {
        lcd4_write_char(this, s[i]);
 414:	c8 01       	movw	r24, r16
 416:	0e 94 b6 01 	call	0x36c	; 0x36c <lcd4_write_char>
 */
void lcd4_write_string(lcd4 *this, char *s)
{
  int i=0;
  
  while ( s[i] != '\0' )
 41a:	69 91       	ld	r22, Y+
 41c:	61 11       	cpse	r22, r1
 41e:	fa cf       	rjmp	.-12     	; 0x414 <lcd4_write_string+0xe>
    {
        lcd4_write_char(this, s[i]);
        i++;
    }
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	08 95       	ret

0000042a <lcd4_cup_row1>:
/** \ingroup lcd4
    Position of the cursor to row 1 and column 1.
    \param this Pointer to an lcd4 object/variable.
 */
void lcd4_cup_row1(lcd4 *this)
{ lcd4_command(this, CmdCUP+0); }
 42a:	60 e8       	ldi	r22, 0x80	; 128
 42c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <lcd4_command>

00000430 <lcd4_cup_row2>:
    Position of the cursor to row 2 and column 1.
    \param this Pointer to an lcd4 object/variable.
 */
void lcd4_cup_row2(lcd4 *this)
{ 
  lcd4_command(this, CmdCUP+0x40 );  //2004-05-25 constant changed from 56 to 0x40
 430:	60 ec       	ldi	r22, 0xC0	; 192
 432:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <lcd4_command>

00000436 <wire3_init>:
 * Init of 3 WIRE port on the AVR.
 * \param n_rst Numbers of RST-signals to activate.
 */
void wire3_init(int n_rst)
{
	WIRE3_DDR.dq  =1;
 436:	d0 9a       	sbi	0x1a, 0	; 26
	WIRE3_DDR.clk =1;
 438:	d1 9a       	sbi	0x1a, 1	; 26

	if ( n_rst >= 1 ) WIRE3_DDR.rst0=1;
 43a:	18 16       	cp	r1, r24
 43c:	19 06       	cpc	r1, r25
 43e:	ac f4       	brge	.+42     	; 0x46a <__stack+0xb>
 440:	d2 9a       	sbi	0x1a, 2	; 26
	if ( n_rst >= 2 ) WIRE3_DDR.rst1=1;
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	91 05       	cpc	r25, r1
 446:	89 f0       	breq	.+34     	; 0x46a <__stack+0xb>
 448:	d3 9a       	sbi	0x1a, 3	; 26
	if ( n_rst >= 3 ) WIRE3_DDR.rst2=1;
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	91 05       	cpc	r25, r1
 44e:	69 f0       	breq	.+26     	; 0x46a <__stack+0xb>
 450:	d4 9a       	sbi	0x1a, 4	; 26
	if ( n_rst >= 4 ) WIRE3_DDR.rst3=1;
 452:	83 30       	cpi	r24, 0x03	; 3
 454:	91 05       	cpc	r25, r1
 456:	49 f0       	breq	.+18     	; 0x46a <__stack+0xb>
 458:	d5 9a       	sbi	0x1a, 5	; 26
	if ( n_rst >= 5 ) WIRE3_DDR.rst4=1;
 45a:	84 30       	cpi	r24, 0x04	; 4
 45c:	91 05       	cpc	r25, r1
 45e:	29 f0       	breq	.+10     	; 0x46a <__stack+0xb>
 460:	d6 9a       	sbi	0x1a, 6	; 26
	if ( n_rst >= 6 ) WIRE3_DDR.rst5=1;
 462:	85 30       	cpi	r24, 0x05	; 5
 464:	91 05       	cpc	r25, r1
 466:	09 f0       	breq	.+2      	; 0x46a <__stack+0xb>
 468:	d7 9a       	sbi	0x1a, 7	; 26

	WIRE3_PORT.dq  =0;
 46a:	d8 98       	cbi	0x1b, 0	; 27
	WIRE3_PORT.clk =0;
 46c:	d9 98       	cbi	0x1b, 1	; 27

	if ( n_rst >= 1 ) WIRE3_PORT.rst0=0;
 46e:	18 16       	cp	r1, r24
 470:	19 06       	cpc	r1, r25
 472:	a4 f4       	brge	.+40     	; 0x49c <__stack+0x3d>
 474:	da 98       	cbi	0x1b, 2	; 27
	if ( n_rst >= 2 ) WIRE3_PORT.rst1=0;
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	91 05       	cpc	r25, r1
 47a:	81 f0       	breq	.+32     	; 0x49c <__stack+0x3d>
 47c:	db 98       	cbi	0x1b, 3	; 27
	if ( n_rst >= 3 ) WIRE3_PORT.rst2=0;
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	91 05       	cpc	r25, r1
 482:	61 f0       	breq	.+24     	; 0x49c <__stack+0x3d>
 484:	dc 98       	cbi	0x1b, 4	; 27
	if ( n_rst >= 4 ) WIRE3_PORT.rst3=0;
 486:	83 30       	cpi	r24, 0x03	; 3
 488:	91 05       	cpc	r25, r1
 48a:	41 f0       	breq	.+16     	; 0x49c <__stack+0x3d>
 48c:	dd 98       	cbi	0x1b, 5	; 27
	if ( n_rst >= 5 ) WIRE3_PORT.rst4=0;
 48e:	84 30       	cpi	r24, 0x04	; 4
 490:	91 05       	cpc	r25, r1
 492:	21 f0       	breq	.+8      	; 0x49c <__stack+0x3d>
 494:	de 98       	cbi	0x1b, 6	; 27
	if ( n_rst >= 6 ) WIRE3_PORT.rst5=0;
 496:	05 97       	sbiw	r24, 0x05	; 5
 498:	09 f0       	breq	.+2      	; 0x49c <__stack+0x3d>
 49a:	df 98       	cbi	0x1b, 7	; 27
 49c:	08 95       	ret

0000049e <wire3_rst_0>:
/**
 * RST signal is set to 0.
 */
void wire3_rst_0(int no)
{
	switch ( no )
 49e:	82 30       	cpi	r24, 0x02	; 2
 4a0:	91 05       	cpc	r25, r1
 4a2:	89 f0       	breq	.+34     	; 0x4c6 <wire3_rst_0+0x28>
 4a4:	2c f4       	brge	.+10     	; 0x4b0 <wire3_rst_0+0x12>
 4a6:	00 97       	sbiw	r24, 0x00	; 0
 4a8:	51 f0       	breq	.+20     	; 0x4be <wire3_rst_0+0x20>
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	99 f4       	brne	.+38     	; 0x4d4 <wire3_rst_0+0x36>
 4ae:	09 c0       	rjmp	.+18     	; 0x4c2 <wire3_rst_0+0x24>
 4b0:	84 30       	cpi	r24, 0x04	; 4
 4b2:	91 05       	cpc	r25, r1
 4b4:	61 f0       	breq	.+24     	; 0x4ce <wire3_rst_0+0x30>
 4b6:	4c f0       	brlt	.+18     	; 0x4ca <wire3_rst_0+0x2c>
 4b8:	05 97       	sbiw	r24, 0x05	; 5
 4ba:	61 f4       	brne	.+24     	; 0x4d4 <wire3_rst_0+0x36>
 4bc:	0a c0       	rjmp	.+20     	; 0x4d2 <wire3_rst_0+0x34>
	{
		case 0: WIRE3_PORT.rst0=0; break;
 4be:	da 98       	cbi	0x1b, 2	; 27
 4c0:	08 95       	ret
		case 1: WIRE3_PORT.rst1=0; break;
 4c2:	db 98       	cbi	0x1b, 3	; 27
 4c4:	08 95       	ret
		case 2: WIRE3_PORT.rst2=0; break;
 4c6:	dc 98       	cbi	0x1b, 4	; 27
 4c8:	08 95       	ret
		case 3: WIRE3_PORT.rst3=0; break;
 4ca:	dd 98       	cbi	0x1b, 5	; 27
 4cc:	08 95       	ret
		case 4: WIRE3_PORT.rst4=0; break;
 4ce:	de 98       	cbi	0x1b, 6	; 27
 4d0:	08 95       	ret
		case 5: WIRE3_PORT.rst5=0; break;
 4d2:	df 98       	cbi	0x1b, 7	; 27
 4d4:	08 95       	ret

000004d6 <wire3_clock_pulse>:
/**
 * Clock pulse generation.
 */
void wire3_clock_pulse()
{
	WIRE3_PORT.clk = 0;
 4d6:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	8a 95       	dec	r24
 4dc:	f1 f7       	brne	.-4      	; 0x4da <wire3_clock_pulse+0x4>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <wire3_clock_pulse+0xa>
	_delay_us(1);
	WIRE3_PORT.clk = 1;
 4e0:	d9 9a       	sbi	0x1b, 1	; 27
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	8a 95       	dec	r24
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <wire3_clock_pulse+0xe>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <wire3_clock_pulse+0x14>
 4ea:	08 95       	ret

000004ec <wire3_clock_0>:
/**
 * Clock set to 0
 */
void wire3_clock_0(void)
{
	WIRE3_PORT.clk = 0;
 4ec:	d9 98       	cbi	0x1b, 1	; 27
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	8a 95       	dec	r24
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <wire3_clock_0+0x4>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <wire3_clock_0+0xa>
 4f6:	08 95       	ret

000004f8 <wire3_rst_1>:

/**
 * RST signal is set to 1
 */
void wire3_rst_1(int no)
{
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	ec 01       	movw	r28, r24
	wire3_clock_0(); //DS1302 needs this
 4fe:	0e 94 76 02 	call	0x4ec	; 0x4ec <wire3_clock_0>
 502:	8d e0       	ldi	r24, 0x0D	; 13
 504:	8a 95       	dec	r24
 506:	f1 f7       	brne	.-4      	; 0x504 <wire3_rst_1+0xc>
 508:	00 00       	nop
	_delay_us(5);
	switch ( no )
 50a:	c2 30       	cpi	r28, 0x02	; 2
 50c:	d1 05       	cpc	r29, r1
 50e:	89 f0       	breq	.+34     	; 0x532 <wire3_rst_1+0x3a>
 510:	2c f4       	brge	.+10     	; 0x51c <wire3_rst_1+0x24>
 512:	20 97       	sbiw	r28, 0x00	; 0
 514:	51 f0       	breq	.+20     	; 0x52a <wire3_rst_1+0x32>
 516:	21 97       	sbiw	r28, 0x01	; 1
 518:	99 f4       	brne	.+38     	; 0x540 <wire3_rst_1+0x48>
 51a:	09 c0       	rjmp	.+18     	; 0x52e <wire3_rst_1+0x36>
 51c:	c4 30       	cpi	r28, 0x04	; 4
 51e:	d1 05       	cpc	r29, r1
 520:	61 f0       	breq	.+24     	; 0x53a <wire3_rst_1+0x42>
 522:	4c f0       	brlt	.+18     	; 0x536 <wire3_rst_1+0x3e>
 524:	25 97       	sbiw	r28, 0x05	; 5
 526:	61 f4       	brne	.+24     	; 0x540 <wire3_rst_1+0x48>
 528:	0a c0       	rjmp	.+20     	; 0x53e <wire3_rst_1+0x46>
	{
		case 0: WIRE3_PORT.rst0=1; break;
 52a:	da 9a       	sbi	0x1b, 2	; 27
 52c:	09 c0       	rjmp	.+18     	; 0x540 <wire3_rst_1+0x48>
		case 1: WIRE3_PORT.rst1=1; break;
 52e:	db 9a       	sbi	0x1b, 3	; 27
 530:	07 c0       	rjmp	.+14     	; 0x540 <wire3_rst_1+0x48>
		case 2: WIRE3_PORT.rst2=1; break;
 532:	dc 9a       	sbi	0x1b, 4	; 27
 534:	05 c0       	rjmp	.+10     	; 0x540 <wire3_rst_1+0x48>
		case 3: WIRE3_PORT.rst3=1; break;
 536:	dd 9a       	sbi	0x1b, 5	; 27
 538:	03 c0       	rjmp	.+6      	; 0x540 <wire3_rst_1+0x48>
		case 4: WIRE3_PORT.rst4=1; break;
 53a:	de 9a       	sbi	0x1b, 6	; 27
 53c:	01 c0       	rjmp	.+2      	; 0x540 <wire3_rst_1+0x48>
		case 5: WIRE3_PORT.rst5=1; break;
 53e:	df 9a       	sbi	0x1b, 7	; 27
	}
}
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <wire3_write8>:

/**
 * Write 8 bits data
 */
void wire3_write8(unsigned char data)
{
 546:	0f 93       	push	r16
 548:	1f 93       	push	r17
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	1f 92       	push	r1
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62

	int i;

	WIRE3_DDR.dq=1;
 554:	d0 9a       	sbi	0x1a, 0	; 26
 556:	08 e0       	ldi	r16, 0x08	; 8
 558:	10 e0       	ldi	r17, 0x00	; 0

	for ( i=0; i<8; i++)
	{
		WIRE3_PORT.dq = ((data & 1) != 0);
 55a:	80 fd       	sbrc	r24, 0
 55c:	d8 9a       	sbi	0x1b, 0	; 27
 55e:	80 ff       	sbrs	r24, 0
 560:	d8 98       	cbi	0x1b, 0	; 27
		data = data >> 1;
 562:	86 95       	lsr	r24
		wire3_clock_pulse();
 564:	89 83       	std	Y+1, r24	; 0x01
 566:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <wire3_clock_pulse>
 56a:	01 50       	subi	r16, 0x01	; 1
 56c:	11 09       	sbc	r17, r1

	int i;

	WIRE3_DDR.dq=1;

	for ( i=0; i<8; i++)
 56e:	89 81       	ldd	r24, Y+1	; 0x01
 570:	01 15       	cp	r16, r1
 572:	11 05       	cpc	r17, r1
 574:	91 f7       	brne	.-28     	; 0x55a <wire3_write8+0x14>
	{
		WIRE3_PORT.dq = ((data & 1) != 0);
		data = data >> 1;
		wire3_clock_pulse();
	}
}
 576:	0f 90       	pop	r0
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	08 95       	ret

00000582 <sprintf>:
 582:	ae e0       	ldi	r26, 0x0E	; 14
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	e7 ec       	ldi	r30, 0xC7	; 199
 588:	f2 e0       	ldi	r31, 0x02	; 2
 58a:	0c 94 6d 05 	jmp	0xada	; 0xada <__prologue_saves__+0x1c>
 58e:	0d 89       	ldd	r16, Y+21	; 0x15
 590:	1e 89       	ldd	r17, Y+22	; 0x16
 592:	86 e0       	ldi	r24, 0x06	; 6
 594:	8c 83       	std	Y+4, r24	; 0x04
 596:	1a 83       	std	Y+2, r17	; 0x02
 598:	09 83       	std	Y+1, r16	; 0x01
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	9f e7       	ldi	r25, 0x7F	; 127
 59e:	9e 83       	std	Y+6, r25	; 0x06
 5a0:	8d 83       	std	Y+5, r24	; 0x05
 5a2:	ce 01       	movw	r24, r28
 5a4:	49 96       	adiw	r24, 0x19	; 25
 5a6:	ac 01       	movw	r20, r24
 5a8:	6f 89       	ldd	r22, Y+23	; 0x17
 5aa:	78 8d       	ldd	r23, Y+24	; 0x18
 5ac:	ce 01       	movw	r24, r28
 5ae:	01 96       	adiw	r24, 0x01	; 1
 5b0:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vfprintf>
 5b4:	ef 81       	ldd	r30, Y+7	; 0x07
 5b6:	f8 85       	ldd	r31, Y+8	; 0x08
 5b8:	e0 0f       	add	r30, r16
 5ba:	f1 1f       	adc	r31, r17
 5bc:	10 82       	st	Z, r1
 5be:	2e 96       	adiw	r28, 0x0e	; 14
 5c0:	e4 e0       	ldi	r30, 0x04	; 4
 5c2:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__epilogue_restores__+0x1c>

000005c6 <vfprintf>:
 5c6:	ac e0       	ldi	r26, 0x0C	; 12
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	e9 ee       	ldi	r30, 0xE9	; 233
 5cc:	f2 e0       	ldi	r31, 0x02	; 2
 5ce:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__prologue_saves__>
 5d2:	7c 01       	movw	r14, r24
 5d4:	6b 01       	movw	r12, r22
 5d6:	8a 01       	movw	r16, r20
 5d8:	fc 01       	movw	r30, r24
 5da:	17 82       	std	Z+7, r1	; 0x07
 5dc:	16 82       	std	Z+6, r1	; 0x06
 5de:	83 81       	ldd	r24, Z+3	; 0x03
 5e0:	81 ff       	sbrs	r24, 1
 5e2:	c6 c1       	rjmp	.+908    	; 0x970 <vfprintf+0x3aa>
 5e4:	88 24       	eor	r8, r8
 5e6:	83 94       	inc	r8
 5e8:	91 2c       	mov	r9, r1
 5ea:	8c 0e       	add	r8, r28
 5ec:	9d 1e       	adc	r9, r29
 5ee:	f7 01       	movw	r30, r14
 5f0:	93 81       	ldd	r25, Z+3	; 0x03
 5f2:	f6 01       	movw	r30, r12
 5f4:	93 fd       	sbrc	r25, 3
 5f6:	85 91       	lpm	r24, Z+
 5f8:	93 ff       	sbrs	r25, 3
 5fa:	81 91       	ld	r24, Z+
 5fc:	6f 01       	movw	r12, r30
 5fe:	88 23       	and	r24, r24
 600:	09 f4       	brne	.+2      	; 0x604 <vfprintf+0x3e>
 602:	b2 c1       	rjmp	.+868    	; 0x968 <vfprintf+0x3a2>
 604:	85 32       	cpi	r24, 0x25	; 37
 606:	39 f4       	brne	.+14     	; 0x616 <vfprintf+0x50>
 608:	93 fd       	sbrc	r25, 3
 60a:	85 91       	lpm	r24, Z+
 60c:	93 ff       	sbrs	r25, 3
 60e:	81 91       	ld	r24, Z+
 610:	6f 01       	movw	r12, r30
 612:	85 32       	cpi	r24, 0x25	; 37
 614:	29 f4       	brne	.+10     	; 0x620 <vfprintf+0x5a>
 616:	b7 01       	movw	r22, r14
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <fputc>
 61e:	e7 cf       	rjmp	.-50     	; 0x5ee <vfprintf+0x28>
 620:	51 2c       	mov	r5, r1
 622:	31 2c       	mov	r3, r1
 624:	20 e0       	ldi	r18, 0x00	; 0
 626:	20 32       	cpi	r18, 0x20	; 32
 628:	a8 f4       	brcc	.+42     	; 0x654 <vfprintf+0x8e>
 62a:	8b 32       	cpi	r24, 0x2B	; 43
 62c:	61 f0       	breq	.+24     	; 0x646 <vfprintf+0x80>
 62e:	28 f4       	brcc	.+10     	; 0x63a <vfprintf+0x74>
 630:	80 32       	cpi	r24, 0x20	; 32
 632:	51 f0       	breq	.+20     	; 0x648 <vfprintf+0x82>
 634:	83 32       	cpi	r24, 0x23	; 35
 636:	71 f4       	brne	.+28     	; 0x654 <vfprintf+0x8e>
 638:	0b c0       	rjmp	.+22     	; 0x650 <vfprintf+0x8a>
 63a:	8d 32       	cpi	r24, 0x2D	; 45
 63c:	39 f0       	breq	.+14     	; 0x64c <vfprintf+0x86>
 63e:	80 33       	cpi	r24, 0x30	; 48
 640:	49 f4       	brne	.+18     	; 0x654 <vfprintf+0x8e>
 642:	21 60       	ori	r18, 0x01	; 1
 644:	28 c0       	rjmp	.+80     	; 0x696 <vfprintf+0xd0>
 646:	22 60       	ori	r18, 0x02	; 2
 648:	24 60       	ori	r18, 0x04	; 4
 64a:	25 c0       	rjmp	.+74     	; 0x696 <vfprintf+0xd0>
 64c:	28 60       	ori	r18, 0x08	; 8
 64e:	23 c0       	rjmp	.+70     	; 0x696 <vfprintf+0xd0>
 650:	20 61       	ori	r18, 0x10	; 16
 652:	21 c0       	rjmp	.+66     	; 0x696 <vfprintf+0xd0>
 654:	27 fd       	sbrc	r18, 7
 656:	27 c0       	rjmp	.+78     	; 0x6a6 <vfprintf+0xe0>
 658:	38 2f       	mov	r19, r24
 65a:	30 53       	subi	r19, 0x30	; 48
 65c:	3a 30       	cpi	r19, 0x0A	; 10
 65e:	78 f4       	brcc	.+30     	; 0x67e <vfprintf+0xb8>
 660:	26 ff       	sbrs	r18, 6
 662:	06 c0       	rjmp	.+12     	; 0x670 <vfprintf+0xaa>
 664:	fa e0       	ldi	r31, 0x0A	; 10
 666:	5f 9e       	mul	r5, r31
 668:	30 0d       	add	r19, r0
 66a:	11 24       	eor	r1, r1
 66c:	53 2e       	mov	r5, r19
 66e:	13 c0       	rjmp	.+38     	; 0x696 <vfprintf+0xd0>
 670:	8a e0       	ldi	r24, 0x0A	; 10
 672:	38 9e       	mul	r3, r24
 674:	30 0d       	add	r19, r0
 676:	11 24       	eor	r1, r1
 678:	33 2e       	mov	r3, r19
 67a:	20 62       	ori	r18, 0x20	; 32
 67c:	0c c0       	rjmp	.+24     	; 0x696 <vfprintf+0xd0>
 67e:	8e 32       	cpi	r24, 0x2E	; 46
 680:	21 f4       	brne	.+8      	; 0x68a <vfprintf+0xc4>
 682:	26 fd       	sbrc	r18, 6
 684:	71 c1       	rjmp	.+738    	; 0x968 <vfprintf+0x3a2>
 686:	20 64       	ori	r18, 0x40	; 64
 688:	06 c0       	rjmp	.+12     	; 0x696 <vfprintf+0xd0>
 68a:	8c 36       	cpi	r24, 0x6C	; 108
 68c:	11 f4       	brne	.+4      	; 0x692 <vfprintf+0xcc>
 68e:	20 68       	ori	r18, 0x80	; 128
 690:	02 c0       	rjmp	.+4      	; 0x696 <vfprintf+0xd0>
 692:	88 36       	cpi	r24, 0x68	; 104
 694:	41 f4       	brne	.+16     	; 0x6a6 <vfprintf+0xe0>
 696:	f6 01       	movw	r30, r12
 698:	93 fd       	sbrc	r25, 3
 69a:	85 91       	lpm	r24, Z+
 69c:	93 ff       	sbrs	r25, 3
 69e:	81 91       	ld	r24, Z+
 6a0:	6f 01       	movw	r12, r30
 6a2:	81 11       	cpse	r24, r1
 6a4:	c0 cf       	rjmp	.-128    	; 0x626 <vfprintf+0x60>
 6a6:	98 2f       	mov	r25, r24
 6a8:	95 54       	subi	r25, 0x45	; 69
 6aa:	93 30       	cpi	r25, 0x03	; 3
 6ac:	18 f0       	brcs	.+6      	; 0x6b4 <vfprintf+0xee>
 6ae:	90 52       	subi	r25, 0x20	; 32
 6b0:	93 30       	cpi	r25, 0x03	; 3
 6b2:	28 f4       	brcc	.+10     	; 0x6be <vfprintf+0xf8>
 6b4:	0c 5f       	subi	r16, 0xFC	; 252
 6b6:	1f 4f       	sbci	r17, 0xFF	; 255
 6b8:	ff e3       	ldi	r31, 0x3F	; 63
 6ba:	f9 83       	std	Y+1, r31	; 0x01
 6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <vfprintf+0x112>
 6be:	83 36       	cpi	r24, 0x63	; 99
 6c0:	31 f0       	breq	.+12     	; 0x6ce <vfprintf+0x108>
 6c2:	83 37       	cpi	r24, 0x73	; 115
 6c4:	71 f0       	breq	.+28     	; 0x6e2 <vfprintf+0x11c>
 6c6:	83 35       	cpi	r24, 0x53	; 83
 6c8:	09 f0       	breq	.+2      	; 0x6cc <vfprintf+0x106>
 6ca:	5e c0       	rjmp	.+188    	; 0x788 <vfprintf+0x1c2>
 6cc:	23 c0       	rjmp	.+70     	; 0x714 <vfprintf+0x14e>
 6ce:	f8 01       	movw	r30, r16
 6d0:	80 81       	ld	r24, Z
 6d2:	89 83       	std	Y+1, r24	; 0x01
 6d4:	0e 5f       	subi	r16, 0xFE	; 254
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	44 24       	eor	r4, r4
 6da:	43 94       	inc	r4
 6dc:	51 2c       	mov	r5, r1
 6de:	54 01       	movw	r10, r8
 6e0:	15 c0       	rjmp	.+42     	; 0x70c <vfprintf+0x146>
 6e2:	38 01       	movw	r6, r16
 6e4:	f2 e0       	ldi	r31, 0x02	; 2
 6e6:	6f 0e       	add	r6, r31
 6e8:	71 1c       	adc	r7, r1
 6ea:	f8 01       	movw	r30, r16
 6ec:	a0 80       	ld	r10, Z
 6ee:	b1 80       	ldd	r11, Z+1	; 0x01
 6f0:	26 ff       	sbrs	r18, 6
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <vfprintf+0x134>
 6f4:	65 2d       	mov	r22, r5
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <vfprintf+0x138>
 6fa:	6f ef       	ldi	r22, 0xFF	; 255
 6fc:	7f ef       	ldi	r23, 0xFF	; 255
 6fe:	c5 01       	movw	r24, r10
 700:	2c 87       	std	Y+12, r18	; 0x0c
 702:	0e 94 ca 04 	call	0x994	; 0x994 <strnlen>
 706:	2c 01       	movw	r4, r24
 708:	83 01       	movw	r16, r6
 70a:	2c 85       	ldd	r18, Y+12	; 0x0c
 70c:	6f e7       	ldi	r22, 0x7F	; 127
 70e:	26 2e       	mov	r2, r22
 710:	22 22       	and	r2, r18
 712:	18 c0       	rjmp	.+48     	; 0x744 <vfprintf+0x17e>
 714:	38 01       	movw	r6, r16
 716:	f2 e0       	ldi	r31, 0x02	; 2
 718:	6f 0e       	add	r6, r31
 71a:	71 1c       	adc	r7, r1
 71c:	f8 01       	movw	r30, r16
 71e:	a0 80       	ld	r10, Z
 720:	b1 80       	ldd	r11, Z+1	; 0x01
 722:	26 ff       	sbrs	r18, 6
 724:	03 c0       	rjmp	.+6      	; 0x72c <vfprintf+0x166>
 726:	65 2d       	mov	r22, r5
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <vfprintf+0x16a>
 72c:	6f ef       	ldi	r22, 0xFF	; 255
 72e:	7f ef       	ldi	r23, 0xFF	; 255
 730:	c5 01       	movw	r24, r10
 732:	2c 87       	std	Y+12, r18	; 0x0c
 734:	0e 94 bf 04 	call	0x97e	; 0x97e <strnlen_P>
 738:	2c 01       	movw	r4, r24
 73a:	2c 85       	ldd	r18, Y+12	; 0x0c
 73c:	50 e8       	ldi	r21, 0x80	; 128
 73e:	25 2e       	mov	r2, r21
 740:	22 2a       	or	r2, r18
 742:	83 01       	movw	r16, r6
 744:	23 fc       	sbrc	r2, 3
 746:	1c c0       	rjmp	.+56     	; 0x780 <vfprintf+0x1ba>
 748:	06 c0       	rjmp	.+12     	; 0x756 <vfprintf+0x190>
 74a:	b7 01       	movw	r22, r14
 74c:	80 e2       	ldi	r24, 0x20	; 32
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 d5 04 	call	0x9aa	; 0x9aa <fputc>
 754:	3a 94       	dec	r3
 756:	83 2d       	mov	r24, r3
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	48 16       	cp	r4, r24
 75c:	59 06       	cpc	r5, r25
 75e:	a8 f3       	brcs	.-22     	; 0x74a <vfprintf+0x184>
 760:	0f c0       	rjmp	.+30     	; 0x780 <vfprintf+0x1ba>
 762:	f5 01       	movw	r30, r10
 764:	27 fc       	sbrc	r2, 7
 766:	85 91       	lpm	r24, Z+
 768:	27 fe       	sbrs	r2, 7
 76a:	81 91       	ld	r24, Z+
 76c:	5f 01       	movw	r10, r30
 76e:	b7 01       	movw	r22, r14
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	0e 94 d5 04 	call	0x9aa	; 0x9aa <fputc>
 776:	31 10       	cpse	r3, r1
 778:	3a 94       	dec	r3
 77a:	f1 e0       	ldi	r31, 0x01	; 1
 77c:	4f 1a       	sub	r4, r31
 77e:	51 08       	sbc	r5, r1
 780:	41 14       	cp	r4, r1
 782:	51 04       	cpc	r5, r1
 784:	71 f7       	brne	.-36     	; 0x762 <vfprintf+0x19c>
 786:	ed c0       	rjmp	.+474    	; 0x962 <vfprintf+0x39c>
 788:	84 36       	cpi	r24, 0x64	; 100
 78a:	11 f0       	breq	.+4      	; 0x790 <vfprintf+0x1ca>
 78c:	89 36       	cpi	r24, 0x69	; 105
 78e:	41 f5       	brne	.+80     	; 0x7e0 <vfprintf+0x21a>
 790:	f8 01       	movw	r30, r16
 792:	27 ff       	sbrs	r18, 7
 794:	07 c0       	rjmp	.+14     	; 0x7a4 <vfprintf+0x1de>
 796:	60 81       	ld	r22, Z
 798:	71 81       	ldd	r23, Z+1	; 0x01
 79a:	82 81       	ldd	r24, Z+2	; 0x02
 79c:	93 81       	ldd	r25, Z+3	; 0x03
 79e:	0c 5f       	subi	r16, 0xFC	; 252
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	08 c0       	rjmp	.+16     	; 0x7b4 <vfprintf+0x1ee>
 7a4:	60 81       	ld	r22, Z
 7a6:	71 81       	ldd	r23, Z+1	; 0x01
 7a8:	88 27       	eor	r24, r24
 7aa:	77 fd       	sbrc	r23, 7
 7ac:	80 95       	com	r24
 7ae:	98 2f       	mov	r25, r24
 7b0:	0e 5f       	subi	r16, 0xFE	; 254
 7b2:	1f 4f       	sbci	r17, 0xFF	; 255
 7b4:	4f e6       	ldi	r20, 0x6F	; 111
 7b6:	b4 2e       	mov	r11, r20
 7b8:	b2 22       	and	r11, r18
 7ba:	97 ff       	sbrs	r25, 7
 7bc:	09 c0       	rjmp	.+18     	; 0x7d0 <vfprintf+0x20a>
 7be:	90 95       	com	r25
 7c0:	80 95       	com	r24
 7c2:	70 95       	com	r23
 7c4:	61 95       	neg	r22
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255
 7c8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	f0 e8       	ldi	r31, 0x80	; 128
 7ce:	bf 2a       	or	r11, r31
 7d0:	2a e0       	ldi	r18, 0x0A	; 10
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	a4 01       	movw	r20, r8
 7d6:	0e 94 01 05 	call	0xa02	; 0xa02 <__ultoa_invert>
 7da:	a8 2e       	mov	r10, r24
 7dc:	a8 18       	sub	r10, r8
 7de:	43 c0       	rjmp	.+134    	; 0x866 <vfprintf+0x2a0>
 7e0:	85 37       	cpi	r24, 0x75	; 117
 7e2:	31 f4       	brne	.+12     	; 0x7f0 <vfprintf+0x22a>
 7e4:	3f ee       	ldi	r19, 0xEF	; 239
 7e6:	b3 2e       	mov	r11, r19
 7e8:	b2 22       	and	r11, r18
 7ea:	2a e0       	ldi	r18, 0x0A	; 10
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	24 c0       	rjmp	.+72     	; 0x838 <vfprintf+0x272>
 7f0:	99 ef       	ldi	r25, 0xF9	; 249
 7f2:	b9 2e       	mov	r11, r25
 7f4:	b2 22       	and	r11, r18
 7f6:	8f 36       	cpi	r24, 0x6F	; 111
 7f8:	b9 f0       	breq	.+46     	; 0x828 <vfprintf+0x262>
 7fa:	20 f4       	brcc	.+8      	; 0x804 <vfprintf+0x23e>
 7fc:	88 35       	cpi	r24, 0x58	; 88
 7fe:	09 f0       	breq	.+2      	; 0x802 <vfprintf+0x23c>
 800:	b3 c0       	rjmp	.+358    	; 0x968 <vfprintf+0x3a2>
 802:	0d c0       	rjmp	.+26     	; 0x81e <vfprintf+0x258>
 804:	80 37       	cpi	r24, 0x70	; 112
 806:	21 f0       	breq	.+8      	; 0x810 <vfprintf+0x24a>
 808:	88 37       	cpi	r24, 0x78	; 120
 80a:	09 f0       	breq	.+2      	; 0x80e <vfprintf+0x248>
 80c:	ad c0       	rjmp	.+346    	; 0x968 <vfprintf+0x3a2>
 80e:	02 c0       	rjmp	.+4      	; 0x814 <vfprintf+0x24e>
 810:	20 e1       	ldi	r18, 0x10	; 16
 812:	b2 2a       	or	r11, r18
 814:	b4 fe       	sbrs	r11, 4
 816:	0b c0       	rjmp	.+22     	; 0x82e <vfprintf+0x268>
 818:	84 e0       	ldi	r24, 0x04	; 4
 81a:	b8 2a       	or	r11, r24
 81c:	08 c0       	rjmp	.+16     	; 0x82e <vfprintf+0x268>
 81e:	24 ff       	sbrs	r18, 4
 820:	09 c0       	rjmp	.+18     	; 0x834 <vfprintf+0x26e>
 822:	e6 e0       	ldi	r30, 0x06	; 6
 824:	be 2a       	or	r11, r30
 826:	06 c0       	rjmp	.+12     	; 0x834 <vfprintf+0x26e>
 828:	28 e0       	ldi	r18, 0x08	; 8
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	05 c0       	rjmp	.+10     	; 0x838 <vfprintf+0x272>
 82e:	20 e1       	ldi	r18, 0x10	; 16
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	02 c0       	rjmp	.+4      	; 0x838 <vfprintf+0x272>
 834:	20 e1       	ldi	r18, 0x10	; 16
 836:	32 e0       	ldi	r19, 0x02	; 2
 838:	f8 01       	movw	r30, r16
 83a:	b7 fe       	sbrs	r11, 7
 83c:	07 c0       	rjmp	.+14     	; 0x84c <vfprintf+0x286>
 83e:	60 81       	ld	r22, Z
 840:	71 81       	ldd	r23, Z+1	; 0x01
 842:	82 81       	ldd	r24, Z+2	; 0x02
 844:	93 81       	ldd	r25, Z+3	; 0x03
 846:	0c 5f       	subi	r16, 0xFC	; 252
 848:	1f 4f       	sbci	r17, 0xFF	; 255
 84a:	06 c0       	rjmp	.+12     	; 0x858 <vfprintf+0x292>
 84c:	60 81       	ld	r22, Z
 84e:	71 81       	ldd	r23, Z+1	; 0x01
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 5f       	subi	r16, 0xFE	; 254
 856:	1f 4f       	sbci	r17, 0xFF	; 255
 858:	a4 01       	movw	r20, r8
 85a:	0e 94 01 05 	call	0xa02	; 0xa02 <__ultoa_invert>
 85e:	a8 2e       	mov	r10, r24
 860:	a8 18       	sub	r10, r8
 862:	ff e7       	ldi	r31, 0x7F	; 127
 864:	bf 22       	and	r11, r31
 866:	b6 fe       	sbrs	r11, 6
 868:	0b c0       	rjmp	.+22     	; 0x880 <vfprintf+0x2ba>
 86a:	2b 2d       	mov	r18, r11
 86c:	2e 7f       	andi	r18, 0xFE	; 254
 86e:	a5 14       	cp	r10, r5
 870:	50 f4       	brcc	.+20     	; 0x886 <vfprintf+0x2c0>
 872:	b4 fe       	sbrs	r11, 4
 874:	0a c0       	rjmp	.+20     	; 0x88a <vfprintf+0x2c4>
 876:	b2 fc       	sbrc	r11, 2
 878:	08 c0       	rjmp	.+16     	; 0x88a <vfprintf+0x2c4>
 87a:	2b 2d       	mov	r18, r11
 87c:	2e 7e       	andi	r18, 0xEE	; 238
 87e:	05 c0       	rjmp	.+10     	; 0x88a <vfprintf+0x2c4>
 880:	7a 2c       	mov	r7, r10
 882:	2b 2d       	mov	r18, r11
 884:	03 c0       	rjmp	.+6      	; 0x88c <vfprintf+0x2c6>
 886:	7a 2c       	mov	r7, r10
 888:	01 c0       	rjmp	.+2      	; 0x88c <vfprintf+0x2c6>
 88a:	75 2c       	mov	r7, r5
 88c:	24 ff       	sbrs	r18, 4
 88e:	0d c0       	rjmp	.+26     	; 0x8aa <vfprintf+0x2e4>
 890:	fe 01       	movw	r30, r28
 892:	ea 0d       	add	r30, r10
 894:	f1 1d       	adc	r31, r1
 896:	80 81       	ld	r24, Z
 898:	80 33       	cpi	r24, 0x30	; 48
 89a:	11 f4       	brne	.+4      	; 0x8a0 <vfprintf+0x2da>
 89c:	29 7e       	andi	r18, 0xE9	; 233
 89e:	09 c0       	rjmp	.+18     	; 0x8b2 <vfprintf+0x2ec>
 8a0:	22 ff       	sbrs	r18, 2
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <vfprintf+0x2ea>
 8a4:	73 94       	inc	r7
 8a6:	73 94       	inc	r7
 8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <vfprintf+0x2ec>
 8aa:	82 2f       	mov	r24, r18
 8ac:	86 78       	andi	r24, 0x86	; 134
 8ae:	09 f0       	breq	.+2      	; 0x8b2 <vfprintf+0x2ec>
 8b0:	73 94       	inc	r7
 8b2:	23 fd       	sbrc	r18, 3
 8b4:	14 c0       	rjmp	.+40     	; 0x8de <vfprintf+0x318>
 8b6:	20 ff       	sbrs	r18, 0
 8b8:	0f c0       	rjmp	.+30     	; 0x8d8 <vfprintf+0x312>
 8ba:	5a 2c       	mov	r5, r10
 8bc:	73 14       	cp	r7, r3
 8be:	60 f4       	brcc	.+24     	; 0x8d8 <vfprintf+0x312>
 8c0:	53 0c       	add	r5, r3
 8c2:	57 18       	sub	r5, r7
 8c4:	73 2c       	mov	r7, r3
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <vfprintf+0x312>
 8c8:	b7 01       	movw	r22, r14
 8ca:	80 e2       	ldi	r24, 0x20	; 32
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	2c 87       	std	Y+12, r18	; 0x0c
 8d0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <fputc>
 8d4:	73 94       	inc	r7
 8d6:	2c 85       	ldd	r18, Y+12	; 0x0c
 8d8:	73 14       	cp	r7, r3
 8da:	b0 f3       	brcs	.-20     	; 0x8c8 <vfprintf+0x302>
 8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <vfprintf+0x320>
 8de:	73 14       	cp	r7, r3
 8e0:	10 f4       	brcc	.+4      	; 0x8e6 <vfprintf+0x320>
 8e2:	37 18       	sub	r3, r7
 8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <vfprintf+0x322>
 8e6:	31 2c       	mov	r3, r1
 8e8:	24 ff       	sbrs	r18, 4
 8ea:	12 c0       	rjmp	.+36     	; 0x910 <vfprintf+0x34a>
 8ec:	b7 01       	movw	r22, r14
 8ee:	80 e3       	ldi	r24, 0x30	; 48
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	2c 87       	std	Y+12, r18	; 0x0c
 8f4:	0e 94 d5 04 	call	0x9aa	; 0x9aa <fputc>
 8f8:	2c 85       	ldd	r18, Y+12	; 0x0c
 8fa:	22 ff       	sbrs	r18, 2
 8fc:	1e c0       	rjmp	.+60     	; 0x93a <vfprintf+0x374>
 8fe:	21 ff       	sbrs	r18, 1
 900:	03 c0       	rjmp	.+6      	; 0x908 <vfprintf+0x342>
 902:	88 e5       	ldi	r24, 0x58	; 88
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <vfprintf+0x346>
 908:	88 e7       	ldi	r24, 0x78	; 120
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	b7 01       	movw	r22, r14
 90e:	0c c0       	rjmp	.+24     	; 0x928 <vfprintf+0x362>
 910:	82 2f       	mov	r24, r18
 912:	86 78       	andi	r24, 0x86	; 134
 914:	91 f0       	breq	.+36     	; 0x93a <vfprintf+0x374>
 916:	21 fd       	sbrc	r18, 1
 918:	02 c0       	rjmp	.+4      	; 0x91e <vfprintf+0x358>
 91a:	80 e2       	ldi	r24, 0x20	; 32
 91c:	01 c0       	rjmp	.+2      	; 0x920 <vfprintf+0x35a>
 91e:	8b e2       	ldi	r24, 0x2B	; 43
 920:	27 fd       	sbrc	r18, 7
 922:	8d e2       	ldi	r24, 0x2D	; 45
 924:	b7 01       	movw	r22, r14
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 d5 04 	call	0x9aa	; 0x9aa <fputc>
 92c:	06 c0       	rjmp	.+12     	; 0x93a <vfprintf+0x374>
 92e:	b7 01       	movw	r22, r14
 930:	80 e3       	ldi	r24, 0x30	; 48
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 d5 04 	call	0x9aa	; 0x9aa <fputc>
 938:	5a 94       	dec	r5
 93a:	a5 14       	cp	r10, r5
 93c:	c0 f3       	brcs	.-16     	; 0x92e <vfprintf+0x368>
 93e:	aa 94       	dec	r10
 940:	f4 01       	movw	r30, r8
 942:	ea 0d       	add	r30, r10
 944:	f1 1d       	adc	r31, r1
 946:	b7 01       	movw	r22, r14
 948:	80 81       	ld	r24, Z
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <fputc>
 950:	a1 10       	cpse	r10, r1
 952:	f5 cf       	rjmp	.-22     	; 0x93e <vfprintf+0x378>
 954:	06 c0       	rjmp	.+12     	; 0x962 <vfprintf+0x39c>
 956:	b7 01       	movw	r22, r14
 958:	80 e2       	ldi	r24, 0x20	; 32
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <fputc>
 960:	3a 94       	dec	r3
 962:	31 10       	cpse	r3, r1
 964:	f8 cf       	rjmp	.-16     	; 0x956 <vfprintf+0x390>
 966:	43 ce       	rjmp	.-890    	; 0x5ee <vfprintf+0x28>
 968:	f7 01       	movw	r30, r14
 96a:	26 81       	ldd	r18, Z+6	; 0x06
 96c:	37 81       	ldd	r19, Z+7	; 0x07
 96e:	02 c0       	rjmp	.+4      	; 0x974 <vfprintf+0x3ae>
 970:	2f ef       	ldi	r18, 0xFF	; 255
 972:	3f ef       	ldi	r19, 0xFF	; 255
 974:	c9 01       	movw	r24, r18
 976:	2c 96       	adiw	r28, 0x0c	; 12
 978:	e2 e1       	ldi	r30, 0x12	; 18
 97a:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__epilogue_restores__>

0000097e <strnlen_P>:
 97e:	fc 01       	movw	r30, r24
 980:	05 90       	lpm	r0, Z+
 982:	61 50       	subi	r22, 0x01	; 1
 984:	70 40       	sbci	r23, 0x00	; 0
 986:	01 10       	cpse	r0, r1
 988:	d8 f7       	brcc	.-10     	; 0x980 <strnlen_P+0x2>
 98a:	80 95       	com	r24
 98c:	90 95       	com	r25
 98e:	8e 0f       	add	r24, r30
 990:	9f 1f       	adc	r25, r31
 992:	08 95       	ret

00000994 <strnlen>:
 994:	fc 01       	movw	r30, r24
 996:	61 50       	subi	r22, 0x01	; 1
 998:	70 40       	sbci	r23, 0x00	; 0
 99a:	01 90       	ld	r0, Z+
 99c:	01 10       	cpse	r0, r1
 99e:	d8 f7       	brcc	.-10     	; 0x996 <strnlen+0x2>
 9a0:	80 95       	com	r24
 9a2:	90 95       	com	r25
 9a4:	8e 0f       	add	r24, r30
 9a6:	9f 1f       	adc	r25, r31
 9a8:	08 95       	ret

000009aa <fputc>:
 9aa:	0f 93       	push	r16
 9ac:	1f 93       	push	r17
 9ae:	cf 93       	push	r28
 9b0:	df 93       	push	r29
 9b2:	8c 01       	movw	r16, r24
 9b4:	eb 01       	movw	r28, r22
 9b6:	8b 81       	ldd	r24, Y+3	; 0x03
 9b8:	81 fd       	sbrc	r24, 1
 9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <fputc+0x18>
 9bc:	0f ef       	ldi	r16, 0xFF	; 255
 9be:	1f ef       	ldi	r17, 0xFF	; 255
 9c0:	1a c0       	rjmp	.+52     	; 0x9f6 <fputc+0x4c>
 9c2:	82 ff       	sbrs	r24, 2
 9c4:	0d c0       	rjmp	.+26     	; 0x9e0 <fputc+0x36>
 9c6:	2e 81       	ldd	r18, Y+6	; 0x06
 9c8:	3f 81       	ldd	r19, Y+7	; 0x07
 9ca:	8c 81       	ldd	r24, Y+4	; 0x04
 9cc:	9d 81       	ldd	r25, Y+5	; 0x05
 9ce:	28 17       	cp	r18, r24
 9d0:	39 07       	cpc	r19, r25
 9d2:	64 f4       	brge	.+24     	; 0x9ec <fputc+0x42>
 9d4:	e8 81       	ld	r30, Y
 9d6:	f9 81       	ldd	r31, Y+1	; 0x01
 9d8:	01 93       	st	Z+, r16
 9da:	f9 83       	std	Y+1, r31	; 0x01
 9dc:	e8 83       	st	Y, r30
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <fputc+0x42>
 9e0:	e8 85       	ldd	r30, Y+8	; 0x08
 9e2:	f9 85       	ldd	r31, Y+9	; 0x09
 9e4:	80 2f       	mov	r24, r16
 9e6:	09 95       	icall
 9e8:	89 2b       	or	r24, r25
 9ea:	41 f7       	brne	.-48     	; 0x9bc <fputc+0x12>
 9ec:	8e 81       	ldd	r24, Y+6	; 0x06
 9ee:	9f 81       	ldd	r25, Y+7	; 0x07
 9f0:	01 96       	adiw	r24, 0x01	; 1
 9f2:	9f 83       	std	Y+7, r25	; 0x07
 9f4:	8e 83       	std	Y+6, r24	; 0x06
 9f6:	c8 01       	movw	r24, r16
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	1f 91       	pop	r17
 9fe:	0f 91       	pop	r16
 a00:	08 95       	ret

00000a02 <__ultoa_invert>:
 a02:	fa 01       	movw	r30, r20
 a04:	aa 27       	eor	r26, r26
 a06:	28 30       	cpi	r18, 0x08	; 8
 a08:	51 f1       	breq	.+84     	; 0xa5e <__ultoa_invert+0x5c>
 a0a:	20 31       	cpi	r18, 0x10	; 16
 a0c:	81 f1       	breq	.+96     	; 0xa6e <__ultoa_invert+0x6c>
 a0e:	e8 94       	clt
 a10:	6f 93       	push	r22
 a12:	6e 7f       	andi	r22, 0xFE	; 254
 a14:	6e 5f       	subi	r22, 0xFE	; 254
 a16:	7f 4f       	sbci	r23, 0xFF	; 255
 a18:	8f 4f       	sbci	r24, 0xFF	; 255
 a1a:	9f 4f       	sbci	r25, 0xFF	; 255
 a1c:	af 4f       	sbci	r26, 0xFF	; 255
 a1e:	b1 e0       	ldi	r27, 0x01	; 1
 a20:	3e d0       	rcall	.+124    	; 0xa9e <__ultoa_invert+0x9c>
 a22:	b4 e0       	ldi	r27, 0x04	; 4
 a24:	3c d0       	rcall	.+120    	; 0xa9e <__ultoa_invert+0x9c>
 a26:	67 0f       	add	r22, r23
 a28:	78 1f       	adc	r23, r24
 a2a:	89 1f       	adc	r24, r25
 a2c:	9a 1f       	adc	r25, r26
 a2e:	a1 1d       	adc	r26, r1
 a30:	68 0f       	add	r22, r24
 a32:	79 1f       	adc	r23, r25
 a34:	8a 1f       	adc	r24, r26
 a36:	91 1d       	adc	r25, r1
 a38:	a1 1d       	adc	r26, r1
 a3a:	6a 0f       	add	r22, r26
 a3c:	71 1d       	adc	r23, r1
 a3e:	81 1d       	adc	r24, r1
 a40:	91 1d       	adc	r25, r1
 a42:	a1 1d       	adc	r26, r1
 a44:	20 d0       	rcall	.+64     	; 0xa86 <__ultoa_invert+0x84>
 a46:	09 f4       	brne	.+2      	; 0xa4a <__ultoa_invert+0x48>
 a48:	68 94       	set
 a4a:	3f 91       	pop	r19
 a4c:	2a e0       	ldi	r18, 0x0A	; 10
 a4e:	26 9f       	mul	r18, r22
 a50:	11 24       	eor	r1, r1
 a52:	30 19       	sub	r19, r0
 a54:	30 5d       	subi	r19, 0xD0	; 208
 a56:	31 93       	st	Z+, r19
 a58:	de f6       	brtc	.-74     	; 0xa10 <__ultoa_invert+0xe>
 a5a:	cf 01       	movw	r24, r30
 a5c:	08 95       	ret
 a5e:	46 2f       	mov	r20, r22
 a60:	47 70       	andi	r20, 0x07	; 7
 a62:	40 5d       	subi	r20, 0xD0	; 208
 a64:	41 93       	st	Z+, r20
 a66:	b3 e0       	ldi	r27, 0x03	; 3
 a68:	0f d0       	rcall	.+30     	; 0xa88 <__ultoa_invert+0x86>
 a6a:	c9 f7       	brne	.-14     	; 0xa5e <__ultoa_invert+0x5c>
 a6c:	f6 cf       	rjmp	.-20     	; 0xa5a <__ultoa_invert+0x58>
 a6e:	46 2f       	mov	r20, r22
 a70:	4f 70       	andi	r20, 0x0F	; 15
 a72:	40 5d       	subi	r20, 0xD0	; 208
 a74:	4a 33       	cpi	r20, 0x3A	; 58
 a76:	18 f0       	brcs	.+6      	; 0xa7e <__ultoa_invert+0x7c>
 a78:	49 5d       	subi	r20, 0xD9	; 217
 a7a:	31 fd       	sbrc	r19, 1
 a7c:	40 52       	subi	r20, 0x20	; 32
 a7e:	41 93       	st	Z+, r20
 a80:	02 d0       	rcall	.+4      	; 0xa86 <__ultoa_invert+0x84>
 a82:	a9 f7       	brne	.-22     	; 0xa6e <__ultoa_invert+0x6c>
 a84:	ea cf       	rjmp	.-44     	; 0xa5a <__ultoa_invert+0x58>
 a86:	b4 e0       	ldi	r27, 0x04	; 4
 a88:	a6 95       	lsr	r26
 a8a:	97 95       	ror	r25
 a8c:	87 95       	ror	r24
 a8e:	77 95       	ror	r23
 a90:	67 95       	ror	r22
 a92:	ba 95       	dec	r27
 a94:	c9 f7       	brne	.-14     	; 0xa88 <__ultoa_invert+0x86>
 a96:	00 97       	sbiw	r24, 0x00	; 0
 a98:	61 05       	cpc	r22, r1
 a9a:	71 05       	cpc	r23, r1
 a9c:	08 95       	ret
 a9e:	9b 01       	movw	r18, r22
 aa0:	ac 01       	movw	r20, r24
 aa2:	0a 2e       	mov	r0, r26
 aa4:	06 94       	lsr	r0
 aa6:	57 95       	ror	r21
 aa8:	47 95       	ror	r20
 aaa:	37 95       	ror	r19
 aac:	27 95       	ror	r18
 aae:	ba 95       	dec	r27
 ab0:	c9 f7       	brne	.-14     	; 0xaa4 <__ultoa_invert+0xa2>
 ab2:	62 0f       	add	r22, r18
 ab4:	73 1f       	adc	r23, r19
 ab6:	84 1f       	adc	r24, r20
 ab8:	95 1f       	adc	r25, r21
 aba:	a0 1d       	adc	r26, r0
 abc:	08 95       	ret

00000abe <__prologue_saves__>:
 abe:	2f 92       	push	r2
 ac0:	3f 92       	push	r3
 ac2:	4f 92       	push	r4
 ac4:	5f 92       	push	r5
 ac6:	6f 92       	push	r6
 ac8:	7f 92       	push	r7
 aca:	8f 92       	push	r8
 acc:	9f 92       	push	r9
 ace:	af 92       	push	r10
 ad0:	bf 92       	push	r11
 ad2:	cf 92       	push	r12
 ad4:	df 92       	push	r13
 ad6:	ef 92       	push	r14
 ad8:	ff 92       	push	r15
 ada:	0f 93       	push	r16
 adc:	1f 93       	push	r17
 ade:	cf 93       	push	r28
 ae0:	df 93       	push	r29
 ae2:	cd b7       	in	r28, 0x3d	; 61
 ae4:	de b7       	in	r29, 0x3e	; 62
 ae6:	ca 1b       	sub	r28, r26
 ae8:	db 0b       	sbc	r29, r27
 aea:	0f b6       	in	r0, 0x3f	; 63
 aec:	f8 94       	cli
 aee:	de bf       	out	0x3e, r29	; 62
 af0:	0f be       	out	0x3f, r0	; 63
 af2:	cd bf       	out	0x3d, r28	; 61
 af4:	09 94       	ijmp

00000af6 <__epilogue_restores__>:
 af6:	2a 88       	ldd	r2, Y+18	; 0x12
 af8:	39 88       	ldd	r3, Y+17	; 0x11
 afa:	48 88       	ldd	r4, Y+16	; 0x10
 afc:	5f 84       	ldd	r5, Y+15	; 0x0f
 afe:	6e 84       	ldd	r6, Y+14	; 0x0e
 b00:	7d 84       	ldd	r7, Y+13	; 0x0d
 b02:	8c 84       	ldd	r8, Y+12	; 0x0c
 b04:	9b 84       	ldd	r9, Y+11	; 0x0b
 b06:	aa 84       	ldd	r10, Y+10	; 0x0a
 b08:	b9 84       	ldd	r11, Y+9	; 0x09
 b0a:	c8 84       	ldd	r12, Y+8	; 0x08
 b0c:	df 80       	ldd	r13, Y+7	; 0x07
 b0e:	ee 80       	ldd	r14, Y+6	; 0x06
 b10:	fd 80       	ldd	r15, Y+5	; 0x05
 b12:	0c 81       	ldd	r16, Y+4	; 0x04
 b14:	1b 81       	ldd	r17, Y+3	; 0x03
 b16:	aa 81       	ldd	r26, Y+2	; 0x02
 b18:	b9 81       	ldd	r27, Y+1	; 0x01
 b1a:	ce 0f       	add	r28, r30
 b1c:	d1 1d       	adc	r29, r1
 b1e:	0f b6       	in	r0, 0x3f	; 63
 b20:	f8 94       	cli
 b22:	de bf       	out	0x3e, r29	; 62
 b24:	0f be       	out	0x3f, r0	; 63
 b26:	cd bf       	out	0x3d, r28	; 61
 b28:	ed 01       	movw	r28, r26
 b2a:	08 95       	ret

00000b2c <_exit>:
 b2c:	f8 94       	cli

00000b2e <__stop_program>:
 b2e:	ff cf       	rjmp	.-2      	; 0xb2e <__stop_program>
